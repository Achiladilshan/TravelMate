{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport { css, html } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { map } from 'lit/directives/map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { when } from 'lit/directives/when.js';\nimport { GMPX_FONT_CAPTION, GMPX_FONT_SIZE_BASE, GMPX_FONT_TITLE_MEDIUM } from '../../base/common_styles.js';\nimport { FocusController } from '../../base/focus_controller.js';\nimport { LocalizationController } from '../../base/localization_controller.js';\nimport { WebFont, WebFontController } from '../../base/web_font_controller.js';\nimport { renderAttribution } from '../../utils/place_utils.js';\nimport { PlaceDataConsumer } from '../place_data_consumer.js';\n/**\n * Maximum width/height of a Place Photo that can be requested, in pixels; see:\n * https://developers.google.com/maps/documentation/places/web-service/place-photos#maxheightpx-and-maxwidthpx.\n */\nconst MAX_PHOTO_SIZE_PX = 4800;\n/** Maximum width/height of a Place Photo to display as tile, in pixels. */\nconst MAX_TILE_PHOTO_SIZE_PX = 1200;\n/** Spacing for margins and paddings based on baseline font size. */\nconst SPACING_BASE = css`calc(${GMPX_FONT_SIZE_BASE} * 0.5)`;\n/**\n * Returns the desired photo size in pixels based on CSS pixels and max size,\n * accounting for diff between physical and CSS pixels on current device; see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio.\n */\nfunction getPhotoSize(cssPx, max) {\n  const devicePx = Math.ceil(cssPx * window.devicePixelRatio);\n  return Math.min(devicePx, max);\n}\n/**\n * Formats a `google.maps.places.Photo` object for display based on tile size.\n *\n * If photo is wider relative to its height compared to the tile, then its\n * height should be capped at the tile's height; vice versa for tile width.\n *\n *                                            ┌┄┄┄┄┄┄┄┄┄┄┄┄┐\n *                                            ┆            ┆  PHOTO\n *    ┌┄┄┄┄┄┌────────────┐┄┄┄┄┄┐              ├────────────┤\n *    ┆     │            │     ┆              │            │\n *    ┆     │    TILE    │     ┆  PHOTO       │    TILE    │\n *    ┆     │            │     ┆              │            │\n *    └┄┄┄┄┄└────────────┘┄┄┄┄┄┘              ├────────────┤\n *                                            ┆            ┆\n *                                            └┄┄┄┄┄┄┄┄┄┄┄┄┘\n */\nfunction formatPhoto(photo, tileSize) {\n  const photoSizeRatio = photo.widthPx / photo.heightPx;\n  const windowSizeRatio = window.innerWidth / window.innerHeight;\n  const tileSizeRatio = tileSize.widthPx / tileSize.heightPx;\n  const lightboxPhotoOptions = photoSizeRatio > windowSizeRatio ? {\n    maxHeight: getPhotoSize(window.innerHeight, MAX_PHOTO_SIZE_PX)\n  } : {\n    maxWidth: getPhotoSize(window.innerWidth, MAX_PHOTO_SIZE_PX)\n  };\n  const tilePhotoOptions = photoSizeRatio > tileSizeRatio ? {\n    maxHeight: getPhotoSize(tileSize.heightPx, MAX_TILE_PHOTO_SIZE_PX)\n  } : {\n    maxWidth: getPhotoSize(tileSize.widthPx, MAX_TILE_PHOTO_SIZE_PX)\n  };\n  return {\n    uri: photo.getURI(lightboxPhotoOptions),\n    tileUri: photo.getURI(tilePhotoOptions),\n    attributions: photo.authorAttributions\n  };\n}\nfunction stopEscapePropagation(event) {\n  if (event.key === 'Escape') event.stopPropagation();\n}\n/**\n * Component that displays photos of this place as tiles, with a lightbox view\n * when a photo is clicked. The lightbox includes proper photo attribution.\n *\n * @csspart tile - Styles each individual photo tile, including border radius,\n * width/height, margin, background color before image is loaded, etc.\n *\n * @cssproperty [--gmpx-font-family-base] - Font family used for captions in the lightbox.\n * @cssproperty [--gmpx-font-family-headings] - Font family of the place title in the lightbox.\n * @cssproperty [--gmpx-font-size-base] - Used to scale the component.\n */\nlet PlacePhotoGallery = class PlacePhotoGallery extends PlaceDataConsumer {\n  constructor() {\n    super(...arguments);\n    this.selectedIndex = 0;\n    this.focusController = new FocusController(this, isKeyboardNavigating => {\n      if (isKeyboardNavigating) {\n        this.containerElement?.classList.remove('hide-focus-ring');\n      } else {\n        this.containerElement?.classList.add('hide-focus-ring');\n      }\n    });\n    this.fontLoader = new WebFontController(this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n    this.keydownEventListener = ({\n      key\n    }) => {\n      if (!this.lightboxElement?.open) return;\n      switch (key) {\n        case 'ArrowLeft':\n          this.isRTL() ? this.navigateToNext() : this.navigateToPrevious();\n          break;\n        case 'ArrowRight':\n          this.isRTL() ? this.navigateToPrevious() : this.navigateToNext();\n          break;\n        default:\n      }\n    };\n    this.getMsg = LocalizationController.buildLocalizer(this);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    document.addEventListener('keydown', this.keydownEventListener);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    document.removeEventListener('keydown', this.keydownEventListener);\n  }\n  render() {\n    const photos = this.getFormattedPhotos();\n    const selectedPhoto = photos[this.selectedIndex];\n    const placeName = this.getPlace()?.displayName;\n    // clang-format off\n    const captionCard = html`\n      <div class=\"info-card\">\n        <button\n          aria-label=${this.getMsg('PLACE_PHOTO_BACK_ARIA_LABEL')}\n          autofocus\n          @click=${this.closeLightbox}\n        >\n          <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n            ${this.isRTL() ? 'arrow_forward' : 'arrow_back'}\n          </span>\n        </button>\n        <div class=\"text-container\">\n          ${when(placeName, () => html`<div class=\"title\">${placeName}</div>`)}\n          ${when(selectedPhoto?.attributions.length, () => html`\n            <div class=\"caption\">\n              <span>${this.getMsg('PLACE_PHOTO_ATTRIBUTION_PREFIX')}</span>\n              ${map(selectedPhoto.attributions, ({\n      displayName,\n      uri\n    }) => html`${renderAttribution(displayName, uri ?? null)} `)}\n            </div>\n          `)}\n        </div>\n      </div>\n    `;\n    // clang-format on\n    const navControls = html`\n      <div class=\"nav-controls\">\n        <button\n          aria-label=${this.getMsg('PLACE_PHOTO_PREV_ARIA_LABEL')}\n          @click=${this.navigateToPrevious}\n          .disabled=${this.selectedIndex === 0}\n        >\n          <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n            ${this.isRTL() ? 'chevron_right' : 'chevron_left'}\n          </span>\n        </button>\n        <button\n          aria-label=${this.getMsg('PLACE_PHOTO_NEXT_ARIA_LABEL')}\n          @click=${this.navigateToNext}\n          .disabled=${this.selectedIndex === photos.length - 1}\n        >\n          <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n            ${this.isRTL() ? 'chevron_left' : 'chevron_right'}\n          </span>\n        </button>\n      </div>\n    `;\n    // clang-format off\n    const renderTileButton = (photo, i) => html`\n      <button\n        aria-label=${this.getMsg('PLACE_PHOTO_TILE_ARIA_LABEL', i + 1)}\n        @click=${() => void this.openLightbox(i)}\n        .disabled=${!photo}\n        part=\"tile\"\n        style=${styleMap({\n      'background-image': photo && `url(${photo.tileUri})`\n    })}\n      ></button>\n    `;\n    // clang-format on\n    // Note on the <dialog>'s keydown listener: Prevent escape keydowns from\n    // propagating beyond the lightbox so that they don't cause things like\n    // closing an overlay layout. The <dialog> will close automatically on\n    // escape, so we don't have to worry about catching the event ourselves.\n    return html`\n      <div class=\"container\">\n        <div>${map(photos.slice(0, this.maxTiles), renderTileButton)}</div>\n        <dialog class=\"lightbox\" @keydown=${stopEscapePropagation}>\n          <div class=\"backdrop\" @click=${this.closeLightbox}></div>\n          <img\n            alt=${this.getMsg('PLACE_PHOTO_ALT', placeName ?? '')}\n            class=\"photo\"\n            src=${ifDefined(selectedPhoto?.uri)}\n          />\n          ${captionCard}\n          ${navControls}\n        </dialog>\n      </div>\n    `;\n  }\n  updated() {\n    if (!this.tileSize && this.firstTileElement) {\n      // Note that sometimes a tile's BoundingClientRect becomes defined outside\n      // Lit's reactive update cycle. In such cases the tile size will be zero,\n      // and we cap width/height at `MAX_TILE_PHOTO_SIZE_PX` to avoid requesting\n      // an overly large image.\n      this.tileSize = {\n        widthPx: this.firstTileElement.clientWidth || MAX_TILE_PHOTO_SIZE_PX,\n        heightPx: this.firstTileElement.clientHeight || MAX_TILE_PHOTO_SIZE_PX\n      };\n    }\n  }\n  /** @ignore */\n  getRequiredFields() {\n    return ['displayName', 'photos'];\n  }\n  placeHasData(place) {\n    return !!(place.photos && place.photos.length > 0);\n  }\n  getFormattedPhotos() {\n    const place = this.getPlace();\n    // If Place data is not yet available or the tile elements have not been\n    // rendered, then return a list of null values as placeholders.\n    if (place === undefined || !this.tileSize) {\n      return new Array(10).fill(null);\n    }\n    if (!place?.photos) return [];\n    return place.photos.map(photo => formatPhoto(photo, this.tileSize));\n  }\n  isRTL() {\n    return getComputedStyle(this).direction.toLowerCase() === 'rtl';\n  }\n  async openLightbox(index) {\n    this.selectedIndex = index;\n    await this.updateComplete;\n    this.lightboxElement?.showModal();\n  }\n  closeLightbox() {\n    this.lightboxElement?.close();\n  }\n  navigateToPrevious() {\n    if (this.selectedIndex > 0) this.selectedIndex--;\n  }\n  navigateToNext() {\n    const numPhotos = this.getPlace()?.photos?.length;\n    if (numPhotos && this.selectedIndex < numPhotos - 1) this.selectedIndex++;\n  }\n};\nPlacePhotoGallery.styles = css`\n    :host(:not([hidden])) {\n      display: block;\n    }\n\n    .container.hide-focus-ring button:focus {\n      outline: none;\n    }\n\n    a {\n      color: inherit;\n    }\n\n    button {\n      background: none;\n      border: none;\n      color: inherit;\n      cursor: pointer;\n      padding: 0;\n    }\n\n    button[disabled] {\n      cursor: default;\n    }\n\n    [part=\"tile\"] {\n      background-color: #f5f5f5;\n      background-position: center;\n      background-size: cover;\n      border-radius: 8px;\n      display: inline-block;\n      height: 134px;\n      width: 142px;\n    }\n\n    /* The dialog element has a default border-width: initial (3px),\n       padding: 1em, and max-height/width: calc((100% - 6px) - 2em). We remove\n       the border and take the corresponding 6px out of the height/width\n       calculation so it still fills the screen. */\n    .lightbox {\n      border-width: 0;\n      color: white;\n      height: 100%;\n      max-height: calc(100% - 2em);\n      max-width: calc(100% - 2em);\n      width: 100%;\n    }\n\n    .backdrop {\n      background: black;\n      inset: 0;\n      position: absolute;\n    }\n\n    .photo {\n      inset: 0;\n      margin: auto;\n      max-height: 100%;\n      max-width: 100%;\n      position: absolute;\n    }\n\n    .icon {\n      font-size: calc(${GMPX_FONT_SIZE_BASE} * 2);\n      vertical-align: middle;\n    }\n\n    .info-card {\n      background: rgba(32, 33, 36, 0.7);\n      border-radius: 8px;\n      display: flex;\n      padding: ${GMPX_FONT_SIZE_BASE};\n      position: absolute;\n    }\n\n    .info-card .text-container {\n      flex-direction: column;\n      padding: 0 ${SPACING_BASE};\n    }\n\n    .info-card .title {\n      font: ${GMPX_FONT_TITLE_MEDIUM};\n    }\n\n    .info-card .caption {\n      font : ${GMPX_FONT_CAPTION};\n    }\n\n    .nav-controls {\n      bottom: ${GMPX_FONT_SIZE_BASE};\n      left: 0;\n      margin: 0 auto;\n      position: absolute;\n      right: 0;\n      width: fit-content;\n    }\n\n    .nav-controls button {\n      background-color: rgba(32, 33, 36, 0.7);\n      border-radius: calc(${GMPX_FONT_SIZE_BASE} * 2);\n      padding: ${SPACING_BASE};\n      margin: ${SPACING_BASE};\n    }\n\n    .nav-controls button[disabled] {\n      opacity: 0.5;\n    }\n  `;\n__decorate([property({\n  attribute: 'max-tiles',\n  reflect: true,\n  type: Number\n}), __metadata(\"design:type\", Number)], PlacePhotoGallery.prototype, \"maxTiles\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlacePhotoGallery.prototype, \"selectedIndex\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlacePhotoGallery.prototype, \"tileSize\", void 0);\n__decorate([query('.container'), __metadata(\"design:type\", HTMLDivElement)], PlacePhotoGallery.prototype, \"containerElement\", void 0);\n__decorate([query('.lightbox'), __metadata(\"design:type\", HTMLDialogElement)], PlacePhotoGallery.prototype, \"lightboxElement\", void 0);\n__decorate([query('[part=\"tile\"]'), __metadata(\"design:type\", HTMLButtonElement)], PlacePhotoGallery.prototype, \"firstTileElement\", void 0);\nPlacePhotoGallery = __decorate([customElement('gmpx-place-photo-gallery')], PlacePhotoGallery);\nexport { PlacePhotoGallery };","map":{"version":3,"names":["css","html","customElement","property","query","state","ifDefined","map","styleMap","when","GMPX_FONT_CAPTION","GMPX_FONT_SIZE_BASE","GMPX_FONT_TITLE_MEDIUM","FocusController","LocalizationController","WebFont","WebFontController","renderAttribution","PlaceDataConsumer","MAX_PHOTO_SIZE_PX","MAX_TILE_PHOTO_SIZE_PX","SPACING_BASE","getPhotoSize","cssPx","max","devicePx","Math","ceil","window","devicePixelRatio","min","formatPhoto","photo","tileSize","photoSizeRatio","widthPx","heightPx","windowSizeRatio","innerWidth","innerHeight","tileSizeRatio","lightboxPhotoOptions","maxHeight","maxWidth","tilePhotoOptions","uri","getURI","tileUri","attributions","authorAttributions","stopEscapePropagation","event","key","stopPropagation","PlacePhotoGallery","constructor","selectedIndex","focusController","isKeyboardNavigating","containerElement","classList","remove","add","fontLoader","GOOGLE_SANS_TEXT","MATERIAL_SYMBOLS_OUTLINED","keydownEventListener","lightboxElement","open","isRTL","navigateToNext","navigateToPrevious","getMsg","buildLocalizer","connectedCallback","document","addEventListener","disconnectedCallback","removeEventListener","render","photos","getFormattedPhotos","selectedPhoto","placeName","getPlace","displayName","captionCard","closeLightbox","length","navControls","renderTileButton","i","openLightbox","slice","maxTiles","updated","firstTileElement","clientWidth","clientHeight","getRequiredFields","placeHasData","place","undefined","Array","fill","getComputedStyle","direction","toLowerCase","index","updateComplete","showModal","close","numPhotos","styles","__decorate","attribute","reflect","type","Number","HTMLDivElement","HTMLDialogElement","HTMLButtonElement"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/place_building_blocks/place_photo_gallery/place_photo_gallery.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {css, html} from 'lit';\nimport {customElement, property, query, state} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {map} from 'lit/directives/map.js';\nimport {styleMap} from 'lit/directives/style-map.js';\nimport {when} from 'lit/directives/when.js';\n\nimport {GMPX_FONT_CAPTION, GMPX_FONT_SIZE_BASE, GMPX_FONT_TITLE_MEDIUM} from '../../base/common_styles.js';\nimport {FocusController} from '../../base/focus_controller.js';\nimport {LocalizationController} from '../../base/localization_controller.js';\nimport {WebFont, WebFontController} from '../../base/web_font_controller.js';\nimport type {AuthorAttribution, Photo, Place} from '../../utils/googlemaps_types.js';\nimport {renderAttribution} from '../../utils/place_utils.js';\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\n\n/**\n * Maximum width/height of a Place Photo that can be requested, in pixels; see:\n * https://developers.google.com/maps/documentation/places/web-service/place-photos#maxheightpx-and-maxwidthpx.\n */\nconst MAX_PHOTO_SIZE_PX = 4800;\n\n/** Maximum width/height of a Place Photo to display as tile, in pixels. */\nconst MAX_TILE_PHOTO_SIZE_PX = 1200;\n\n/** Spacing for margins and paddings based on baseline font size. */\nconst SPACING_BASE = css`calc(${GMPX_FONT_SIZE_BASE} * 0.5)`;\n\ninterface FormattedPhoto {\n  uri: string;\n  tileUri: string;\n  attributions: AuthorAttribution[];\n}\n\ninterface TileSize {\n  widthPx: number;\n  heightPx: number;\n}\n\n/**\n * Returns the desired photo size in pixels based on CSS pixels and max size,\n * accounting for diff between physical and CSS pixels on current device; see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio.\n */\nfunction getPhotoSize(cssPx: number, max: number) {\n  const devicePx = Math.ceil(cssPx * window.devicePixelRatio);\n  return Math.min(devicePx, max);\n}\n\n/**\n * Formats a `google.maps.places.Photo` object for display based on tile size.\n *\n * If photo is wider relative to its height compared to the tile, then its\n * height should be capped at the tile's height; vice versa for tile width.\n *\n *                                            ┌┄┄┄┄┄┄┄┄┄┄┄┄┐\n *                                            ┆            ┆  PHOTO\n *    ┌┄┄┄┄┄┌────────────┐┄┄┄┄┄┐              ├────────────┤\n *    ┆     │            │     ┆              │            │\n *    ┆     │    TILE    │     ┆  PHOTO       │    TILE    │\n *    ┆     │            │     ┆              │            │\n *    └┄┄┄┄┄└────────────┘┄┄┄┄┄┘              ├────────────┤\n *                                            ┆            ┆\n *                                            └┄┄┄┄┄┄┄┄┄┄┄┄┘\n */\nfunction formatPhoto(photo: Photo, tileSize: TileSize): FormattedPhoto {\n  const photoSizeRatio = photo.widthPx / photo.heightPx;\n  const windowSizeRatio = window.innerWidth / window.innerHeight;\n  const tileSizeRatio = tileSize.widthPx / tileSize.heightPx;\n\n  const lightboxPhotoOptions = photoSizeRatio > windowSizeRatio ?\n      {maxHeight: getPhotoSize(window.innerHeight, MAX_PHOTO_SIZE_PX)} :\n      {maxWidth: getPhotoSize(window.innerWidth, MAX_PHOTO_SIZE_PX)};\n  const tilePhotoOptions = photoSizeRatio > tileSizeRatio ?\n      {maxHeight: getPhotoSize(tileSize.heightPx, MAX_TILE_PHOTO_SIZE_PX)} :\n      {maxWidth: getPhotoSize(tileSize.widthPx, MAX_TILE_PHOTO_SIZE_PX)};\n\n  return {\n    uri: photo.getURI(lightboxPhotoOptions),\n    tileUri: photo.getURI(tilePhotoOptions),\n    attributions: photo.authorAttributions,\n  };\n}\n\nfunction stopEscapePropagation(event: KeyboardEvent) {\n  if (event.key === 'Escape') event.stopPropagation();\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-photo-gallery': PlacePhotoGallery;\n  }\n}\n\n/**\n * Component that displays photos of this place as tiles, with a lightbox view\n * when a photo is clicked. The lightbox includes proper photo attribution.\n *\n * @csspart tile - Styles each individual photo tile, including border radius,\n * width/height, margin, background color before image is loaded, etc.\n * \n * @cssproperty [--gmpx-font-family-base] - Font family used for captions in the lightbox.\n * @cssproperty [--gmpx-font-family-headings] - Font family of the place title in the lightbox.\n * @cssproperty [--gmpx-font-size-base] - Used to scale the component.\n */\n@customElement('gmpx-place-photo-gallery')\nexport class PlacePhotoGallery extends PlaceDataConsumer {\n  static override styles = css`\n    :host(:not([hidden])) {\n      display: block;\n    }\n\n    .container.hide-focus-ring button:focus {\n      outline: none;\n    }\n\n    a {\n      color: inherit;\n    }\n\n    button {\n      background: none;\n      border: none;\n      color: inherit;\n      cursor: pointer;\n      padding: 0;\n    }\n\n    button[disabled] {\n      cursor: default;\n    }\n\n    [part=\"tile\"] {\n      background-color: #f5f5f5;\n      background-position: center;\n      background-size: cover;\n      border-radius: 8px;\n      display: inline-block;\n      height: 134px;\n      width: 142px;\n    }\n\n    /* The dialog element has a default border-width: initial (3px),\n       padding: 1em, and max-height/width: calc((100% - 6px) - 2em). We remove\n       the border and take the corresponding 6px out of the height/width\n       calculation so it still fills the screen. */\n    .lightbox {\n      border-width: 0;\n      color: white;\n      height: 100%;\n      max-height: calc(100% - 2em);\n      max-width: calc(100% - 2em);\n      width: 100%;\n    }\n\n    .backdrop {\n      background: black;\n      inset: 0;\n      position: absolute;\n    }\n\n    .photo {\n      inset: 0;\n      margin: auto;\n      max-height: 100%;\n      max-width: 100%;\n      position: absolute;\n    }\n\n    .icon {\n      font-size: calc(${GMPX_FONT_SIZE_BASE} * 2);\n      vertical-align: middle;\n    }\n\n    .info-card {\n      background: rgba(32, 33, 36, 0.7);\n      border-radius: 8px;\n      display: flex;\n      padding: ${GMPX_FONT_SIZE_BASE};\n      position: absolute;\n    }\n\n    .info-card .text-container {\n      flex-direction: column;\n      padding: 0 ${SPACING_BASE};\n    }\n\n    .info-card .title {\n      font: ${GMPX_FONT_TITLE_MEDIUM};\n    }\n\n    .info-card .caption {\n      font : ${GMPX_FONT_CAPTION};\n    }\n\n    .nav-controls {\n      bottom: ${GMPX_FONT_SIZE_BASE};\n      left: 0;\n      margin: 0 auto;\n      position: absolute;\n      right: 0;\n      width: fit-content;\n    }\n\n    .nav-controls button {\n      background-color: rgba(32, 33, 36, 0.7);\n      border-radius: calc(${GMPX_FONT_SIZE_BASE} * 2);\n      padding: ${SPACING_BASE};\n      margin: ${SPACING_BASE};\n    }\n\n    .nav-controls button[disabled] {\n      opacity: 0.5;\n    }\n  `;\n\n  /**\n   * The maximum number of photos to display as tiles. If undefined, all\n   * available photos from the Place object will be displayed.\n   *\n   * Note that the Places API can fetch up to ten photos of a place.\n   */\n  @property({attribute: 'max-tiles', reflect: true, type: Number})\n  maxTiles?: number;\n\n  @state() private selectedIndex = 0;\n  @state() private tileSize?: TileSize;\n\n  @query('.container') private readonly containerElement?: HTMLDivElement;\n  @query('.lightbox') private readonly lightboxElement?: HTMLDialogElement;\n  @query('[part=\"tile\"]') private readonly firstTileElement?: HTMLButtonElement;\n\n  protected readonly focusController =\n      new FocusController(this, (isKeyboardNavigating) => {\n        if (isKeyboardNavigating) {\n          this.containerElement?.classList.remove('hide-focus-ring');\n        } else {\n          this.containerElement?.classList.add('hide-focus-ring');\n        }\n      });\n\n  protected readonly fontLoader = new WebFontController(\n      this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n\n  private readonly keydownEventListener = ({key}: KeyboardEvent) => {\n    if (!this.lightboxElement?.open) return;\n    switch (key) {\n      case 'ArrowLeft':\n        this.isRTL() ? this.navigateToNext() : this.navigateToPrevious();\n        break;\n      case 'ArrowRight':\n        this.isRTL() ? this.navigateToPrevious() : this.navigateToNext();\n        break;\n      default:\n    }\n  };\n\n  override connectedCallback() {\n    super.connectedCallback();\n    document.addEventListener('keydown', this.keydownEventListener);\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    document.removeEventListener('keydown', this.keydownEventListener);\n  }\n\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\n\n  protected override render() {\n    const photos = this.getFormattedPhotos();\n    const selectedPhoto = photos[this.selectedIndex];\n    const placeName = this.getPlace()?.displayName;\n\n    // clang-format off\n    const captionCard = html`\n      <div class=\"info-card\">\n        <button\n          aria-label=${this.getMsg('PLACE_PHOTO_BACK_ARIA_LABEL')}\n          autofocus\n          @click=${this.closeLightbox}\n        >\n          <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n            ${this.isRTL() ? 'arrow_forward' : 'arrow_back'}\n          </span>\n        </button>\n        <div class=\"text-container\">\n          ${when(placeName, () => html`<div class=\"title\">${placeName}</div>`)}\n          ${when(selectedPhoto?.attributions.length, () => html`\n            <div class=\"caption\">\n              <span>${this.getMsg('PLACE_PHOTO_ATTRIBUTION_PREFIX')}</span>\n              ${map(selectedPhoto!.attributions,\n                    ({displayName, uri}) =>\n                        html`${renderAttribution(displayName, uri ?? null)} `)}\n            </div>\n          `)}\n        </div>\n      </div>\n    `;\n    // clang-format on\n\n    const navControls = html`\n      <div class=\"nav-controls\">\n        <button\n          aria-label=${this.getMsg('PLACE_PHOTO_PREV_ARIA_LABEL')}\n          @click=${this.navigateToPrevious}\n          .disabled=${this.selectedIndex === 0}\n        >\n          <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n            ${this.isRTL() ? 'chevron_right' : 'chevron_left'}\n          </span>\n        </button>\n        <button\n          aria-label=${this.getMsg('PLACE_PHOTO_NEXT_ARIA_LABEL')}\n          @click=${this.navigateToNext}\n          .disabled=${this.selectedIndex === photos.length - 1}\n        >\n          <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n            ${this.isRTL() ? 'chevron_left' : 'chevron_right'}\n          </span>\n        </button>\n      </div>\n    `;\n\n    // clang-format off\n    const renderTileButton = (photo: FormattedPhoto|null, i: number) => html`\n      <button\n        aria-label=${this.getMsg('PLACE_PHOTO_TILE_ARIA_LABEL', i + 1)}\n        @click=${() => void this.openLightbox(i)}\n        .disabled=${!photo}\n        part=\"tile\"\n        style=${styleMap({\n          'background-image': photo && `url(${photo.tileUri})`,\n        })}\n      ></button>\n    `;\n    // clang-format on\n\n    // Note on the <dialog>'s keydown listener: Prevent escape keydowns from\n    // propagating beyond the lightbox so that they don't cause things like\n    // closing an overlay layout. The <dialog> will close automatically on\n    // escape, so we don't have to worry about catching the event ourselves.\n    return html`\n      <div class=\"container\">\n        <div>${map(photos.slice(0, this.maxTiles), renderTileButton)}</div>\n        <dialog class=\"lightbox\" @keydown=${stopEscapePropagation}>\n          <div class=\"backdrop\" @click=${this.closeLightbox}></div>\n          <img\n            alt=${this.getMsg('PLACE_PHOTO_ALT', placeName ?? '')}\n            class=\"photo\"\n            src=${ifDefined(selectedPhoto?.uri)}\n          />\n          ${captionCard}\n          ${navControls}\n        </dialog>\n      </div>\n    `;\n  }\n\n  protected override updated() {\n    if (!this.tileSize && this.firstTileElement) {\n      // Note that sometimes a tile's BoundingClientRect becomes defined outside\n      // Lit's reactive update cycle. In such cases the tile size will be zero,\n      // and we cap width/height at `MAX_TILE_PHOTO_SIZE_PX` to avoid requesting\n      // an overly large image.\n      this.tileSize = {\n        widthPx: this.firstTileElement.clientWidth || MAX_TILE_PHOTO_SIZE_PX,\n        heightPx: this.firstTileElement.clientHeight || MAX_TILE_PHOTO_SIZE_PX,\n      };\n    }\n  }\n\n  /** @ignore */\n  getRequiredFields(): Array<keyof Place> {\n    return ['displayName', 'photos'];\n  }\n\n  protected override placeHasData(place: Place): boolean {\n    return !!(place.photos && place.photos.length > 0);\n  }\n\n  private getFormattedPhotos(): Array<FormattedPhoto|null> {\n    const place = this.getPlace();\n    // If Place data is not yet available or the tile elements have not been\n    // rendered, then return a list of null values as placeholders.\n    if (place === undefined || !this.tileSize) {\n      return new Array(10).fill(null);\n    }\n    if (!place?.photos) return [];\n    return place.photos.map((photo) => formatPhoto(photo, this.tileSize!));\n  }\n\n  private isRTL(): boolean {\n    return getComputedStyle(this).direction.toLowerCase() === 'rtl';\n  }\n\n  private async openLightbox(index: number) {\n    this.selectedIndex = index;\n    await this.updateComplete;\n    this.lightboxElement?.showModal();\n  }\n\n  private closeLightbox() {\n    this.lightboxElement?.close();\n  }\n\n  private navigateToPrevious() {\n    if (this.selectedIndex > 0) this.selectedIndex--;\n  }\n\n  private navigateToNext() {\n    const numPhotos = this.getPlace()?.photos?.length;\n    if (numPhotos && this.selectedIndex < numPhotos - 1) this.selectedIndex++;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}