{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Controller to help customize focus behavior depending on if the user is\n * keyboard navigating with Tab and Enter.\n *\n * The controller's boolean property `isKeyboardNavigating` is flipped to true\n * when the user presses Tab or Enter, and flipped to false when they click the\n * mouse.\n *\n * The controller optionally accepts a callback that it calls whenever\n * `isKeyboardNavigating` changes. This can be used, for example, to toggle a\n * class in the host's shadow DOM to remove the default focus ring with CSS,\n * when it appears due to keypresses other than Tab/Enter.\n */\nexport class FocusController {\n  get isKeyboardNavigating() {\n    return this.isKeyboardNavigatingInternal ?? false;\n  }\n  constructor(host, changeCallback) {\n    this.host = host;\n    this.changeCallback = changeCallback;\n    this.mousedownEventListener = () => {\n      if (this.isKeyboardNavigatingInternal !== false) {\n        this.isKeyboardNavigatingInternal = false;\n        if (this.changeCallback) this.changeCallback(false);\n      }\n    };\n    this.keydownEventListener = ({\n      key\n    }) => {\n      if (key !== 'Tab' && key !== 'Enter') return;\n      if (this.isKeyboardNavigatingInternal !== true) {\n        this.isKeyboardNavigatingInternal = true;\n        if (this.changeCallback) this.changeCallback(true);\n      }\n    };\n    this.host.addController(this);\n  }\n  hostConnected() {\n    document.addEventListener('keydown', this.keydownEventListener);\n    document.addEventListener('mousedown', this.mousedownEventListener);\n  }\n  hostDisconnected() {\n    document.removeEventListener('keydown', this.keydownEventListener);\n    document.removeEventListener('mousedown', this.mousedownEventListener);\n  }\n}","map":{"version":3,"names":["FocusController","isKeyboardNavigating","isKeyboardNavigatingInternal","constructor","host","changeCallback","mousedownEventListener","keydownEventListener","key","addController","hostConnected","document","addEventListener","hostDisconnected","removeEventListener"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/base/focus_controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\n/**\n * Controller to help customize focus behavior depending on if the user is\n * keyboard navigating with Tab and Enter.\n *\n * The controller's boolean property `isKeyboardNavigating` is flipped to true\n * when the user presses Tab or Enter, and flipped to false when they click the\n * mouse.\n *\n * The controller optionally accepts a callback that it calls whenever\n * `isKeyboardNavigating` changes. This can be used, for example, to toggle a\n * class in the host's shadow DOM to remove the default focus ring with CSS,\n * when it appears due to keypresses other than Tab/Enter.\n */\nexport class FocusController implements ReactiveController {\n  // Initialize the internal state to undefined so that the change callback is\n  // called on the first mousedown, even though externally the state is going\n  // from false to false.\n  private isKeyboardNavigatingInternal?: boolean;\n\n  get isKeyboardNavigating(): boolean {\n    return this.isKeyboardNavigatingInternal ?? false;\n  }\n\n  private readonly mousedownEventListener = () => {\n    if (this.isKeyboardNavigatingInternal !== false) {\n      this.isKeyboardNavigatingInternal = false;\n      if (this.changeCallback) this.changeCallback(false);\n    }\n  };\n\n  private readonly keydownEventListener = ({key}: KeyboardEvent) => {\n    if (key !== 'Tab' && key !== 'Enter') return;\n    if (this.isKeyboardNavigatingInternal !== true) {\n      this.isKeyboardNavigatingInternal = true;\n      if (this.changeCallback) this.changeCallback(true);\n    }\n  };\n\n  constructor(\n      private readonly host: ReactiveControllerHost&LitElement,\n      private readonly changeCallback?:\n          (isKeyboardNavigating: boolean) => void) {\n    this.host.addController(this);\n  }\n\n  hostConnected() {\n    document.addEventListener('keydown', this.keydownEventListener);\n    document.addEventListener('mousedown', this.mousedownEventListener);\n  }\n\n  hostDisconnected() {\n    document.removeEventListener('keydown', this.keydownEventListener);\n    document.removeEventListener('mousedown', this.mousedownEventListener);\n  }\n}\n"],"mappings":"AAAA;;;;;AAQA;;;;;;;;;;;;;AAaA,OAAM,MAAOA,eAAe;EAM1B,IAAIC,oBAAoBA,CAAA;IACtB,OAAO,IAAI,CAACC,4BAA4B,IAAI,KAAK;EACnD;EAiBAC,YACqBC,IAAuC,EACvCC,cAC0B;IAF1B,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,cAAc,GAAdA,cAAc;IAjBlB,KAAAC,sBAAsB,GAAG,MAAK;MAC7C,IAAI,IAAI,CAACJ,4BAA4B,KAAK,KAAK,EAAE;QAC/C,IAAI,CAACA,4BAA4B,GAAG,KAAK;QACzC,IAAI,IAAI,CAACG,cAAc,EAAE,IAAI,CAACA,cAAc,CAAC,KAAK,CAAC;;IAEvD,CAAC;IAEgB,KAAAE,oBAAoB,GAAG,CAAC;MAACC;IAAG,CAAgB,KAAI;MAC/D,IAAIA,GAAG,KAAK,KAAK,IAAIA,GAAG,KAAK,OAAO,EAAE;MACtC,IAAI,IAAI,CAACN,4BAA4B,KAAK,IAAI,EAAE;QAC9C,IAAI,CAACA,4BAA4B,GAAG,IAAI;QACxC,IAAI,IAAI,CAACG,cAAc,EAAE,IAAI,CAACA,cAAc,CAAC,IAAI,CAAC;;IAEtD,CAAC;IAMC,IAAI,CAACD,IAAI,CAACK,aAAa,CAAC,IAAI,CAAC;EAC/B;EAEAC,aAAaA,CAAA;IACXC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACL,oBAAoB,CAAC;IAC/DI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACN,sBAAsB,CAAC;EACrE;EAEAO,gBAAgBA,CAAA;IACdF,QAAQ,CAACG,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACP,oBAAoB,CAAC;IAClEI,QAAQ,CAACG,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACR,sBAAsB,CAAC;EACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}