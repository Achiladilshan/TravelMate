{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converter that transforms an optional `google.maps.LatLngLiteral` property\n * to/from an attribute string literal in the `lat,lng` format.\n */\nexport const LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER = {\n  fromAttribute(attr) {\n    if (attr === null) return undefined;\n    const [lat, lng] = attr.split(',').map(s => Number(s.trim()));\n    return {\n      lat: lat || 0,\n      lng: lng || 0\n    };\n  },\n  toAttribute(prop) {\n    return prop ? `${prop.lat},${prop.lng}` : null;\n  }\n};\n/**\n * Converter that transforms an optional string-array property to/from a\n * space-delimited attribute value.\n */\nexport const STRING_ARRAY_ATTRIBUTE_CONVERTER = {\n  fromAttribute(attr) {\n    return attr?.split(/\\s+/).filter(s => s !== '') ?? undefined;\n  },\n  toAttribute(prop) {\n    return prop?.join(' ') ?? null;\n  }\n};","map":{"version":3,"names":["LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER","fromAttribute","attr","undefined","lat","lng","split","map","s","Number","trim","toAttribute","prop","STRING_ARRAY_ATTRIBUTE_CONVERTER","filter","join"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/utils/attribute_converters.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ComplexAttributeConverter} from 'lit';\n\ntype LatLngLiteral = google.maps.LatLngLiteral;\n\n/**\n * Converter that transforms an optional `google.maps.LatLngLiteral` property\n * to/from an attribute string literal in the `lat,lng` format.\n */\nexport const LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER:\n    ComplexAttributeConverter<LatLngLiteral|undefined> = {\n      fromAttribute(attr: string|null): LatLngLiteral |\n          undefined {\n            if (attr === null) return undefined;\n            const [lat, lng] = attr.split(',').map((s) => Number(s.trim()));\n            return {lat: lat || 0, lng: lng || 0};\n          },\n      toAttribute(prop?: LatLngLiteral): string |\n          null {\n            return prop ? `${prop.lat},${prop.lng}` : null;\n          },\n    };\n\n/**\n * Converter that transforms an optional string-array property to/from a\n * space-delimited attribute value.\n */\nexport const STRING_ARRAY_ATTRIBUTE_CONVERTER:\n    ComplexAttributeConverter<string[]|undefined> = {\n      fromAttribute(attr: string|null): string[] |\n          undefined {\n            return attr?.split(/\\s+/).filter((s) => s !== '') ?? undefined;\n          },\n      toAttribute(prop?: string[]): string |\n          null {\n            return prop?.join(' ') ?? null;\n          },\n    };\n"],"mappings":"AAAA;;;;;AAUA;;;;AAIA,OAAO,MAAMA,mCAAmC,GACS;EACnDC,aAAaA,CAACC,IAAiB;IAEzB,IAAIA,IAAI,KAAK,IAAI,EAAE,OAAOC,SAAS;IACnC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKC,MAAM,CAACD,CAAC,CAACE,IAAI,EAAE,CAAC,CAAC;IAC/D,OAAO;MAACN,GAAG,EAAEA,GAAG,IAAI,CAAC;MAAEC,GAAG,EAAEA,GAAG,IAAI;IAAC,CAAC;EACvC,CAAC;EACLM,WAAWA,CAACC,IAAoB;IAE1B,OAAOA,IAAI,GAAG,GAAGA,IAAI,CAACR,GAAG,IAAIQ,IAAI,CAACP,GAAG,EAAE,GAAG,IAAI;EAChD;CACL;AAEL;;;;AAIA,OAAO,MAAMQ,gCAAgC,GACO;EAC9CZ,aAAaA,CAACC,IAAiB;IAEzB,OAAOA,IAAI,EAAEI,KAAK,CAAC,KAAK,CAAC,CAACQ,MAAM,CAAEN,CAAC,IAAKA,CAAC,KAAK,EAAE,CAAC,IAAIL,SAAS;EAChE,CAAC;EACLQ,WAAWA,CAACC,IAAe;IAErB,OAAOA,IAAI,EAAEG,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI;EAChC;CACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}