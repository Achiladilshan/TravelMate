{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createLinkElementForWebFont } from '../utils/dom_utils.js';\n/** Web fonts that can be loaded. */\nexport var WebFont;\n(function (WebFont) {\n  WebFont[\"GOOGLE_SANS_TEXT\"] = \"Google Sans Text\";\n  WebFont[\"MATERIAL_SYMBOLS_OUTLINED\"] = \"Material Symbols Outlined\";\n})(WebFont || (WebFont = {}));\nconst WEB_FONT_CONFIGS = Object.freeze({\n  [WebFont.GOOGLE_SANS_TEXT]: {\n    loadInDocumentHead: true,\n    loadInShadowRoot: false,\n    weights: [400, 500]\n  },\n  [WebFont.MATERIAL_SYMBOLS_OUTLINED]: {\n    // Material Symbols ligatures must be added under a component's shadow root\n    // in order for its CSS style rule to take effect;\n    // The font must also be loaded in the main document due to a long-standing\n    // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=336876.\n    loadInDocumentHead: true,\n    loadInShadowRoot: true,\n    weights: [400]\n  }\n});\n/**\n * Controller that handles loading one or more font resources in the document.\n */\nexport class WebFontController {\n  constructor(host, fonts) {\n    this.host = host;\n    this.fonts = fonts;\n    host.addController(this);\n    for (const font of fonts) {\n      if (WEB_FONT_CONFIGS[font].loadInDocumentHead) {\n        this.injectWebFontAsset(document.head, font);\n      }\n    }\n  }\n  hostConnected() {\n    for (const font of this.fonts) {\n      if (WEB_FONT_CONFIGS[font].loadInShadowRoot) {\n        this.injectWebFontAsset(this.host.renderRoot, font);\n      }\n    }\n  }\n  injectWebFontAsset(rootNode, font) {\n    const existing = rootNode.querySelector(`link[href*=\"${encodeURIComponent(font)}\"]`);\n    if (!existing) {\n      rootNode.appendChild(createLinkElementForWebFont(font, WEB_FONT_CONFIGS[font].weights));\n    }\n  }\n}","map":{"version":3,"names":["createLinkElementForWebFont","WebFont","WEB_FONT_CONFIGS","Object","freeze","GOOGLE_SANS_TEXT","loadInDocumentHead","loadInShadowRoot","weights","MATERIAL_SYMBOLS_OUTLINED","WebFontController","constructor","host","fonts","addController","font","injectWebFontAsset","document","head","hostConnected","renderRoot","rootNode","existing","querySelector","encodeURIComponent","appendChild"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/base/web_font_controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {createLinkElementForWebFont} from '../utils/dom_utils.js';\n\n/** Web fonts that can be loaded. */\nexport enum WebFont {\n  GOOGLE_SANS_TEXT = 'Google Sans Text',\n  MATERIAL_SYMBOLS_OUTLINED = 'Material Symbols Outlined',\n}\n\ninterface WebFontConfig {\n  loadInDocumentHead: boolean;\n  loadInShadowRoot: boolean;\n  weights: number[];\n}\n\nconst WEB_FONT_CONFIGS: {[key: string]: WebFontConfig} = Object.freeze({\n  [WebFont.GOOGLE_SANS_TEXT]: {\n    loadInDocumentHead: true,\n    loadInShadowRoot: false,\n    weights: [400, 500],\n  },\n  [WebFont.MATERIAL_SYMBOLS_OUTLINED]: {\n    // Material Symbols ligatures must be added under a component's shadow root\n    // in order for its CSS style rule to take effect;\n    // The font must also be loaded in the main document due to a long-standing\n    // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=336876.\n    loadInDocumentHead: true,\n    loadInShadowRoot: true,\n    weights: [400],\n  },\n});\n\n/**\n * Controller that handles loading one or more font resources in the document.\n */\nexport class WebFontController implements ReactiveController {\n  constructor(\n      private readonly host: ReactiveControllerHost&LitElement,\n      private readonly fonts: WebFont[]) {\n    host.addController(this);\n\n    for (const font of fonts) {\n      if (WEB_FONT_CONFIGS[font].loadInDocumentHead) {\n        this.injectWebFontAsset(document.head, font);\n      }\n    }\n  }\n\n  hostConnected() {\n    for (const font of this.fonts) {\n      if (WEB_FONT_CONFIGS[font].loadInShadowRoot) {\n        this.injectWebFontAsset(this.host.renderRoot, font);\n      }\n    }\n  }\n\n  private injectWebFontAsset(\n      rootNode: HTMLElement|DocumentFragment, font: WebFont) {\n    const existing =\n        rootNode.querySelector(`link[href*=\"${encodeURIComponent(font)}\"]`);\n    if (!existing) {\n      rootNode.appendChild(\n          createLinkElementForWebFont(font, WEB_FONT_CONFIGS[font].weights));\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;AAQA,SAAQA,2BAA2B,QAAO,uBAAuB;AAEjE;AACA,WAAYC,OAGX;AAHD,WAAYA,OAAO;EACjBA,OAAA,yCAAqC;EACrCA,OAAA,2DAAuD;AACzD,CAAC,EAHWA,OAAO,KAAPA,OAAO;AAWnB,MAAMC,gBAAgB,GAAmCC,MAAM,CAACC,MAAM,CAAC;EACrE,CAACH,OAAO,CAACI,gBAAgB,GAAG;IAC1BC,kBAAkB,EAAE,IAAI;IACxBC,gBAAgB,EAAE,KAAK;IACvBC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG;GACnB;EACD,CAACP,OAAO,CAACQ,yBAAyB,GAAG;IACnC;IACA;IACA;IACA;IACAH,kBAAkB,EAAE,IAAI;IACxBC,gBAAgB,EAAE,IAAI;IACtBC,OAAO,EAAE,CAAC,GAAG;;CAEhB,CAAC;AAEF;;;AAGA,OAAM,MAAOE,iBAAiB;EAC5BC,YACqBC,IAAuC,EACvCC,KAAgB;IADhB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,KAAK,GAALA,KAAK;IACxBD,IAAI,CAACE,aAAa,CAAC,IAAI,CAAC;IAExB,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;MACxB,IAAIX,gBAAgB,CAACa,IAAI,CAAC,CAACT,kBAAkB,EAAE;QAC7C,IAAI,CAACU,kBAAkB,CAACC,QAAQ,CAACC,IAAI,EAAEH,IAAI,CAAC;;;EAGlD;EAEAI,aAAaA,CAAA;IACX,KAAK,MAAMJ,IAAI,IAAI,IAAI,CAACF,KAAK,EAAE;MAC7B,IAAIX,gBAAgB,CAACa,IAAI,CAAC,CAACR,gBAAgB,EAAE;QAC3C,IAAI,CAACS,kBAAkB,CAAC,IAAI,CAACJ,IAAI,CAACQ,UAAU,EAAEL,IAAI,CAAC;;;EAGzD;EAEQC,kBAAkBA,CACtBK,QAAsC,EAAEN,IAAa;IACvD,MAAMO,QAAQ,GACVD,QAAQ,CAACE,aAAa,CAAC,eAAeC,kBAAkB,CAACT,IAAI,CAAC,IAAI,CAAC;IACvE,IAAI,CAACO,QAAQ,EAAE;MACbD,QAAQ,CAACI,WAAW,CAChBzB,2BAA2B,CAACe,IAAI,EAAEb,gBAAgB,CAACa,IAAI,CAAC,CAACP,OAAO,CAAC,CAAC;;EAE1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}