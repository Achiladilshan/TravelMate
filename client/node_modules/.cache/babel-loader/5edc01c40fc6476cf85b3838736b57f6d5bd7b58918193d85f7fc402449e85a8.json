{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport '../split_layout/split_layout.js';\nimport '../overlay_layout/overlay_layout.js';\nimport '../route_overview/route_overview.js';\nimport '../place_overview/place_overview.js';\nimport '../place_picker/place_picker.js';\nimport '../icon_button/icon_button.js';\nimport '../place_building_blocks/place_directions_button/place_directions_button.js';\n// Placeholder for objectProperty (google3-only)\nimport { html, nothing } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { join } from 'lit/directives/join.js';\nimport { ref } from 'lit/directives/ref.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { APILoader } from '../api_loader/api_loader.js';\nimport { BaseComponent } from '../base/base_component.js';\nimport { LocalizationController } from '../base/localization_controller.js';\nimport { WebFont, WebFontController } from '../base/web_font_controller.js';\nimport { DistanceMeasurer, DistanceSource } from './distances.js';\nimport { FeatureSet } from './interfaces.js';\nimport { convertLocations, getFeatureSet, getMapOptions } from './quick_builder.js';\nimport { storeLocatorStyles } from './store_locator_styles.js';\nconst DEFAULT_MAP_OPTIONS = {\n  mapTypeControl: false,\n  maxZoom: 17,\n  streetViewControl: false\n};\n/**\n * The store locator component displays an experience where your website's users\n * can browse a list of locations, find the nearest one, and view details.\n *\n * While store locations are the most common use case, you can use this\n * component to show many nearby points of interest like parks, ATMs, or gas\n * stations.\n *\n * To use `<gmpx-store-locator>`, pass it a JavaScript array containing the\n * locations you want to present. Each location, called a listing, is defined as\n * an object with the following properties:\n *\n * ```\n * interface StoreLocatorListing {\n *   // Name of the location or store\n *   title: string;\n *\n *   // Address lines, used when displaying the list.\n *   addressLines?: string[];\n *\n *   // Geographic coordinates of the location\n *   position: LatLng|LatLngLiteral;\n *\n *   // Place ID for this location, used to retrieve additional details\n *   placeId?: string;\n *\n *   // Optional list of additional actions to display with each location\n *   actions?: StoreLocatorAction[];\n * }\n *\n * interface StoreLocatorAction {\n *   // Button label for this action\n *   label: string;\n *\n *   // URI that will be opened in a new tab\n *   defaultUri?: string;\n * }\n * ```\n *\n * See below for a full example.\n *\n * @cssproperty [--gmpx-color-surface] - Background color.\n * @cssproperty [--gmpx-color-on-surface] - Main text color.\n * @cssproperty [--gmpx-color-on-surface-variant] - Color of less important text\n * such as captions.\n * @cssproperty [--gmpx-color-primary] - Color of buttons and icons.\n * @cssproperty [--gmpx-color-outline] - Button outline and divider color.\n * @cssproperty [--gmpx-fixed-panel-width-row-layout=28.5em] - Controls the side\n * panel width when the component is displayed in row direction. The map\n * width will adjust automatically to fill remaining space.\n * @cssproperty [--gmpx-fixed-panel-height-column-layout=65%] - Controls the\n * side panel height when the component is displayed in column direction. The\n * map height will adjust automatically to fill remaining space.\n * @cssproperty [--gmpx-font-family-base] - Font family for regular text.\n * @cssproperty [--gmpx-font-family-headings] - Font family for headings.\n * @cssproperty [--gmpx-font-size-base] - Text size, sets scale for the\n * component.\n * @cssproperty [--gmpx-hours-color-open] - Opening hours text color\n * when the place is open (`advanced` feature set only).\n * @cssproperty [--gmpx-hours-color-closed] - Opening hours text color\n * when the place is closed (`advanced` feature set only).\n * @cssproperty [--gmpx-rating-color] - Color of star rating icons in the\n * details view (`advanced` feature set only).\n * @cssproperty [--gmpx-rating-color-empty] - Background color of star\n * rating icons in the details view (`advanced` feature set only).\n */\nlet StoreLocator = class StoreLocator extends BaseComponent {\n  constructor() {\n    super();\n    /**\n     * Chooses the capabilities of this store locator:\n     *\n     * * `'basic'` shows a list of locations with pins on a map.\n     *\n     * * `'intermediate'` adds a search input so users can find the location\n     * closest to them.\n     *\n     * * `'advanced'` brings in a Place details view to show photos, hours, and\n     * reviews for each location.\n     */\n    this.featureSet = FeatureSet.ADVANCED;\n    /**\n     * Overrides for the map options. Provide values for `center` and `zoom` to\n     * display a map when `listings` is empty.\n     */\n    this.mapOptions = DEFAULT_MAP_OPTIONS;\n    this.internalListings = [];\n    this.initialized = false;\n    this.getMsg = LocalizationController.buildLocalizer(this);\n    this.fontLoader = new WebFontController(this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n    this.distanceMeasurer = new DistanceMeasurer(this);\n    this.listingDistances = new Map();\n    this.initialize();\n  }\n  /**\n   * Blocks Lit lifecycle methods until the component is async-initialized. All\n   * other component methods (except for the constructor) can expect that\n   * `this.initialized` is true.\n   */\n  shouldUpdate(changedProperties) {\n    return this.initialized;\n  }\n  /**\n   * Notes on willUpdate():\n   * - This method will only be called when `this.initialized` is true.\n   * - Unable to use `PropertyValues<this>` as the TS type since we are checking\n   *   a private property.\n   * https://lit.dev/docs/components/lifecycle/#typescript-types-for-changedproperties\n   */\n  willUpdate(changedProperties) {\n    if (changedProperties.has('listings') || changedProperties.has( /* @state */'initialized')) {\n      this.internalListings = (this.listings ?? []).map(x => this.createInternalListing(x));\n      this.listingDistances.clear();\n    }\n  }\n  updated(changedProperties) {\n    // Perform map updates after the DOM has rendered, so the map element\n    // will exist.\n    if (changedProperties.has('listings') || changedProperties.has( /* @state */'initialized')) {\n      this.updateBounds();\n    }\n    if ((changedProperties.has('mapOptions') || changedProperties.has( /* @state */'initialized')) && this.mapOptions) {\n      this.mapElement?.innerMap?.setOptions(this.mapOptions);\n    }\n  }\n  render() {\n    if (!this.initialized) return nothing;\n    return html`\n      <gmpx-split-layout>\n        <gmpx-overlay-layout slot=\"fixed\">\n          ${this.renderSidePanelMain()}\n          ${this.renderSidePanelOverlay()}\n        </gmpx-overlay-layout>\n        ${this.renderMapPanel()}\n      </gmpx-split-layout>\n    `;\n  }\n  /**\n   * Configures the Store Locator component from data generated by the [Quick\n   * Builder\n   * tool](https://console.cloud.google.com/google/maps-apis/build/locator-plus)\n   * in the Maps Console.\n   *\n   * @param configuration The configuration object generated by the Quick\n   *     Builder tool.\n   */\n  configureFromQuickBuilder(configuration) {\n    this.listings = convertLocations(configuration);\n    this.featureSet = getFeatureSet(configuration);\n    this.mapOptions = getMapOptions(configuration);\n  }\n  /**\n   * Perform one-time initialization tasks; effectively an async constructor.\n   */\n  async initialize() {\n    this.mapsCoreLibrary = await APILoader.importLibrary('core', this);\n    this.initialized = true;\n  }\n  createInternalListing(listing) {\n    const placeResult = {\n      place_id: listing.placeId,\n      name: listing.title,\n      formatted_address: listing.addressLines?.join(' '),\n      geometry: {\n        location: new this.mapsCoreLibrary.LatLng(listing.position)\n      }\n    };\n    return {\n      ...listing,\n      placeResult,\n      uniqueKey: `${listing.placeId}:${listing.title}`\n    };\n  }\n  isIntermediateOrBetter() {\n    return this.featureSet === FeatureSet.INTERMEDIATE || this.featureSet === FeatureSet.ADVANCED;\n  }\n  async updateDistances(origin) {\n    if (!this.isIntermediateOrBetter() || !origin || !this.internalListings.length) {\n      this.listingDistances.clear();\n    } else {\n      const units = this.userCountry === 'US' ? this.mapsCoreLibrary.UnitSystem.IMPERIAL : this.mapsCoreLibrary.UnitSystem.METRIC;\n      const distances = await this.distanceMeasurer.computeDistances(origin, this.internalListings.map(listing => listing.position), units);\n      for (let i = 0; i < distances.length; i++) {\n        this.listingDistances.set(this.internalListings[i], distances[i]);\n      }\n    }\n    this.requestUpdate();\n  }\n  /** Updates the end user's location, used for travel times and sorting. */\n  updateSearchLocation(event) {\n    const place = event.target.value;\n    this.searchLocation = place ?? undefined;\n    // Update the locator's idea of the user's country, used for units.\n    if (place?.addressComponents) {\n      for (const component of place.addressComponents) {\n        if (component.types.indexOf('country') >= 0) {\n          this.userCountry = component.shortText ?? undefined;\n          break;\n        }\n      }\n    }\n    // Update map bounds to include the new location marker.\n    this.updateBounds();\n    // Update distances to this location\n    this.updateDistances(place?.location);\n  }\n  /**\n   * Updates the selected location.\n   *\n   * @returns true if the selected location was changed.\n   */\n  selectLocation(listing) {\n    if (this.selectedListing === listing) return false;\n    this.selectedListing = listing;\n    return true;\n  }\n  /** Updates the map bounds to markers. */\n  async updateBounds() {\n    if (!this.internalListings.length) return;\n    const bounds = new this.mapsCoreLibrary.LatLngBounds();\n    if (this.searchLocation?.location) {\n      bounds.extend(this.searchLocation.location);\n    }\n    for (const listing of this.internalListings) {\n      bounds.extend(listing.position);\n    }\n    this.mapElement?.innerMap?.fitBounds(bounds);\n  }\n  renderSidePanelOverlay() {\n    if (this.featureSet === FeatureSet.ADVANCED) {\n      // clang-format off\n      return html`\n          <div slot=\"overlay\" id=\"details-panel\">\n            <button class=\"back-button\"\n                @click=${() => this.overlayLayout?.hideOverlay()}>\n              <span class=\"icon material-symbols-outlined\">arrow_back</span>\n              ${this.getMsg('LOCATOR_BACK_BUTTON_CTA')}\n            </button>\n            <gmpx-place-overview .place=${this.detailsPlaceId} google-logo-already-displayed>\n            </gmpx-place-overview>\n          </div>`;\n      // clang-format on\n    }\n    return nothing;\n  }\n  renderListItem(listing) {\n    // UI display for travel distance.\n    const distanceInfo = this.listingDistances.get(listing);\n    const showDistance = distanceInfo?.text && distanceInfo.source === DistanceSource.DISTANCE_MATRIX;\n    const distanceHtml = showDistance ? distanceInfo.text : nothing;\n    // Action buttons.\n    const actionButtons = [];\n    if (this.featureSet === FeatureSet.ADVANCED) {\n      const showDetails = () => {\n        if (listing.placeId) {\n          this.detailsPlaceId = listing.placeId;\n          this.overlayLayout?.showOverlay();\n        }\n      };\n      actionButtons.push(html`\n          <gmpx-icon-button class=\"view-details\" @click=${showDetails}>\n            ${this.getMsg('LOCATOR_VIEW_DETAILS_CTA')}\n          </gmpx-icon-button>`);\n    }\n    for (const action of listing.actions ?? []) {\n      actionButtons.push(html`\n          <gmpx-icon-button icon=\"open_in_new\" .href=${action.defaultUri ?? nothing}>\n            ${action.label}\n          </gmpx-icon-button>`);\n    }\n    // Clicking anywhere on the item selects this location.\n    // Additionally, a hidden button element makes this behavior\n    // accessible under tab navigation.\n    const selectCallback = () => {\n      const wasSelection = this.selectLocation(listing);\n      if (wasSelection && this.selectedListing && !this.searchLocation) {\n        this.mapElement?.innerMap?.panTo(this.selectedListing.position);\n      }\n    };\n    const liClick = selectCallback;\n    const selectButtonClick = e => {\n      selectCallback();\n      e.stopPropagation();\n    };\n    // clang-format off\n    return html`\n      <li @click=${liClick}\n          class=${classMap({\n      'selected': listing === this.selectedListing\n    })}\n          ${ref(el => {\n      listing.listingElement = el;\n    })}>\n        <gmpx-place-data-provider auto-fetch-disabled\n            .place=${listing.placeResult}>\n          <div class=\"result-item\">\n            <button class=\"select-location\" @click=${selectButtonClick}>\n              <h2 class=\"name\">\n                <gmpx-place-field-text field=\"displayName\"></gmpx-place-field-text>\n              </h2>\n            </button>\n            <div class=\"address\">\n              ${join(listing.addressLines ?? [], html`<br>`)}\n            </div>\n            <div class=\"actions\">\n              ${join(actionButtons, html``)}\n            </div>\n            <div class=\"distance\">${distanceHtml}</div>\n            <gmpx-place-directions-button condensed\n                .origin=${this.searchLocation?.location ?? undefined}>\n            </gmpx-place-directions-button>\n          </div>\n        </gmpx-place-data-provider>\n      </li>`;\n    // clang-format on\n  }\n  renderSidePanelMain() {\n    let sortedListings = this.internalListings;\n    let headerText = this.getMsg('LOCATOR_LIST_SUBHEADING');\n    if (this.listingDistances.size > 0) {\n      headerText = this.getMsg('LOCATOR_LIST_SUBHEADING_WITH_SEARCH');\n      // Sort the listings with all Distance Matrix distances first, in order,\n      // then all geodesic distances, in order.\n      const distanceMatrixListings = this.internalListings.filter(listing => this.listingDistances.get(listing)?.source === DistanceSource.DISTANCE_MATRIX);\n      const otherDistanceListings = this.internalListings.filter(listing => this.listingDistances.get(listing)?.source !== DistanceSource.DISTANCE_MATRIX);\n      const getDistance = listing => this.listingDistances.get(listing)?.value ?? Infinity;\n      const distanceSorter = (a, b) => getDistance(a) - getDistance(b);\n      sortedListings = [...distanceMatrixListings.sort(distanceSorter), ...otherDistanceListings.sort(distanceSorter)];\n    }\n    // clang-format off\n    const header = this.featureSet === FeatureSet.BASIC ? nothing : html`\n        <header>\n          <h1 class=\"search-title\">\n            <span class=\"icon material-symbols-outlined\">distance</span>\n            ${this.getMsg('LOCATOR_LIST_HEADER')}\n          </h1>\n          <gmpx-place-picker for-map=\"main-map\" type=\"geocode\"\n              .placeholder=${this.getMsg('LOCATOR_SEARCH_PROMPT')}\n              @gmpx-placechange=${this.updateSearchLocation}>\n          </gmpx-place-picker>\n        </header>\n    `;\n    return html`\n        <div slot=\"main\" id=\"locations-panel\">\n          <div id=\"locations-panel-list\">\n            ${header}\n            <div class=\"section-name\">\n              ${headerText} (${sortedListings.length})\n            </div>\n            <div class=\"results\">\n              <ul id=\"location-results-list\">\n                ${repeat(sortedListings, x => x.uniqueKey, x => this.renderListItem(x))}\n              </ul>\n            </div>\n          </div>\n        </div>`;\n    // clang-format on\n  }\n  renderSearchMarker() {\n    if (this.isIntermediateOrBetter() && this.searchLocation?.location) {\n      return html`\n          <gmp-advanced-marker\n              .position=${this.searchLocation.location}\n              title=\"${this.getMsg('LOCATOR_SEARCH_LOCATION_MARKER_TITLE')}\">\n            <svg viewbox=\"0 0 100 100\" class=\"search-pin\">\n              <circle cx=\"50\" cy=\"50\" r=\"50\"></circle>\n            </svg>\n          </gmp-advanced-marker>`;\n    }\n    return nothing;\n  }\n  renderMapMarker(listing) {\n    // Pick a z-index to have the marker on top of the Route Overview.\n    const zIndex = 100;\n    const clickHandler = () => {\n      this.selectLocation(listing);\n      const li = listing.listingElement;\n      if (li) {\n        li.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest'\n        });\n      }\n    };\n    return html`\n        <gmp-advanced-marker\n            .position=${listing.position}\n            .title=${listing.title}\n            .zIndex=${zIndex}\n            gmp-clickable @gmp-click=${clickHandler}></gmp-advanced-marker>`;\n  }\n  renderMapDirections() {\n    const originLatLng = this.searchLocation?.location;\n    const destinationLatLng = this.selectedListing?.position;\n    if (this.featureSet === FeatureSet.ADVANCED && originLatLng && destinationLatLng) {\n      // clang-format off\n      return html`\n      <gmpx-route-overview no-pin\n          .originLatLng=${originLatLng}\n          .destinationLatLng=${destinationLatLng}>\n      </gmpx-route-overview>`;\n      // clang-format on\n    }\n    return nothing;\n  }\n  renderMapPanel() {\n    // clang-format off\n    return html`\n        <gmp-map slot=\"main\" id=\"main-map\" .mapId=${this.mapId ?? nothing}>\n          ${this.renderMapDirections()}\n          ${repeat(this.internalListings, x => x.uniqueKey, x => this.renderMapMarker(x))}\n          ${this.renderSearchMarker()}\n        </gmp-map>`;\n    // clang-format on\n  }\n};\nStoreLocator.styles = storeLocatorStyles;\n__decorate([property({\n  attribute: 'feature-set',\n  reflect: true\n}), __metadata(\"design:type\", String)], StoreLocator.prototype, \"featureSet\", void 0);\n__decorate([property({\n  attribute: 'map-id',\n  reflect: true\n}), __metadata(\"design:type\", String)], StoreLocator.prototype, \"mapId\", void 0);\n__decorate([property({\n  attribute: false\n}), __metadata(\"design:type\", Array)], StoreLocator.prototype, \"listings\", void 0);\n__decorate([property({\n  attribute: false\n}), __metadata(\"design:type\", Object)], StoreLocator.prototype, \"mapOptions\", void 0);\n__decorate([state(), __metadata(\"design:type\", Array)], StoreLocator.prototype, \"internalListings\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], StoreLocator.prototype, \"selectedListing\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], StoreLocator.prototype, \"searchLocation\", void 0);\n__decorate([state(), __metadata(\"design:type\", String)], StoreLocator.prototype, \"detailsPlaceId\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], StoreLocator.prototype, \"initialized\", void 0);\n__decorate([query('gmpx-overlay-layout'), __metadata(\"design:type\", Function)], StoreLocator.prototype, \"overlayLayout\", void 0);\n__decorate([query('gmp-map'), __metadata(\"design:type\", Object)], StoreLocator.prototype, \"mapElement\", void 0);\nStoreLocator = __decorate([customElement('gmpx-store-locator'), __metadata(\"design:paramtypes\", [])], StoreLocator);\nexport { StoreLocator };","map":{"version":3,"names":["html","nothing","customElement","property","query","state","classMap","join","ref","repeat","APILoader","BaseComponent","LocalizationController","WebFont","WebFontController","DistanceMeasurer","DistanceSource","FeatureSet","convertLocations","getFeatureSet","getMapOptions","storeLocatorStyles","DEFAULT_MAP_OPTIONS","mapTypeControl","maxZoom","streetViewControl","StoreLocator","constructor","featureSet","ADVANCED","mapOptions","internalListings","initialized","getMsg","buildLocalizer","fontLoader","GOOGLE_SANS_TEXT","MATERIAL_SYMBOLS_OUTLINED","distanceMeasurer","listingDistances","Map","initialize","shouldUpdate","changedProperties","willUpdate","has","listings","map","x","createInternalListing","clear","updated","updateBounds","mapElement","innerMap","setOptions","render","renderSidePanelMain","renderSidePanelOverlay","renderMapPanel","configureFromQuickBuilder","configuration","mapsCoreLibrary","importLibrary","listing","placeResult","place_id","placeId","name","title","formatted_address","addressLines","geometry","location","LatLng","position","uniqueKey","isIntermediateOrBetter","INTERMEDIATE","updateDistances","origin","length","units","userCountry","UnitSystem","IMPERIAL","METRIC","distances","computeDistances","i","set","requestUpdate","updateSearchLocation","event","place","target","value","searchLocation","undefined","addressComponents","component","types","indexOf","shortText","selectLocation","selectedListing","bounds","LatLngBounds","extend","fitBounds","overlayLayout","hideOverlay","detailsPlaceId","renderListItem","distanceInfo","get","showDistance","text","source","DISTANCE_MATRIX","distanceHtml","actionButtons","showDetails","showOverlay","push","action","actions","defaultUri","label","selectCallback","wasSelection","panTo","liClick","selectButtonClick","e","stopPropagation","el","listingElement","sortedListings","headerText","size","distanceMatrixListings","filter","otherDistanceListings","getDistance","Infinity","distanceSorter","a","b","sort","header","BASIC","renderSearchMarker","renderMapMarker","zIndex","clickHandler","li","scrollIntoView","behavior","block","renderMapDirections","originLatLng","destinationLatLng","mapId","styles","__decorate","attribute","reflect"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/store_locator/store_locator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../split_layout/split_layout.js';\nimport '../overlay_layout/overlay_layout.js';\nimport '../route_overview/route_overview.js';\nimport '../place_overview/place_overview.js';\nimport '../place_picker/place_picker.js';\nimport '../icon_button/icon_button.js';\nimport '../place_building_blocks/place_directions_button/place_directions_button.js';\n\n// Placeholder for objectProperty (google3-only)\nimport {html, nothing} from 'lit';\nimport {customElement, property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {join} from 'lit/directives/join.js';\nimport {ref} from 'lit/directives/ref.js';\nimport {repeat} from 'lit/directives/repeat.js';\n\nimport {APILoader} from '../api_loader/api_loader.js';\nimport {BaseComponent} from '../base/base_component.js';\nimport {LocalizationController} from '../base/localization_controller.js';\nimport {WebFont, WebFontController} from '../base/web_font_controller.js';\nimport type {OverlayLayout} from '../overlay_layout/overlay_layout.js';\nimport type {PlacePicker} from '../place_picker/place_picker.js';\nimport type {LatLng, MapElement, Place, PlaceResult} from '../utils/googlemaps_types.js';\n\nimport {DistanceInfo, DistanceMeasurer, DistanceSource} from './distances.js';\nimport type {InternalListing, StoreLocatorListing} from './interfaces.js';\nimport {FeatureSet, QuickBuilderConfiguration} from './interfaces.js';\nimport {convertLocations, getFeatureSet, getMapOptions} from './quick_builder.js';\nimport {storeLocatorStyles} from './store_locator_styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-store-locator': StoreLocator;\n  }\n}\n\n// @ts-ignore - Unused interface, but required for type checking.\ninterface HTMLElementTagNameMap {\n  'gmp-map': google.maps.MapElement;\n  'gmp-advanced-marker': google.maps.marker.AdvancedMarkerElement;\n}\n\nconst DEFAULT_MAP_OPTIONS: Partial<google.maps.MapOptions> = {\n  mapTypeControl: false,\n  maxZoom: 17,\n  streetViewControl: false\n};\n\n/**\n * The store locator component displays an experience where your website's users\n * can browse a list of locations, find the nearest one, and view details.\n *\n * While store locations are the most common use case, you can use this\n * component to show many nearby points of interest like parks, ATMs, or gas\n * stations.\n *\n * To use `<gmpx-store-locator>`, pass it a JavaScript array containing the\n * locations you want to present. Each location, called a listing, is defined as\n * an object with the following properties:\n *\n * ```\n * interface StoreLocatorListing {\n *   // Name of the location or store\n *   title: string;\n *\n *   // Address lines, used when displaying the list.\n *   addressLines?: string[];\n *\n *   // Geographic coordinates of the location\n *   position: LatLng|LatLngLiteral;\n *\n *   // Place ID for this location, used to retrieve additional details\n *   placeId?: string;\n *\n *   // Optional list of additional actions to display with each location\n *   actions?: StoreLocatorAction[];\n * }\n *\n * interface StoreLocatorAction {\n *   // Button label for this action\n *   label: string;\n *\n *   // URI that will be opened in a new tab\n *   defaultUri?: string;\n * }\n * ```\n *\n * See below for a full example.\n *\n * @cssproperty [--gmpx-color-surface] - Background color.\n * @cssproperty [--gmpx-color-on-surface] - Main text color.\n * @cssproperty [--gmpx-color-on-surface-variant] - Color of less important text\n * such as captions.\n * @cssproperty [--gmpx-color-primary] - Color of buttons and icons.\n * @cssproperty [--gmpx-color-outline] - Button outline and divider color.\n * @cssproperty [--gmpx-fixed-panel-width-row-layout=28.5em] - Controls the side\n * panel width when the component is displayed in row direction. The map\n * width will adjust automatically to fill remaining space.\n * @cssproperty [--gmpx-fixed-panel-height-column-layout=65%] - Controls the\n * side panel height when the component is displayed in column direction. The\n * map height will adjust automatically to fill remaining space.\n * @cssproperty [--gmpx-font-family-base] - Font family for regular text.\n * @cssproperty [--gmpx-font-family-headings] - Font family for headings.\n * @cssproperty [--gmpx-font-size-base] - Text size, sets scale for the\n * component.\n * @cssproperty [--gmpx-hours-color-open] - Opening hours text color\n * when the place is open (`advanced` feature set only).\n * @cssproperty [--gmpx-hours-color-closed] - Opening hours text color\n * when the place is closed (`advanced` feature set only).\n * @cssproperty [--gmpx-rating-color] - Color of star rating icons in the\n * details view (`advanced` feature set only).\n * @cssproperty [--gmpx-rating-color-empty] - Background color of star\n * rating icons in the details view (`advanced` feature set only).\n */\n@customElement('gmpx-store-locator')\nexport class StoreLocator extends BaseComponent {\n  static override styles = storeLocatorStyles;\n\n  /**\n   * Chooses the capabilities of this store locator:\n   *\n   * * `'basic'` shows a list of locations with pins on a map.\n   *\n   * * `'intermediate'` adds a search input so users can find the location\n   * closest to them.\n   *\n   * * `'advanced'` brings in a Place details view to show photos, hours, and\n   * reviews for each location.\n   */\n  @property({attribute: 'feature-set', reflect: true})\n  featureSet: FeatureSet = FeatureSet.ADVANCED;\n\n  /**\n   * The Map ID of the map. See the [Map ID\n   * documentation](https://developers.google.com/maps/documentation/get-map-id)\n   * for more information.\n   */\n  @property({attribute: 'map-id', reflect: true}) mapId?: string;\n\n  /**\n   * List of locations to display in the store locator.\n   */\n  @property({attribute: false}) listings?: StoreLocatorListing[];\n\n  /**\n   * Overrides for the map options. Provide values for `center` and `zoom` to\n   * display a map when `listings` is empty.\n   */\n  @property({attribute: false})\n  mapOptions?: Partial<google.maps.MapOptions> = DEFAULT_MAP_OPTIONS;\n\n  @state() private internalListings: InternalListing[] = [];\n\n  @state() private selectedListing?: InternalListing;\n\n  @state() private searchLocation?: Place;\n\n  @state() private detailsPlaceId?: string;\n\n  @state() private initialized = false;\n\n  @query('gmpx-overlay-layout') private overlayLayout?: OverlayLayout;\n  @query('gmp-map') private mapElement?: MapElement;\n\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\n  protected readonly fontLoader = new WebFontController(\n      this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n\n  private mapsCoreLibrary?: google.maps.CoreLibrary;\n  private userCountry?: string;\n  private readonly distanceMeasurer = new DistanceMeasurer(this);\n  private readonly listingDistances = new Map<InternalListing, DistanceInfo>();\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Blocks Lit lifecycle methods until the component is async-initialized. All\n   * other component methods (except for the constructor) can expect that\n   * `this.initialized` is true.\n   */\n  protected override shouldUpdate(changedProperties: Map<string, unknown>) {\n    return this.initialized;\n  }\n\n  /**\n   * Notes on willUpdate():\n   * - This method will only be called when `this.initialized` is true.\n   * - Unable to use `PropertyValues<this>` as the TS type since we are checking\n   *   a private property.\n   * https://lit.dev/docs/components/lifecycle/#typescript-types-for-changedproperties\n   */\n  protected override willUpdate(changedProperties: Map<string, unknown>) {\n    if (changedProperties.has('listings') ||\n        changedProperties.has(/* @state */ 'initialized')) {\n      this.internalListings =\n          (this.listings ?? []).map((x) => this.createInternalListing(x));\n      this.listingDistances.clear();\n    }\n  }\n\n  protected override updated(changedProperties: Map<string, unknown>) {\n    // Perform map updates after the DOM has rendered, so the map element\n    // will exist.\n    if (changedProperties.has('listings') ||\n        changedProperties.has(/* @state */ 'initialized')) {\n      this.updateBounds();\n    }\n\n    if ((changedProperties.has('mapOptions') ||\n         changedProperties.has(/* @state */ 'initialized')) &&\n        this.mapOptions) {\n      this.mapElement?.innerMap?.setOptions(this.mapOptions);\n    }\n  }\n\n  protected override render() {\n    if (!this.initialized) return nothing;\n    return html`\n      <gmpx-split-layout>\n        <gmpx-overlay-layout slot=\"fixed\">\n          ${this.renderSidePanelMain()}\n          ${this.renderSidePanelOverlay()}\n        </gmpx-overlay-layout>\n        ${this.renderMapPanel()}\n      </gmpx-split-layout>\n    `;\n  }\n\n  /**\n   * Configures the Store Locator component from data generated by the [Quick\n   * Builder\n   * tool](https://console.cloud.google.com/google/maps-apis/build/locator-plus)\n   * in the Maps Console.\n   *\n   * @param configuration The configuration object generated by the Quick\n   *     Builder tool.\n   */\n  configureFromQuickBuilder(configuration: QuickBuilderConfiguration) {\n    this.listings = convertLocations(configuration);\n    this.featureSet = getFeatureSet(configuration);\n    this.mapOptions = getMapOptions(configuration);\n  }\n\n  /**\n   * Perform one-time initialization tasks; effectively an async constructor.\n   */\n  private async initialize() {\n    this.mapsCoreLibrary =\n        await APILoader.importLibrary('core', this) as google.maps.CoreLibrary;\n    this.initialized = true;\n  }\n\n  private createInternalListing(listing: StoreLocatorListing): InternalListing {\n    const placeResult: PlaceResult = {\n      place_id: listing.placeId,\n      name: listing.title,\n      formatted_address: listing.addressLines?.join(' '),\n      geometry: {location: new this.mapsCoreLibrary!.LatLng(listing.position)}\n    };\n    return {\n      ...listing,\n      placeResult,\n      uniqueKey: `${listing.placeId}:${listing.title}`\n    };\n  }\n\n  private isIntermediateOrBetter() {\n    return this.featureSet === FeatureSet.INTERMEDIATE ||\n        this.featureSet === FeatureSet.ADVANCED;\n  }\n\n  private async updateDistances(origin: LatLng|null|undefined) {\n    if (!this.isIntermediateOrBetter() || !origin ||\n        !this.internalListings.length) {\n      this.listingDistances.clear();\n    } else {\n      const units = (this.userCountry === 'US') ?\n          this.mapsCoreLibrary!.UnitSystem.IMPERIAL :\n          this.mapsCoreLibrary!.UnitSystem.METRIC;\n      const distances = await this.distanceMeasurer.computeDistances(\n          origin, this.internalListings.map(listing => listing.position),\n          units);\n      for (let i = 0; i < distances.length; i++) {\n        this.listingDistances.set(this.internalListings[i], distances[i]);\n      }\n    }\n    this.requestUpdate();\n  }\n\n  /** Updates the end user's location, used for travel times and sorting. */\n  private updateSearchLocation(event: Event) {\n    const place = (event.target as PlacePicker).value;\n    this.searchLocation = place ?? undefined;\n\n    // Update the locator's idea of the user's country, used for units.\n    if (place?.addressComponents) {\n      for (const component of place.addressComponents) {\n        if (component.types.indexOf('country') >= 0) {\n          this.userCountry = component.shortText ?? undefined;\n          break;\n        }\n      }\n    }\n\n    // Update map bounds to include the new location marker.\n    this.updateBounds();\n\n    // Update distances to this location\n    this.updateDistances(place?.location);\n  }\n\n  /**\n   * Updates the selected location.\n   *\n   * @returns true if the selected location was changed.\n   */\n  private selectLocation(listing: InternalListing|undefined): boolean {\n    if (this.selectedListing === listing) return false;\n    this.selectedListing = listing;\n    return true;\n  }\n\n  /** Updates the map bounds to markers. */\n  private async updateBounds() {\n    if (!this.internalListings.length) return;\n\n    const bounds = new this.mapsCoreLibrary!.LatLngBounds();\n    if (this.searchLocation?.location) {\n      bounds.extend(this.searchLocation.location);\n    }\n    for (const listing of this.internalListings) {\n      bounds.extend(listing.position);\n    }\n    this.mapElement?.innerMap?.fitBounds(bounds);\n  }\n\n  private renderSidePanelOverlay() {\n    if (this.featureSet === FeatureSet.ADVANCED) {\n      // clang-format off\n      return html`\n          <div slot=\"overlay\" id=\"details-panel\">\n            <button class=\"back-button\"\n                @click=${() => this.overlayLayout?.hideOverlay()}>\n              <span class=\"icon material-symbols-outlined\">arrow_back</span>\n              ${this.getMsg('LOCATOR_BACK_BUTTON_CTA')}\n            </button>\n            <gmpx-place-overview .place=${this.detailsPlaceId} google-logo-already-displayed>\n            </gmpx-place-overview>\n          </div>`;\n      // clang-format on\n    }\n    return nothing;\n  }\n\n  private renderListItem(listing: InternalListing) {\n    // UI display for travel distance.\n    const distanceInfo = this.listingDistances.get(listing);\n    const showDistance = distanceInfo?.text &&\n        distanceInfo.source === DistanceSource.DISTANCE_MATRIX;\n    const distanceHtml = showDistance ? distanceInfo.text : nothing;\n\n    // Action buttons.\n    const actionButtons = [];\n    if (this.featureSet === FeatureSet.ADVANCED) {\n      const showDetails = () => {\n        if (listing.placeId) {\n          this.detailsPlaceId = listing.placeId;\n          this.overlayLayout?.showOverlay();\n        }\n      };\n      actionButtons.push(html`\n          <gmpx-icon-button class=\"view-details\" @click=${showDetails}>\n            ${this.getMsg('LOCATOR_VIEW_DETAILS_CTA')}\n          </gmpx-icon-button>`);\n    }\n    for (const action of listing.actions ?? []) {\n      actionButtons.push(html`\n          <gmpx-icon-button icon=\"open_in_new\" .href=${\n          action.defaultUri ?? nothing}>\n            ${action.label}\n          </gmpx-icon-button>`);\n    }\n\n    // Clicking anywhere on the item selects this location.\n    // Additionally, a hidden button element makes this behavior\n    // accessible under tab navigation.\n    const selectCallback = () => {\n      const wasSelection = this.selectLocation(listing);\n      if (wasSelection && this.selectedListing && !this.searchLocation) {\n        this.mapElement?.innerMap?.panTo(this.selectedListing.position);\n      }\n    };\n    const liClick = selectCallback;\n    const selectButtonClick = (e: Event) => {\n      selectCallback();\n      e.stopPropagation();\n    };\n\n    // clang-format off\n    return html`\n      <li @click=${liClick}\n          class=${classMap({'selected': listing === this.selectedListing})}\n          ${ref((el?: Element) => { listing.listingElement = el; })}>\n        <gmpx-place-data-provider auto-fetch-disabled\n            .place=${listing.placeResult}>\n          <div class=\"result-item\">\n            <button class=\"select-location\" @click=${selectButtonClick}>\n              <h2 class=\"name\">\n                <gmpx-place-field-text field=\"displayName\"></gmpx-place-field-text>\n              </h2>\n            </button>\n            <div class=\"address\">\n              ${join(listing.addressLines ?? [], html`<br>`)}\n            </div>\n            <div class=\"actions\">\n              ${join(actionButtons, html``)}\n            </div>\n            <div class=\"distance\">${distanceHtml}</div>\n            <gmpx-place-directions-button condensed\n                .origin=${this.searchLocation?.location ?? undefined}>\n            </gmpx-place-directions-button>\n          </div>\n        </gmpx-place-data-provider>\n      </li>`;\n    // clang-format on\n  }\n\n  private renderSidePanelMain() {\n    let sortedListings = this.internalListings;\n    let headerText = this.getMsg('LOCATOR_LIST_SUBHEADING');\n    if (this.listingDistances.size > 0) {\n      headerText = this.getMsg('LOCATOR_LIST_SUBHEADING_WITH_SEARCH');\n\n      // Sort the listings with all Distance Matrix distances first, in order,\n      // then all geodesic distances, in order.\n      const distanceMatrixListings = this.internalListings.filter(\n          listing => this.listingDistances.get(listing)?.source ===\n              DistanceSource.DISTANCE_MATRIX);\n      const otherDistanceListings = this.internalListings.filter(\n          listing => this.listingDistances.get(listing)?.source !==\n              DistanceSource.DISTANCE_MATRIX);\n\n      const getDistance = (listing: InternalListing) =>\n          this.listingDistances.get(listing)?.value ?? Infinity;\n      const distanceSorter = (a: InternalListing, b: InternalListing) =>\n          getDistance(a) - getDistance(b);\n      sortedListings = [\n        ...distanceMatrixListings.sort(distanceSorter),\n        ...otherDistanceListings.sort(distanceSorter)\n      ];\n    }\n\n    // clang-format off\n    const header = this.featureSet === FeatureSet.BASIC ?\n        nothing :\n        html`\n        <header>\n          <h1 class=\"search-title\">\n            <span class=\"icon material-symbols-outlined\">distance</span>\n            ${this.getMsg('LOCATOR_LIST_HEADER')}\n          </h1>\n          <gmpx-place-picker for-map=\"main-map\" type=\"geocode\"\n              .placeholder=${this.getMsg('LOCATOR_SEARCH_PROMPT')}\n              @gmpx-placechange=${this.updateSearchLocation}>\n          </gmpx-place-picker>\n        </header>\n    `;\n\n    return html`\n        <div slot=\"main\" id=\"locations-panel\">\n          <div id=\"locations-panel-list\">\n            ${header}\n            <div class=\"section-name\">\n              ${headerText} (${sortedListings.length})\n            </div>\n            <div class=\"results\">\n              <ul id=\"location-results-list\">\n                ${repeat(\n                    sortedListings,\n                    (x) => x.uniqueKey,\n                    (x) => this.renderListItem(x))}\n              </ul>\n            </div>\n          </div>\n        </div>`;\n    // clang-format on\n  }\n\n  private renderSearchMarker() {\n    if (this.isIntermediateOrBetter() && this.searchLocation?.location) {\n      return html`\n          <gmp-advanced-marker\n              .position=${this.searchLocation.location}\n              title=\"${this.getMsg('LOCATOR_SEARCH_LOCATION_MARKER_TITLE')}\">\n            <svg viewbox=\"0 0 100 100\" class=\"search-pin\">\n              <circle cx=\"50\" cy=\"50\" r=\"50\"></circle>\n            </svg>\n          </gmp-advanced-marker>`;\n    }\n    return nothing;\n  }\n\n  private renderMapMarker(listing: InternalListing) {\n    // Pick a z-index to have the marker on top of the Route Overview.\n    const zIndex = 100;\n\n    const clickHandler = () => {\n      this.selectLocation(listing);\n      const li = listing.listingElement;\n      if (li) {\n        li.scrollIntoView({behavior: 'smooth', block: 'nearest'});\n      }\n    };\n    return html`\n        <gmp-advanced-marker\n            .position=${listing.position}\n            .title=${listing.title}\n            .zIndex=${zIndex}\n            gmp-clickable @gmp-click=${clickHandler}></gmp-advanced-marker>`;\n  }\n\n  private renderMapDirections() {\n    const originLatLng = this.searchLocation?.location;\n    const destinationLatLng = this.selectedListing?.position;\n    if (this.featureSet === FeatureSet.ADVANCED && originLatLng &&\n        destinationLatLng) {\n      // clang-format off\n      return html`\n      <gmpx-route-overview no-pin\n          .originLatLng=${originLatLng}\n          .destinationLatLng=${destinationLatLng}>\n      </gmpx-route-overview>`;\n      // clang-format on\n    }\n    return nothing;\n  }\n\n  private renderMapPanel() {\n    // clang-format off\n    return html`\n        <gmp-map slot=\"main\" id=\"main-map\" .mapId=${this.mapId ?? nothing}>\n          ${this.renderMapDirections()}\n          ${repeat(\n              this.internalListings,\n              (x) => x.uniqueKey,\n              (x) => this.renderMapMarker(x))}\n          ${this.renderSearchMarker()}\n        </gmp-map>`;\n    // clang-format on\n  }\n}\n"],"mappings":"AAAA;;;;;;AAMA,OAAO,iCAAiC;AACxC,OAAO,qCAAqC;AAC5C,OAAO,qCAAqC;AAC5C,OAAO,qCAAqC;AAC5C,OAAO,iCAAiC;AACxC,OAAO,+BAA+B;AACtC,OAAO,6EAA6E;AAEpF;AACA,SAAQA,IAAI,EAAEC,OAAO,QAAO,KAAK;AACjC,SAAQC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,QAAO,mBAAmB;AACvE,SAAQC,QAAQ,QAAO,6BAA6B;AACpD,SAAQC,IAAI,QAAO,wBAAwB;AAC3C,SAAQC,GAAG,QAAO,uBAAuB;AACzC,SAAQC,MAAM,QAAO,0BAA0B;AAE/C,SAAQC,SAAS,QAAO,6BAA6B;AACrD,SAAQC,aAAa,QAAO,2BAA2B;AACvD,SAAQC,sBAAsB,QAAO,oCAAoC;AACzE,SAAQC,OAAO,EAAEC,iBAAiB,QAAO,gCAAgC;AAKzE,SAAsBC,gBAAgB,EAAEC,cAAc,QAAO,gBAAgB;AAE7E,SAAQC,UAAU,QAAkC,iBAAiB;AACrE,SAAQC,gBAAgB,EAAEC,aAAa,EAAEC,aAAa,QAAO,oBAAoB;AACjF,SAAQC,kBAAkB,QAAO,2BAA2B;AAc5D,MAAMC,mBAAmB,GAAoC;EAC3DC,cAAc,EAAE,KAAK;EACrBC,OAAO,EAAE,EAAE;EACXC,iBAAiB,EAAE;CACpB;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEO,IAAMC,YAAY,GAAlB,MAAMA,YAAa,SAAQf,aAAa;EA0D7CgB,YAAA;IACE,KAAK,EAAE;IAxDT;;;;;;;;;;;IAYA,KAAAC,UAAU,GAAeX,UAAU,CAACY,QAAQ;IAc5C;;;;IAKA,KAAAC,UAAU,GAAqCR,mBAAmB;IAEjD,KAAAS,gBAAgB,GAAsB,EAAE;IAQxC,KAAAC,WAAW,GAAG,KAAK;IAKjB,KAAAC,MAAM,GAAGrB,sBAAsB,CAACsB,cAAc,CAAC,IAAI,CAAC;IACpD,KAAAC,UAAU,GAAG,IAAIrB,iBAAiB,CACjD,IAAI,EAAE,CAACD,OAAO,CAACuB,gBAAgB,EAAEvB,OAAO,CAACwB,yBAAyB,CAAC,CAAC;IAIvD,KAAAC,gBAAgB,GAAG,IAAIvB,gBAAgB,CAAC,IAAI,CAAC;IAC7C,KAAAwB,gBAAgB,GAAG,IAAIC,GAAG,EAAiC;IAI1E,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA;;;;;EAKmBC,YAAYA,CAACC,iBAAuC;IACrE,OAAO,IAAI,CAACX,WAAW;EACzB;EAEA;;;;;;;EAOmBY,UAAUA,CAACD,iBAAuC;IACnE,IAAIA,iBAAiB,CAACE,GAAG,CAAC,UAAU,CAAC,IACjCF,iBAAiB,CAACE,GAAG,EAAC,YAAa,aAAa,CAAC,EAAE;MACrD,IAAI,CAACd,gBAAgB,GACjB,CAAC,IAAI,CAACe,QAAQ,IAAI,EAAE,EAAEC,GAAG,CAAEC,CAAC,IAAK,IAAI,CAACC,qBAAqB,CAACD,CAAC,CAAC,CAAC;MACnE,IAAI,CAACT,gBAAgB,CAACW,KAAK,EAAE;;EAEjC;EAEmBC,OAAOA,CAACR,iBAAuC;IAChE;IACA;IACA,IAAIA,iBAAiB,CAACE,GAAG,CAAC,UAAU,CAAC,IACjCF,iBAAiB,CAACE,GAAG,EAAC,YAAa,aAAa,CAAC,EAAE;MACrD,IAAI,CAACO,YAAY,EAAE;;IAGrB,IAAI,CAACT,iBAAiB,CAACE,GAAG,CAAC,YAAY,CAAC,IACnCF,iBAAiB,CAACE,GAAG,EAAC,YAAa,aAAa,CAAC,KAClD,IAAI,CAACf,UAAU,EAAE;MACnB,IAAI,CAACuB,UAAU,EAAEC,QAAQ,EAAEC,UAAU,CAAC,IAAI,CAACzB,UAAU,CAAC;;EAE1D;EAEmB0B,MAAMA,CAAA;IACvB,IAAI,CAAC,IAAI,CAACxB,WAAW,EAAE,OAAO/B,OAAO;IACrC,OAAOD,IAAI;;;YAGH,IAAI,CAACyD,mBAAmB,EAAE;YAC1B,IAAI,CAACC,sBAAsB,EAAE;;UAE/B,IAAI,CAACC,cAAc,EAAE;;KAE1B;EACH;EAEA;;;;;;;;;EASAC,yBAAyBA,CAACC,aAAwC;IAChE,IAAI,CAACf,QAAQ,GAAG5B,gBAAgB,CAAC2C,aAAa,CAAC;IAC/C,IAAI,CAACjC,UAAU,GAAGT,aAAa,CAAC0C,aAAa,CAAC;IAC9C,IAAI,CAAC/B,UAAU,GAAGV,aAAa,CAACyC,aAAa,CAAC;EAChD;EAEA;;;EAGQ,MAAMpB,UAAUA,CAAA;IACtB,IAAI,CAACqB,eAAe,GAChB,MAAMpD,SAAS,CAACqD,aAAa,CAAC,MAAM,EAAE,IAAI,CAA4B;IAC1E,IAAI,CAAC/B,WAAW,GAAG,IAAI;EACzB;EAEQiB,qBAAqBA,CAACe,OAA4B;IACxD,MAAMC,WAAW,GAAgB;MAC/BC,QAAQ,EAAEF,OAAO,CAACG,OAAO;MACzBC,IAAI,EAAEJ,OAAO,CAACK,KAAK;MACnBC,iBAAiB,EAAEN,OAAO,CAACO,YAAY,EAAEhE,IAAI,CAAC,GAAG,CAAC;MAClDiE,QAAQ,EAAE;QAACC,QAAQ,EAAE,IAAI,IAAI,CAACX,eAAgB,CAACY,MAAM,CAACV,OAAO,CAACW,QAAQ;MAAC;KACxE;IACD,OAAO;MACL,GAAGX,OAAO;MACVC,WAAW;MACXW,SAAS,EAAE,GAAGZ,OAAO,CAACG,OAAO,IAAIH,OAAO,CAACK,KAAK;KAC/C;EACH;EAEQQ,sBAAsBA,CAAA;IAC5B,OAAO,IAAI,CAACjD,UAAU,KAAKX,UAAU,CAAC6D,YAAY,IAC9C,IAAI,CAAClD,UAAU,KAAKX,UAAU,CAACY,QAAQ;EAC7C;EAEQ,MAAMkD,eAAeA,CAACC,MAA6B;IACzD,IAAI,CAAC,IAAI,CAACH,sBAAsB,EAAE,IAAI,CAACG,MAAM,IACzC,CAAC,IAAI,CAACjD,gBAAgB,CAACkD,MAAM,EAAE;MACjC,IAAI,CAAC1C,gBAAgB,CAACW,KAAK,EAAE;KAC9B,MAAM;MACL,MAAMgC,KAAK,GAAI,IAAI,CAACC,WAAW,KAAK,IAAI,GACpC,IAAI,CAACrB,eAAgB,CAACsB,UAAU,CAACC,QAAQ,GACzC,IAAI,CAACvB,eAAgB,CAACsB,UAAU,CAACE,MAAM;MAC3C,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACjD,gBAAgB,CAACkD,gBAAgB,CAC1DR,MAAM,EAAE,IAAI,CAACjD,gBAAgB,CAACgB,GAAG,CAACiB,OAAO,IAAIA,OAAO,CAACW,QAAQ,CAAC,EAC9DO,KAAK,CAAC;MACV,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACN,MAAM,EAAEQ,CAAC,EAAE,EAAE;QACzC,IAAI,CAAClD,gBAAgB,CAACmD,GAAG,CAAC,IAAI,CAAC3D,gBAAgB,CAAC0D,CAAC,CAAC,EAAEF,SAAS,CAACE,CAAC,CAAC,CAAC;;;IAGrE,IAAI,CAACE,aAAa,EAAE;EACtB;EAEA;EACQC,oBAAoBA,CAACC,KAAY;IACvC,MAAMC,KAAK,GAAID,KAAK,CAACE,MAAsB,CAACC,KAAK;IACjD,IAAI,CAACC,cAAc,GAAGH,KAAK,IAAII,SAAS;IAExC;IACA,IAAIJ,KAAK,EAAEK,iBAAiB,EAAE;MAC5B,KAAK,MAAMC,SAAS,IAAIN,KAAK,CAACK,iBAAiB,EAAE;QAC/C,IAAIC,SAAS,CAACC,KAAK,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;UAC3C,IAAI,CAACnB,WAAW,GAAGiB,SAAS,CAACG,SAAS,IAAIL,SAAS;UACnD;;;;IAKN;IACA,IAAI,CAAC9C,YAAY,EAAE;IAEnB;IACA,IAAI,CAAC2B,eAAe,CAACe,KAAK,EAAErB,QAAQ,CAAC;EACvC;EAEA;;;;;EAKQ+B,cAAcA,CAACxC,OAAkC;IACvD,IAAI,IAAI,CAACyC,eAAe,KAAKzC,OAAO,EAAE,OAAO,KAAK;IAClD,IAAI,CAACyC,eAAe,GAAGzC,OAAO;IAC9B,OAAO,IAAI;EACb;EAEA;EACQ,MAAMZ,YAAYA,CAAA;IACxB,IAAI,CAAC,IAAI,CAACrB,gBAAgB,CAACkD,MAAM,EAAE;IAEnC,MAAMyB,MAAM,GAAG,IAAI,IAAI,CAAC5C,eAAgB,CAAC6C,YAAY,EAAE;IACvD,IAAI,IAAI,CAACV,cAAc,EAAExB,QAAQ,EAAE;MACjCiC,MAAM,CAACE,MAAM,CAAC,IAAI,CAACX,cAAc,CAACxB,QAAQ,CAAC;;IAE7C,KAAK,MAAMT,OAAO,IAAI,IAAI,CAACjC,gBAAgB,EAAE;MAC3C2E,MAAM,CAACE,MAAM,CAAC5C,OAAO,CAACW,QAAQ,CAAC;;IAEjC,IAAI,CAACtB,UAAU,EAAEC,QAAQ,EAAEuD,SAAS,CAACH,MAAM,CAAC;EAC9C;EAEQhD,sBAAsBA,CAAA;IAC5B,IAAI,IAAI,CAAC9B,UAAU,KAAKX,UAAU,CAACY,QAAQ,EAAE;MAC3C;MACA,OAAO7B,IAAI;;;yBAGQ,MAAM,IAAI,CAAC8G,aAAa,EAAEC,WAAW,EAAE;;gBAEhD,IAAI,CAAC9E,MAAM,CAAC,yBAAyB,CAAC;;0CAEZ,IAAI,CAAC+E,cAAc;;iBAE5C;MACX;;IAEF,OAAO/G,OAAO;EAChB;EAEQgH,cAAcA,CAACjD,OAAwB;IAC7C;IACA,MAAMkD,YAAY,GAAG,IAAI,CAAC3E,gBAAgB,CAAC4E,GAAG,CAACnD,OAAO,CAAC;IACvD,MAAMoD,YAAY,GAAGF,YAAY,EAAEG,IAAI,IACnCH,YAAY,CAACI,MAAM,KAAKtG,cAAc,CAACuG,eAAe;IAC1D,MAAMC,YAAY,GAAGJ,YAAY,GAAGF,YAAY,CAACG,IAAI,GAAGpH,OAAO;IAE/D;IACA,MAAMwH,aAAa,GAAG,EAAE;IACxB,IAAI,IAAI,CAAC7F,UAAU,KAAKX,UAAU,CAACY,QAAQ,EAAE;MAC3C,MAAM6F,WAAW,GAAGA,CAAA,KAAK;QACvB,IAAI1D,OAAO,CAACG,OAAO,EAAE;UACnB,IAAI,CAAC6C,cAAc,GAAGhD,OAAO,CAACG,OAAO;UACrC,IAAI,CAAC2C,aAAa,EAAEa,WAAW,EAAE;;MAErC,CAAC;MACDF,aAAa,CAACG,IAAI,CAAC5H,IAAI;0DAC6B0H,WAAW;cACvD,IAAI,CAACzF,MAAM,CAAC,0BAA0B,CAAC;8BACvB,CAAC;;IAE3B,KAAK,MAAM4F,MAAM,IAAI7D,OAAO,CAAC8D,OAAO,IAAI,EAAE,EAAE;MAC1CL,aAAa,CAACG,IAAI,CAAC5H,IAAI;uDAEnB6H,MAAM,CAACE,UAAU,IAAI9H,OAAO;cACxB4H,MAAM,CAACG,KAAK;8BACI,CAAC;;IAG3B;IACA;IACA;IACA,MAAMC,cAAc,GAAGA,CAAA,KAAK;MAC1B,MAAMC,YAAY,GAAG,IAAI,CAAC1B,cAAc,CAACxC,OAAO,CAAC;MACjD,IAAIkE,YAAY,IAAI,IAAI,CAACzB,eAAe,IAAI,CAAC,IAAI,CAACR,cAAc,EAAE;QAChE,IAAI,CAAC5C,UAAU,EAAEC,QAAQ,EAAE6E,KAAK,CAAC,IAAI,CAAC1B,eAAe,CAAC9B,QAAQ,CAAC;;IAEnE,CAAC;IACD,MAAMyD,OAAO,GAAGH,cAAc;IAC9B,MAAMI,iBAAiB,GAAIC,CAAQ,IAAI;MACrCL,cAAc,EAAE;MAChBK,CAAC,CAACC,eAAe,EAAE;IACrB,CAAC;IAED;IACA,OAAOvI,IAAI;mBACIoI,OAAO;kBACR9H,QAAQ,CAAC;MAAC,UAAU,EAAE0D,OAAO,KAAK,IAAI,CAACyC;IAAe,CAAC,CAAC;YAC9DjG,GAAG,CAAEgI,EAAY,IAAI;MAAGxE,OAAO,CAACyE,cAAc,GAAGD,EAAE;IAAE,CAAC,CAAC;;qBAE9CxE,OAAO,CAACC,WAAW;;qDAEaoE,iBAAiB;;;;;;gBAMtD9H,IAAI,CAACyD,OAAO,CAACO,YAAY,IAAI,EAAE,EAAEvE,IAAI,MAAM,CAAC;;;gBAG5CO,IAAI,CAACkH,aAAa,EAAEzH,IAAI,EAAE,CAAC;;oCAEPwH,YAAY;;0BAEtB,IAAI,CAACvB,cAAc,EAAExB,QAAQ,IAAIyB,SAAS;;;;YAIxD;IACR;EACF;EAEQzC,mBAAmBA,CAAA;IACzB,IAAIiF,cAAc,GAAG,IAAI,CAAC3G,gBAAgB;IAC1C,IAAI4G,UAAU,GAAG,IAAI,CAAC1G,MAAM,CAAC,yBAAyB,CAAC;IACvD,IAAI,IAAI,CAACM,gBAAgB,CAACqG,IAAI,GAAG,CAAC,EAAE;MAClCD,UAAU,GAAG,IAAI,CAAC1G,MAAM,CAAC,qCAAqC,CAAC;MAE/D;MACA;MACA,MAAM4G,sBAAsB,GAAG,IAAI,CAAC9G,gBAAgB,CAAC+G,MAAM,CACvD9E,OAAO,IAAI,IAAI,CAACzB,gBAAgB,CAAC4E,GAAG,CAACnD,OAAO,CAAC,EAAEsD,MAAM,KACjDtG,cAAc,CAACuG,eAAe,CAAC;MACvC,MAAMwB,qBAAqB,GAAG,IAAI,CAAChH,gBAAgB,CAAC+G,MAAM,CACtD9E,OAAO,IAAI,IAAI,CAACzB,gBAAgB,CAAC4E,GAAG,CAACnD,OAAO,CAAC,EAAEsD,MAAM,KACjDtG,cAAc,CAACuG,eAAe,CAAC;MAEvC,MAAMyB,WAAW,GAAIhF,OAAwB,IACzC,IAAI,CAACzB,gBAAgB,CAAC4E,GAAG,CAACnD,OAAO,CAAC,EAAEgC,KAAK,IAAIiD,QAAQ;MACzD,MAAMC,cAAc,GAAGA,CAACC,CAAkB,EAAEC,CAAkB,KAC1DJ,WAAW,CAACG,CAAC,CAAC,GAAGH,WAAW,CAACI,CAAC,CAAC;MACnCV,cAAc,GAAG,CACf,GAAGG,sBAAsB,CAACQ,IAAI,CAACH,cAAc,CAAC,EAC9C,GAAGH,qBAAqB,CAACM,IAAI,CAACH,cAAc,CAAC,CAC9C;;IAGH;IACA,MAAMI,MAAM,GAAG,IAAI,CAAC1H,UAAU,KAAKX,UAAU,CAACsI,KAAK,GAC/CtJ,OAAO,GACPD,IAAI;;;;cAIE,IAAI,CAACiC,MAAM,CAAC,qBAAqB,CAAC;;;6BAGnB,IAAI,CAACA,MAAM,CAAC,uBAAuB,CAAC;kCAC/B,IAAI,CAAC2D,oBAAoB;;;KAGtD;IAED,OAAO5F,IAAI;;;cAGDsJ,MAAM;;gBAEJX,UAAU,KAAKD,cAAc,CAACzD,MAAM;;;;kBAIlCxE,MAAM,CACJiI,cAAc,EACb1F,CAAC,IAAKA,CAAC,CAAC4B,SAAS,EACjB5B,CAAC,IAAK,IAAI,CAACiE,cAAc,CAACjE,CAAC,CAAC,CAAC;;;;eAInC;IACX;EACF;EAEQwG,kBAAkBA,CAAA;IACxB,IAAI,IAAI,CAAC3E,sBAAsB,EAAE,IAAI,IAAI,CAACoB,cAAc,EAAExB,QAAQ,EAAE;MAClE,OAAOzE,IAAI;;0BAES,IAAI,CAACiG,cAAc,CAACxB,QAAQ;uBAC/B,IAAI,CAACxC,MAAM,CAAC,sCAAsC,CAAC;;;;iCAIzC;;IAE7B,OAAOhC,OAAO;EAChB;EAEQwJ,eAAeA,CAACzF,OAAwB;IAC9C;IACA,MAAM0F,MAAM,GAAG,GAAG;IAElB,MAAMC,YAAY,GAAGA,CAAA,KAAK;MACxB,IAAI,CAACnD,cAAc,CAACxC,OAAO,CAAC;MAC5B,MAAM4F,EAAE,GAAG5F,OAAO,CAACyE,cAAc;MACjC,IAAImB,EAAE,EAAE;QACNA,EAAE,CAACC,cAAc,CAAC;UAACC,QAAQ,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAS,CAAC,CAAC;;IAE7D,CAAC;IACD,OAAO/J,IAAI;;wBAESgE,OAAO,CAACW,QAAQ;qBACnBX,OAAO,CAACK,KAAK;sBACZqF,MAAM;uCACWC,YAAY,yBAAyB;EAC1E;EAEQK,mBAAmBA,CAAA;IACzB,MAAMC,YAAY,GAAG,IAAI,CAAChE,cAAc,EAAExB,QAAQ;IAClD,MAAMyF,iBAAiB,GAAG,IAAI,CAACzD,eAAe,EAAE9B,QAAQ;IACxD,IAAI,IAAI,CAAC/C,UAAU,KAAKX,UAAU,CAACY,QAAQ,IAAIoI,YAAY,IACvDC,iBAAiB,EAAE;MACrB;MACA,OAAOlK,IAAI;;0BAESiK,YAAY;+BACPC,iBAAiB;6BACnB;MACvB;;IAEF,OAAOjK,OAAO;EAChB;EAEQ0D,cAAcA,CAAA;IACpB;IACA,OAAO3D,IAAI;oDACqC,IAAI,CAACmK,KAAK,IAAIlK,OAAO;YAC7D,IAAI,CAAC+J,mBAAmB,EAAE;YAC1BvJ,MAAM,CACJ,IAAI,CAACsB,gBAAgB,EACpBiB,CAAC,IAAKA,CAAC,CAAC4B,SAAS,EACjB5B,CAAC,IAAK,IAAI,CAACyG,eAAe,CAACzG,CAAC,CAAC,CAAC;YACjC,IAAI,CAACwG,kBAAkB,EAAE;mBAClB;IACf;EACF;;AApbgB9H,YAAA,CAAA0I,MAAM,GAAG/I,kBAAkB;AAc3CgJ,UAAA,EADClK,QAAQ,CAAC;EAACmK,SAAS,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAI,CAAC,CAAC,E,iFACP;AAOGF,UAAA,EAA/ClK,QAAQ,CAAC;EAACmK,SAAS,EAAE,QAAQ;EAAEC,OAAO,EAAE;AAAI,CAAC,CAAC,E,4EAAgB;AAKjCF,UAAA,EAA7BlK,QAAQ,CAAC;EAACmK,SAAS,EAAE;AAAK,CAAC,CAAC,E,8EAAkC;AAO/DD,UAAA,EADClK,QAAQ,CAAC;EAACmK,SAAS,EAAE;AAAK,CAAC,CAAC,E,iFACsC;AAElDD,UAAA,EAAhBhK,KAAK,EAAE,E,sFAAkD;AAEzCgK,UAAA,EAAhBhK,KAAK,EAAE,E,sFAA2C;AAElCgK,UAAA,EAAhBhK,KAAK,EAAE,E,qFAAgC;AAEvBgK,UAAA,EAAhBhK,KAAK,EAAE,E,qFAAiC;AAExBgK,UAAA,EAAhBhK,KAAK,EAAE,E,kFAA6B;AAECgK,UAAA,EAArCjK,KAAK,CAAC,qBAAqB,CAAC,E,sFAAuC;AAC1CiK,UAAA,EAAzBjK,KAAK,CAAC,SAAS,CAAC,E,iFAAiC;AA/CvCsB,YAAY,GAAA2I,UAAA,EADxBnK,aAAa,CAAC,oBAAoB,CAAC,E,sCACvBwB,YAAY,CAsbxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}