{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport { consume, createContext } from '@lit/context';\nimport { property, state } from 'lit/decorators.js';\nimport { BaseComponent } from '../base/base_component.js';\nimport { attachContextRoot } from '../utils/context_utils.js';\nimport { isPlaceResult, makePlaceFromPlaceResult } from '../utils/place_utils.js';\n// If this module is loaded before the definitions of other elements\n// (specifically, Place data providers), adding a context root ensures\n// registration of data consumers by late-upgraded data providers.\nattachContextRoot();\nexport const placeContext = createContext(Symbol('place'));\nexport const placeConsumerRegistrationContext = createContext(Symbol('place-consumer-registration'));\n/**\n * Base class for components which render Place data provided elsewhere; i.e.\n * Place Representation Building Blocks.\n *\n * This class implements functionality to retrieve a `Place` or `PlaceResult`\n * via context from a parent `<gmpx-place-data-provider>` component.\n */\nexport class PlaceDataConsumer extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    /**\n     * This read-only property and attribute indicate whether the component\n     * has the required Place data to display itself.\n     *\n     * Use the attribute to target CSS rules if you wish to hide this component,\n     * or display alternate content, when there's no valid data.\n     */\n    this.noData = true;\n  }\n  /**\n   * Place data to render, overriding anything provided by context.\n   */\n  get place() {\n    return this.placeInternal;\n  }\n  set place(value) {\n    this.placeInternal = value;\n    this.updatePlaceV2(value);\n  }\n  willUpdate(changedProperties) {\n    if (changedProperties.has('contextPlace') && !this.placeV2) {\n      // Trigger callback if Place from context changes and is not overridden.\n      this.placeChangedCallback(this.contextPlace, changedProperties.get('contextPlace'));\n    }\n    // Always refresh the value of `noData` on update; this also reverts any\n    // change to the property from outside the component since it's read-only.\n    const place = this.getPlace();\n    this.noData = !(place && this.placeHasData(place));\n    if (changedProperties.has('contextRegistration')) {\n      this.contextRegistration?.registerPlaceConsumer(this);\n    }\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.contextRegistration?.unregisterPlaceConsumer(this);\n  }\n  /**\n   * Callback to be invoked when the object returned by calling `getPlace()`\n   * changes, including when fields in the object are newly populated.\n   *\n   * @param value New value of the object returned by `getPlace()`.\n   * @param oldValue Old value of the object returned by `getPlace()`.\n   */\n  placeChangedCallback(value, oldValue) {}\n  /**\n   * @ignore\n   * Components should override this method if they wish to show a `no-data`\n   * attribute for use with CSS styling.\n   */\n  placeHasData(place) {\n    return true;\n  }\n  /**\n   * Returns the Place data object to be used when rendering.\n   *\n   * If a `Place` or `PlaceResult` object is specified directly on the component\n   * as a property, it will take priority. Otherwise, this method attempts to\n   * return one provided by a parent `<gmpx-place-data-provider>` element.\n   *\n   * The convention for data providers is to use `undefined` to indicate Place\n   * data has not been requested, or is in the process of being requested. The\n   * value `null` indicates that Place data could not be found.\n   */\n  getPlace() {\n    return this.placeV2 ?? this.contextPlace;\n  }\n  async updatePlaceV2(value) {\n    const oldPlace = this.getPlace();\n    if (!value || !isPlaceResult(value)) {\n      this.placeV2 = value;\n    } else {\n      this.placeV2 = await makePlaceFromPlaceResult(value, this);\n    }\n    this.placeChangedCallback(this.placeV2, oldPlace);\n  }\n}\n__decorate([consume({\n  context: placeConsumerRegistrationContext,\n  subscribe: true\n}), property({\n  attribute: false\n}), __metadata(\"design:type\", Object)], PlaceDataConsumer.prototype, \"contextRegistration\", void 0);\n__decorate([consume({\n  context: placeContext,\n  subscribe: true\n}), property({\n  attribute: false\n}), __metadata(\"design:type\", Object)], PlaceDataConsumer.prototype, \"contextPlace\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'no-data',\n  reflect: true\n}), __metadata(\"design:type\", Object)], PlaceDataConsumer.prototype, \"noData\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlaceDataConsumer.prototype, \"placeV2\", void 0);","map":{"version":3,"names":["consume","createContext","property","state","BaseComponent","attachContextRoot","isPlaceResult","makePlaceFromPlaceResult","placeContext","Symbol","placeConsumerRegistrationContext","PlaceDataConsumer","constructor","noData","place","placeInternal","value","updatePlaceV2","willUpdate","changedProperties","has","placeV2","placeChangedCallback","contextPlace","get","getPlace","placeHasData","contextRegistration","registerPlaceConsumer","disconnectedCallback","unregisterPlaceConsumer","oldValue","oldPlace","__decorate","context","subscribe","attribute","type","Boolean","reflect"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/place_building_blocks/place_data_consumer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {consume, createContext} from '@lit/context';\nimport {PropertyValues} from 'lit';\nimport {property, state} from 'lit/decorators.js';\n\nimport {BaseComponent} from '../base/base_component.js';\nimport {attachContextRoot} from '../utils/context_utils.js';\nimport type {Place, PlaceResult} from '../utils/googlemaps_types.js';\nimport {isPlaceResult, makePlaceFromPlaceResult} from '../utils/place_utils.js';\n\n// If this module is loaded before the definitions of other elements\n// (specifically, Place data providers), adding a context root ensures\n// registration of data consumers by late-upgraded data providers.\nattachContextRoot();\n\n/**\n * Registration functions passed from a `PlaceDataProvider` via context. The\n * `PlaceDataConsumer` calls these to register/unregister itself with the data\n * provider, allowing the provider to get its required fields and trigger\n * updates when place data is loaded.\n */\nexport interface PlaceConsumerRegistration {\n  registerPlaceConsumer: (consumer: PlaceDataConsumer) => void;\n  unregisterPlaceConsumer: (consumer: PlaceDataConsumer) => void;\n}\n\nexport const placeContext = createContext<Place|undefined>(Symbol('place'));\n\nexport const placeConsumerRegistrationContext =\n    createContext<PlaceConsumerRegistration>(\n        Symbol('place-consumer-registration'));\n\n/**\n * Base class for components which render Place data provided elsewhere; i.e.\n * Place Representation Building Blocks.\n *\n * This class implements functionality to retrieve a `Place` or `PlaceResult`\n * via context from a parent `<gmpx-place-data-provider>` component.\n */\nexport abstract class PlaceDataConsumer extends BaseComponent {\n  /**\n   * @ignore\n   * Place consumer registration functions, passed from a parent\n   * `PlaceDataProvider` via context.\n   */\n  @consume({context: placeConsumerRegistrationContext, subscribe: true})\n  @property({attribute: false})\n  contextRegistration?: PlaceConsumerRegistration;\n\n  /**\n   * @ignore\n   * Place data passed from a parent `PlaceDataProvider` via context.\n   */\n  @consume({context: placeContext, subscribe: true})\n  @property({attribute: false})\n  contextPlace: Place|undefined;\n\n  /**\n   * Place data to render, overriding anything provided by context.\n   */\n  get place():\n      // Accept data in the form of either the new `Place` class from Places API\n      // or the legacy `PlaceResult` class and convert to the former internally.\n      Place|PlaceResult|null|undefined {\n    return this.placeInternal;\n  }\n  set place(value: Place|PlaceResult|null|undefined) {\n    this.placeInternal = value;\n    this.updatePlaceV2(value);\n  }\n\n  /**\n   * This read-only property and attribute indicate whether the component\n   * has the required Place data to display itself.\n   *\n   * Use the attribute to target CSS rules if you wish to hide this component,\n   * or display alternate content, when there's no valid data.\n   */\n  @property({type: Boolean, attribute: 'no-data', reflect: true}) noData = true;\n\n  @state() private placeV2?: Place|null;\n\n  private placeInternal?: Place|PlaceResult|null;\n\n  protected override willUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has('contextPlace') && !this.placeV2) {\n      // Trigger callback if Place from context changes and is not overridden.\n      this.placeChangedCallback(\n          this.contextPlace, changedProperties.get('contextPlace'));\n    }\n    // Always refresh the value of `noData` on update; this also reverts any\n    // change to the property from outside the component since it's read-only.\n    const place = this.getPlace();\n    this.noData = !(place && this.placeHasData(place));\n    if (changedProperties.has('contextRegistration')) {\n      this.contextRegistration?.registerPlaceConsumer(this);\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.contextRegistration?.unregisterPlaceConsumer(this);\n  }\n\n  /**\n   * Callback to be invoked when the object returned by calling `getPlace()`\n   * changes, including when fields in the object are newly populated.\n   *\n   * @param value New value of the object returned by `getPlace()`.\n   * @param oldValue Old value of the object returned by `getPlace()`.\n   */\n  protected placeChangedCallback(value?: Place|null, oldValue?: Place|null) {}\n\n  /**\n   * @ignore\n   * Components should override this method if they wish to show a `no-data`\n   * attribute for use with CSS styling.\n   */\n  protected placeHasData(place: Place): boolean {\n    return true;\n  }\n\n  /**\n   * @ignore\n   * Returns any Place fields required for this component to render content.\n   *\n   * A parent `<gmpx-place-data-provider>` component will call this method\n   * before making an API call to determine which Place fields to request.\n   */\n  abstract getRequiredFields(): Array<keyof Place>;\n\n  /**\n   * Returns the Place data object to be used when rendering.\n   *\n   * If a `Place` or `PlaceResult` object is specified directly on the component\n   * as a property, it will take priority. Otherwise, this method attempts to\n   * return one provided by a parent `<gmpx-place-data-provider>` element.\n   *\n   * The convention for data providers is to use `undefined` to indicate Place\n   * data has not been requested, or is in the process of being requested. The\n   * value `null` indicates that Place data could not be found.\n   */\n  protected getPlace(): Place|null|undefined {\n    return this.placeV2 ?? this.contextPlace;\n  }\n\n  private async updatePlaceV2(value?: Place|PlaceResult|null) {\n    const oldPlace = this.getPlace();\n    if (!value || !isPlaceResult(value)) {\n      this.placeV2 = value;\n    } else {\n      this.placeV2 = await makePlaceFromPlaceResult(value, this);\n    }\n    this.placeChangedCallback(this.placeV2, oldPlace);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}