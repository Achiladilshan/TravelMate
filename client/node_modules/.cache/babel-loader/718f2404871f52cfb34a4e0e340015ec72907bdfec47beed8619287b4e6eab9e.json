{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { APILoader } from '../../api_loader/api_loader.js';\nimport { RequestErrorEvent } from '../../base/events.js';\nimport { RequestCache } from '../../utils/request_cache.js';\nconst CACHE_SIZE = 100;\nfunction makeDirectionsRequestCache() {\n  return new RequestCache(CACHE_SIZE, error => {\n    // Requests with a transient error DirectionsStatus of OVER_QUERY_LIMIT\n    // and UNKNOWN_ERROR should be retried. See full list of statuses\n    // https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\n    return error.code === 'OVER_QUERY_LIMIT' || error.code === 'UNKNOWN_ERROR';\n  });\n}\n/**\n * Controller that interfaces with the Maps JavaScript API Directions Service.\n */\nexport class DirectionsController {\n  constructor(host) {\n    this.host = host;\n    this.host.addController(this);\n  }\n  hostUpdate() {}\n  /**\n   * Makes a call to `DirectionsService.route` and returns the result as a\n   * promise. If request fails, the promise will resolve to null, and this\n   * method will dispatch a `RequestErrorEvent` from the host element.\n   */\n  async route(request) {\n    let responsePromise = DirectionsController.cache.get(request);\n    if (responsePromise === null) {\n      responsePromise = this.getService().then(service => service.route(request));\n      DirectionsController.cache.set(request, responsePromise);\n    }\n    try {\n      return await responsePromise;\n    } catch (error) {\n      const requestErrorEvent = new RequestErrorEvent(error);\n      this.host.dispatchEvent(requestErrorEvent);\n      return null;\n    }\n  }\n  async getService() {\n    if (!DirectionsController.service) {\n      const {\n        DirectionsService\n      } = await APILoader.importLibrary('routes', this.host);\n      DirectionsController.service = new DirectionsService();\n    }\n    return DirectionsController.service;\n  }\n  /**\n   * Resets Directions Controller state by deleting any existing service object\n   * and clearing its cache.\n   * This method should be invoked for testing purposes only.\n   * @ignore\n   */\n  static reset() {\n    DirectionsController.cache = makeDirectionsRequestCache();\n    DirectionsController.service = undefined;\n  }\n}\nDirectionsController.cache = makeDirectionsRequestCache();","map":{"version":3,"names":["APILoader","RequestErrorEvent","RequestCache","CACHE_SIZE","makeDirectionsRequestCache","error","code","DirectionsController","constructor","host","addController","hostUpdate","route","request","responsePromise","cache","get","getService","then","service","set","requestErrorEvent","dispatchEvent","DirectionsService","importLibrary","reset","undefined"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/place_building_blocks/place_distance_label/directions_controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {APILoader} from '../../api_loader/api_loader.js';\nimport {RequestErrorEvent} from '../../base/events.js';\nimport {RequestCache} from '../../utils/request_cache.js';\n\nconst CACHE_SIZE = 100;\n\nfunction makeDirectionsRequestCache() {\n  return new RequestCache<\n      google.maps.DirectionsRequest, google.maps.DirectionsResult,\n      google.maps.MapsRequestError>(\n      CACHE_SIZE, (error: google.maps.MapsRequestError) => {\n        // Requests with a transient error DirectionsStatus of OVER_QUERY_LIMIT\n        // and UNKNOWN_ERROR should be retried. See full list of statuses\n        // https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\n        return error.code ===\n            'OVER_QUERY_LIMIT' as google.maps.DirectionsStatus ||\n            error.code === 'UNKNOWN_ERROR' as google.maps.DirectionsStatus;\n      });\n}\n\n/**\n * Controller that interfaces with the Maps JavaScript API Directions Service.\n */\nexport class DirectionsController implements ReactiveController {\n  private static service?: google.maps.DirectionsService;\n  private static cache = makeDirectionsRequestCache();\n\n  constructor(private readonly host: ReactiveControllerHost&LitElement) {\n    this.host.addController(this);\n  }\n\n  hostUpdate() {}\n\n  /**\n   * Makes a call to `DirectionsService.route` and returns the result as a\n   * promise. If request fails, the promise will resolve to null, and this\n   * method will dispatch a `RequestErrorEvent` from the host element.\n   */\n  async route(request: google.maps.DirectionsRequest):\n      Promise<google.maps.DirectionsResult|null> {\n    let responsePromise = DirectionsController.cache.get(request);\n    if (responsePromise === null) {\n      responsePromise =\n          this.getService().then((service) => service.route(request));\n      DirectionsController.cache.set(request, responsePromise);\n    }\n    try {\n      return await responsePromise;\n    } catch (error) {\n      const requestErrorEvent = new RequestErrorEvent(error);\n      this.host.dispatchEvent(requestErrorEvent);\n      return null;\n    }\n  }\n\n  private async getService(): Promise<google.maps.DirectionsService> {\n    if (!DirectionsController.service) {\n      const {DirectionsService} =\n          await APILoader.importLibrary('routes', this.host) as\n          typeof google.maps;\n      DirectionsController.service = new DirectionsService();\n    }\n    return DirectionsController.service;\n  }\n\n  /**\n   * Resets Directions Controller state by deleting any existing service object\n   * and clearing its cache.\n   * This method should be invoked for testing purposes only.\n   * @ignore\n   */\n  static reset() {\n    DirectionsController.cache = makeDirectionsRequestCache();\n    DirectionsController.service = undefined;\n  }\n}\n"],"mappings":"AAAA;;;;;AAQA,SAAQA,SAAS,QAAO,gCAAgC;AACxD,SAAQC,iBAAiB,QAAO,sBAAsB;AACtD,SAAQC,YAAY,QAAO,8BAA8B;AAEzD,MAAMC,UAAU,GAAG,GAAG;AAEtB,SAASC,0BAA0BA,CAAA;EACjC,OAAO,IAAIF,YAAY,CAGnBC,UAAU,EAAGE,KAAmC,IAAI;IAClD;IACA;IACA;IACA,OAAOA,KAAK,CAACC,IAAI,KACb,kBAAkD,IAClDD,KAAK,CAACC,IAAI,KAAK,eAA+C;EACpE,CAAC,CAAC;AACR;AAEA;;;AAGA,OAAM,MAAOC,oBAAoB;EAI/BC,YAA6BC,IAAuC;IAAvC,KAAAA,IAAI,GAAJA,IAAI;IAC/B,IAAI,CAACA,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC;EAC/B;EAEAC,UAAUA,CAAA,GAAI;EAEd;;;;;EAKA,MAAMC,KAAKA,CAACC,OAAsC;IAEhD,IAAIC,eAAe,GAAGP,oBAAoB,CAACQ,KAAK,CAACC,GAAG,CAACH,OAAO,CAAC;IAC7D,IAAIC,eAAe,KAAK,IAAI,EAAE;MAC5BA,eAAe,GACX,IAAI,CAACG,UAAU,EAAE,CAACC,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACP,KAAK,CAACC,OAAO,CAAC,CAAC;MAC/DN,oBAAoB,CAACQ,KAAK,CAACK,GAAG,CAACP,OAAO,EAAEC,eAAe,CAAC;;IAE1D,IAAI;MACF,OAAO,MAAMA,eAAe;KAC7B,CAAC,OAAOT,KAAK,EAAE;MACd,MAAMgB,iBAAiB,GAAG,IAAIpB,iBAAiB,CAACI,KAAK,CAAC;MACtD,IAAI,CAACI,IAAI,CAACa,aAAa,CAACD,iBAAiB,CAAC;MAC1C,OAAO,IAAI;;EAEf;EAEQ,MAAMJ,UAAUA,CAAA;IACtB,IAAI,CAACV,oBAAoB,CAACY,OAAO,EAAE;MACjC,MAAM;QAACI;MAAiB,CAAC,GACrB,MAAMvB,SAAS,CAACwB,aAAa,CAAC,QAAQ,EAAE,IAAI,CAACf,IAAI,CAC/B;MACtBF,oBAAoB,CAACY,OAAO,GAAG,IAAII,iBAAiB,EAAE;;IAExD,OAAOhB,oBAAoB,CAACY,OAAO;EACrC;EAEA;;;;;;EAMA,OAAOM,KAAKA,CAAA;IACVlB,oBAAoB,CAACQ,KAAK,GAAGX,0BAA0B,EAAE;IACzDG,oBAAoB,CAACY,OAAO,GAAGO,SAAS;EAC1C;;AAjDenB,oBAAA,CAAAQ,KAAK,GAAGX,0BAA0B,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}