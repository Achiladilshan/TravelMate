{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\n// Placeholder for objectProperty (google3-only)\nimport { css, html } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { APILoader } from '../api_loader/api_loader.js';\nimport { BaseComponent } from '../base/base_component.js';\nimport { GMPX_COLOR_ON_SURFACE, GMPX_COLOR_PRIMARY, GMPX_COLOR_SURFACE, GMPX_FONT_BODY, GMPX_FONT_SIZE_BASE } from '../base/common_styles.js';\nimport { RequestErrorEvent } from '../base/events.js';\nimport { FocusController } from '../base/focus_controller.js';\nimport { LocalizationController } from '../base/localization_controller.js';\nimport { WebFont, WebFontController } from '../base/web_font_controller.js';\nimport { LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER, STRING_ARRAY_ATTRIBUTE_CONVERTER } from '../utils/attribute_converters.js';\nimport { getDeepActiveElement } from '../utils/deep_element_access.js';\nimport { Deferred } from '../utils/deferred.js';\nimport { isNotAvailableError, makePlaceFromPlaceResult, mapPlaceFieldsToPlaceResultFields } from '../utils/place_utils.js';\n/** Data field names in a `Place` that are fetched by Place Picker. */\nexport const PLACE_DATA_FIELDS = Object.freeze(['addressComponents', 'adrFormatAddress', 'businessStatus', 'displayName', 'formattedAddress', 'googleMapsURI', 'iconBackgroundColor', 'location', 'photos', 'id', 'plusCode', 'svgIconMaskURI', 'types', 'utcOffsetMinutes', 'viewport']);\n/** Data field names in a `PlaceResult` that are fetched by Place Picker. */\nexport const PLACE_RESULT_DATA_FIELDS = Object.freeze(['address_component', 'adr_address', 'business_status', 'formatted_address', 'geometry', 'icon', 'icon_mask_base_uri', 'icon_background_color', 'name', 'photos', 'place_id', 'plus_code', 'type', 'url', 'utc_offset_minutes']);\n/** Multiplier to scale margins and paddings based on font size. */\nconst SPACING_MULTIPLIER = 0.75;\n/**\n * The place picker component is a text input that allows end users to search\n * Google Maps’ global database for a specific address or place using\n * autocomplete.\n *\n * ![](./doc_src/place-picker.gif)\n *\n * @event {Event} gmpx-placechange - This event is fired when a Place object is\n * made available for a Place the user has selected, when user clears the input\n * after selection, or when no Place result is found based on the input query.\n * (React: onPlaceChange)\n * @event {RequestErrorEvent} gmpx-requesterror - Indicates an error condition\n * in an underlying Google Maps JavaScript API call. (React: onRequestError)\n *\n * @cssproperty [--gmpx-color-surface] - Background color of the input.\n * @cssproperty [--gmpx-color-on-surface] - Main text color.\n * @cssproperty [--gmpx-color-primary] - Color of the input focus ring.\n * @cssproperty [--gmpx-font-family-base] - Font family.\n * @cssproperty [--gmpx-font-size-base] - Font size, used to scale the\n * component.\n */\nlet PlacePicker = class PlacePicker extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    /**\n     * If true, only predictions that are within the specified location/radius\n     * or map viewport will be returned.\n     *\n     * Setting this property to false (which is the default) will make the results\n     * biased towards, but not restricted to, places contained within the bounds.\n     */\n    this.strictBounds = false;\n    this.disableSearch = true;\n    this.hideClearButton = true;\n    this.focusController = new FocusController(this);\n    this.fontLoader = new WebFontController(this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n    this.autocomplete = new Deferred();\n    this.getMsg = LocalizationController.buildLocalizer(this);\n  }\n  /**\n   * This readonly property contains data about the user-selected place.\n   *\n   * If the user selects a valid place, then the object is guaranteed to contain\n   * at minimum its Place ID, along with all available [Basic Data\n   * fields](https://developers.google.com/maps/documentation/places/web-service/place-data-fields#basic).\n   *\n   * This property is undefined when user input is empty, and null when no\n   * results are found based on user input.\n   */\n  get value() {\n    return this.valueInternal;\n  }\n  willUpdate(changedProperties) {\n    if (changedProperties.has( /* @state */'disableSearch') && this.disableSearch && this.focusController.isKeyboardNavigating && getDeepActiveElement() === this.searchButtonElement) {\n      this.clearButtonElement?.focus();\n    }\n    if (changedProperties.has( /* @state */'hideClearButton') && this.hideClearButton && this.focusController.isKeyboardNavigating && getDeepActiveElement() === this.clearButtonElement) {\n      this.inputElement?.focus();\n    }\n  }\n  render() {\n    return html`\n      <div class=\"container\">\n        <input\n          @input=${this.handleInput}\n          .placeholder=${this.placeholder ?? ''}\n        />\n        <div class=\"overlay\">\n          <button\n            aria-label=${this.getMsg('PLACE_SEARCH_ARIA_LABEL')}\n            class=\"search-button\"\n            @click=${this.handleSearch}\n            .disabled=${this.disableSearch}\n            type=\"button\"\n          >\n            <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n              search\n            </span>\n          </button>\n          <button\n            aria-label=${this.getMsg('PLACE_CLEAR_ARIA_LABEL')}\n            class=\"clear-button\"\n            @click=${this.handleClear}\n            .hidden=${this.hideClearButton}\n            type=\"button\"\n          >\n            <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n              cancel\n            </span>\n          </button>\n        </div>\n      </div>\n    `;\n  }\n  firstUpdated() {\n    this.initializeAutocomplete(this.inputElement);\n  }\n  async updated(changedProperties) {\n    if (this.autocomplete.value && this.shouldUpdateAutocompleteOptions(changedProperties)) {\n      const options = await this.makeAutocompleteOptions();\n      this.autocomplete.value.setOptions(options);\n    }\n    if (changedProperties.has('forMap') && this.forMap) {\n      const map = await this.getMapById(this.forMap);\n      map && this.bindTo(map);\n    }\n    if (changedProperties.has( /* @state */'valueInternal')) {\n      this.dispatchEvent(new Event('gmpx-placechange'));\n    }\n  }\n  /**\n   * Binds Place Autocomplete to the specified map so that its results are\n   * biased towards the map’s viewport.\n   */\n  async bindTo(map) {\n    const autocomplete = await this.autocomplete.promise;\n    autocomplete.bindTo('bounds', map);\n  }\n  /**\n   * Finds a `<gmp-map>` element under the same root node as this component with\n   * the specified HTML ID and returns its inner `google.maps.Map` object.\n   *\n   * Note that this method may block indefinitely if the `<gmp-map>` custom\n   * element never gets defined.\n   */\n  async getMapById(id) {\n    const rootNode = this.getRootNode();\n    const mapElement = rootNode.getElementById(id);\n    if (mapElement?.tagName === 'GMP-MAP') {\n      await customElements.whenDefined('gmp-map');\n      return mapElement.innerMap;\n    }\n    return null;\n  }\n  shouldUpdateAutocompleteOptions(changedProperties) {\n    return changedProperties.has('country') || changedProperties.has('locationBias') || changedProperties.has('radius') || changedProperties.has('strictBounds') || changedProperties.has('type');\n  }\n  async makeAutocompleteOptions() {\n    const {\n      country,\n      locationBias,\n      radius,\n      strictBounds\n    } = this;\n    let bounds;\n    if (locationBias && radius) {\n      const {\n        Circle\n      } = await APILoader.importLibrary('maps', this);\n      bounds = new Circle({\n        center: locationBias,\n        radius\n      }).getBounds() ?? undefined;\n    }\n    return {\n      bounds,\n      componentRestrictions: country ? {\n        country\n      } : undefined,\n      fields: [...PLACE_RESULT_DATA_FIELDS],\n      strictBounds,\n      types: this.type ? [this.type] : []\n    };\n  }\n  async initializeAutocomplete(inputElement) {\n    const {\n      Autocomplete\n    } = await APILoader.importLibrary('places', this);\n    const autocomplete = new Autocomplete(inputElement, await this.makeAutocompleteOptions());\n    autocomplete.addListener('place_changed', async () => {\n      const result = autocomplete.getPlace();\n      if (result?.place_id) {\n        this.disableSearch = true;\n        this.valueInternal = await makePlaceFromPlaceResult(result, this);\n      } else {\n        await this.handleSearch();\n      }\n    });\n    this.autocomplete.resolve(autocomplete);\n  }\n  /**\n   * Fetches a Place object based on input query when the user does not select\n   * one of the Place Autocomplete predictions, or null if no result is found.\n   */\n  async search(query) {\n    // tslint:disable-next-line:enforce-name-casing\n    const {\n      Place: OrigPlace\n    } = await APILoader.importLibrary('places', this);\n    // A TextSearch request containing only the Place ID field incurs no charge:\n    // https://developers.google.com/maps/documentation/places/web-service/usage-and-billing#id-textsearch.\n    const searchRequest = {\n      textQuery: query,\n      fields: ['id'],\n      locationBias: this.autocomplete.value?.getBounds()\n    };\n    let places;\n    try {\n      ({\n        places\n      } = await OrigPlace.searchByText(searchRequest));\n    } catch (error) {\n      if (isNotAvailableError(error, 'searchByText()')) {\n        // `Place.searchByText()` isn't available in GA; use\n        // `PlacesService.findPlaceFromQuery()` as a fallback.\n        const findRequest = {\n          query,\n          fields: ['id'],\n          locationBias: this.autocomplete.value?.getBounds()\n        };\n        const results = await this.searchWithFindPlaceFromQuery(findRequest);\n        places = [];\n        for (const placeResult of results) {\n          places.push(await makePlaceFromPlaceResult(placeResult, this));\n          break;\n        }\n      } else {\n        throw error;\n      }\n    }\n    if (!places.length) return null;\n    await places[0].fetchFields({\n      fields: [...PLACE_DATA_FIELDS]\n    });\n    return places[0];\n  }\n  /** Looks up a Place using the GA API. */\n  async searchWithFindPlaceFromQuery(request) {\n    const {\n      PlacesService\n    } = await APILoader.importLibrary('places', this);\n    const service = new PlacesService(document.createElement('div'));\n    return new Promise((resolve, reject) => {\n      service.findPlaceFromQuery({\n        ...request,\n        fields: mapPlaceFieldsToPlaceResultFields(request.fields)\n      }, (results, status) => {\n        if (results && status === 'OK') {\n          resolve(results);\n        } else {\n          reject(status);\n        }\n      });\n    });\n  }\n  handleClear() {\n    this.inputElement.value = '';\n    this.valueInternal = undefined;\n    this.disableSearch = true;\n    this.hideClearButton = true;\n  }\n  handleInput(e) {\n    if (!e.target.value) {\n      this.handleClear();\n    } else {\n      this.disableSearch = false;\n      this.hideClearButton = false;\n    }\n  }\n  async handleSearch() {\n    if (this.disableSearch || !this.inputElement?.value) return;\n    this.disableSearch = true;\n    try {\n      this.valueInternal = await this.search(this.inputElement.value);\n      if (this.valueInternal) this.updateInputTextFromPlace(this.valueInternal);\n    } catch (error) {\n      const requestErrorEvent = new RequestErrorEvent(error);\n      this.dispatchEvent(requestErrorEvent);\n    }\n  }\n  updateInputTextFromPlace(place) {\n    let newText;\n    if (place.formattedAddress && place.displayName) {\n      if (place.formattedAddress.startsWith(place.displayName)) {\n        newText = place.formattedAddress;\n      } else {\n        newText = `${place.displayName}, ${place.formattedAddress}`;\n      }\n    } else {\n      newText = place.displayName ?? place.formattedAddress ?? '';\n    }\n    if (newText) this.inputElement.value = newText;\n  }\n};\nPlacePicker.styles = css`\n    :host(:not([hidden])) {\n      /* Match the default display style of <input> element. */\n      display: inline-block;\n    }\n\n    .container {\n      color: ${GMPX_COLOR_ON_SURFACE};\n      font: ${GMPX_FONT_BODY};\n      position: relative;\n    }\n\n    .overlay {\n      display: flex;\n      inset: 0;\n      justify-content: space-between;\n      pointer-events: none;\n      position: absolute;\n    }\n\n    .icon {\n      font-size: inherit;\n    }\n\n    input {\n      background-color: ${GMPX_COLOR_SURFACE};\n      border: 1px solid #80868b;\n      border-radius: 4px;\n      color: ${GMPX_COLOR_ON_SURFACE};\n      box-sizing: border-box;\n      font-family: inherit;\n      font-size: inherit;\n      padding: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER})\n               calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER * 2 + 1});\n      width: 100%;\n    }\n\n    input:focus {\n      outline: 2px solid ${GMPX_COLOR_PRIMARY};\n    }\n\n    input::placeholder {\n      color: ${GMPX_COLOR_ON_SURFACE};\n      opacity: 0.5;\n    }\n\n    button:not([hidden]) {\n      align-items: center;\n      background: none;\n      border: none;\n      color: inherit;\n      display: flex;\n      font: inherit;\n      padding: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER});\n      pointer-events: auto;\n    }\n\n    button:enabled {\n      cursor: pointer;\n    }\n  `;\n// https://lit.dev/docs/components/shadow-dom/#setting-shadowrootoptions\n/** @ignore */\nPlacePicker.shadowRootOptions = {\n  ...BaseComponent.shadowRootOptions,\n  delegatesFocus: true\n};\n__decorate([property({\n  converter: STRING_ARRAY_ATTRIBUTE_CONVERTER,\n  reflect: true\n}), __metadata(\"design:type\", Array)], PlacePicker.prototype, \"country\", void 0);\n__decorate([property({\n  attribute: 'for-map',\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], PlacePicker.prototype, \"forMap\", void 0);\n__decorate([property({\n  attribute: 'location-bias',\n  converter: LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER,\n  reflect: true\n}), __metadata(\"design:type\", Object)], PlacePicker.prototype, \"locationBias\", void 0);\n__decorate([property({\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], PlacePicker.prototype, \"placeholder\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Number\n}), __metadata(\"design:type\", Number)], PlacePicker.prototype, \"radius\", void 0);\n__decorate([property({\n  attribute: 'strict-bounds',\n  reflect: true,\n  type: Boolean\n}), __metadata(\"design:type\", Object)], PlacePicker.prototype, \"strictBounds\", void 0);\n__decorate([property({\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], PlacePicker.prototype, \"type\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlacePicker.prototype, \"valueInternal\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlacePicker.prototype, \"disableSearch\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlacePicker.prototype, \"hideClearButton\", void 0);\n__decorate([query('input'), __metadata(\"design:type\", HTMLInputElement)], PlacePicker.prototype, \"inputElement\", void 0);\n__decorate([query('.clear-button'), __metadata(\"design:type\", HTMLButtonElement)], PlacePicker.prototype, \"clearButtonElement\", void 0);\n__decorate([query('.search-button'), __metadata(\"design:type\", HTMLButtonElement)], PlacePicker.prototype, \"searchButtonElement\", void 0);\nPlacePicker = __decorate([customElement('gmpx-place-picker')], PlacePicker);\nexport { PlacePicker };","map":{"version":3,"names":["css","html","customElement","property","query","state","APILoader","BaseComponent","GMPX_COLOR_ON_SURFACE","GMPX_COLOR_PRIMARY","GMPX_COLOR_SURFACE","GMPX_FONT_BODY","GMPX_FONT_SIZE_BASE","RequestErrorEvent","FocusController","LocalizationController","WebFont","WebFontController","LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER","STRING_ARRAY_ATTRIBUTE_CONVERTER","getDeepActiveElement","Deferred","isNotAvailableError","makePlaceFromPlaceResult","mapPlaceFieldsToPlaceResultFields","PLACE_DATA_FIELDS","Object","freeze","PLACE_RESULT_DATA_FIELDS","SPACING_MULTIPLIER","PlacePicker","constructor","strictBounds","disableSearch","hideClearButton","focusController","fontLoader","GOOGLE_SANS_TEXT","MATERIAL_SYMBOLS_OUTLINED","autocomplete","getMsg","buildLocalizer","value","valueInternal","willUpdate","changedProperties","has","isKeyboardNavigating","searchButtonElement","clearButtonElement","focus","inputElement","render","handleInput","placeholder","handleSearch","handleClear","firstUpdated","initializeAutocomplete","updated","shouldUpdateAutocompleteOptions","options","makeAutocompleteOptions","setOptions","forMap","map","getMapById","bindTo","dispatchEvent","Event","promise","id","rootNode","getRootNode","mapElement","getElementById","tagName","customElements","whenDefined","innerMap","country","locationBias","radius","bounds","Circle","importLibrary","center","getBounds","undefined","componentRestrictions","fields","types","type","Autocomplete","addListener","result","getPlace","place_id","resolve","search","Place","OrigPlace","searchRequest","textQuery","places","searchByText","error","findRequest","results","searchWithFindPlaceFromQuery","placeResult","push","length","fetchFields","request","PlacesService","service","document","createElement","Promise","reject","findPlaceFromQuery","status","e","target","updateInputTextFromPlace","requestErrorEvent","place","newText","formattedAddress","displayName","startsWith","styles","shadowRootOptions","delegatesFocus","__decorate","converter","reflect","attribute","String","Number","Boolean","HTMLInputElement","HTMLButtonElement"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/place_picker/place_picker.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Placeholder for objectProperty (google3-only)\nimport {css, html, PropertyValues} from 'lit';\nimport {customElement, property, query, state} from 'lit/decorators.js';\n\nimport {APILoader} from '../api_loader/api_loader.js';\nimport {BaseComponent} from '../base/base_component.js';\nimport {GMPX_COLOR_ON_SURFACE, GMPX_COLOR_PRIMARY, GMPX_COLOR_SURFACE, GMPX_FONT_BODY, GMPX_FONT_SIZE_BASE} from '../base/common_styles.js';\nimport {RequestErrorEvent} from '../base/events.js';\nimport {FocusController} from '../base/focus_controller.js';\nimport {LocalizationController} from '../base/localization_controller.js';\nimport {WebFont, WebFontController} from '../base/web_font_controller.js';\nimport {LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER, STRING_ARRAY_ATTRIBUTE_CONVERTER} from '../utils/attribute_converters.js';\nimport {getDeepActiveElement} from '../utils/deep_element_access.js';\nimport {Deferred} from '../utils/deferred.js';\nimport type {Place, PlaceResult, PlacesLibrary} from '../utils/googlemaps_types.js';\nimport {isNotAvailableError, makePlaceFromPlaceResult, mapPlaceFieldsToPlaceResultFields} from '../utils/place_utils.js';\n\ntype Autocomplete = google.maps.places.Autocomplete;\ntype AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n/** Data field names in a `Place` that are fetched by Place Picker. */\nexport const PLACE_DATA_FIELDS = Object.freeze([\n  'addressComponents',\n  'adrFormatAddress',\n  'businessStatus',\n  'displayName',\n  'formattedAddress',\n  'googleMapsURI',\n  'iconBackgroundColor',\n  'location',\n  'photos',\n  'id',\n  'plusCode',\n  'svgIconMaskURI',\n  'types',\n  'utcOffsetMinutes',\n  'viewport',\n] as const);\n\n/** Data field names in a `PlaceResult` that are fetched by Place Picker. */\nexport const PLACE_RESULT_DATA_FIELDS = Object.freeze([\n  'address_component',\n  'adr_address',\n  'business_status',\n  'formatted_address',\n  'geometry',\n  'icon',\n  'icon_mask_base_uri',\n  'icon_background_color',\n  'name',\n  'photos',\n  'place_id',\n  'plus_code',\n  'type',\n  'url',\n  'utc_offset_minutes',\n] as const);\n\n/** Multiplier to scale margins and paddings based on font size. */\nconst SPACING_MULTIPLIER = 0.75;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-picker': PlacePicker;\n  }\n}\n\n/**\n * The place picker component is a text input that allows end users to search\n * Google Maps’ global database for a specific address or place using\n * autocomplete.\n *\n * ![](./doc_src/place-picker.gif)\n *\n * @event {Event} gmpx-placechange - This event is fired when a Place object is\n * made available for a Place the user has selected, when user clears the input\n * after selection, or when no Place result is found based on the input query.\n * (React: onPlaceChange)\n * @event {RequestErrorEvent} gmpx-requesterror - Indicates an error condition\n * in an underlying Google Maps JavaScript API call. (React: onRequestError)\n *\n * @cssproperty [--gmpx-color-surface] - Background color of the input.\n * @cssproperty [--gmpx-color-on-surface] - Main text color.\n * @cssproperty [--gmpx-color-primary] - Color of the input focus ring.\n * @cssproperty [--gmpx-font-family-base] - Font family.\n * @cssproperty [--gmpx-font-size-base] - Font size, used to scale the\n * component.\n */\n@customElement('gmpx-place-picker')\nexport class PlacePicker extends BaseComponent {\n  static override styles = css`\n    :host(:not([hidden])) {\n      /* Match the default display style of <input> element. */\n      display: inline-block;\n    }\n\n    .container {\n      color: ${GMPX_COLOR_ON_SURFACE};\n      font: ${GMPX_FONT_BODY};\n      position: relative;\n    }\n\n    .overlay {\n      display: flex;\n      inset: 0;\n      justify-content: space-between;\n      pointer-events: none;\n      position: absolute;\n    }\n\n    .icon {\n      font-size: inherit;\n    }\n\n    input {\n      background-color: ${GMPX_COLOR_SURFACE};\n      border: 1px solid #80868b;\n      border-radius: 4px;\n      color: ${GMPX_COLOR_ON_SURFACE};\n      box-sizing: border-box;\n      font-family: inherit;\n      font-size: inherit;\n      padding: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER})\n               calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER * 2 + 1});\n      width: 100%;\n    }\n\n    input:focus {\n      outline: 2px solid ${GMPX_COLOR_PRIMARY};\n    }\n\n    input::placeholder {\n      color: ${GMPX_COLOR_ON_SURFACE};\n      opacity: 0.5;\n    }\n\n    button:not([hidden]) {\n      align-items: center;\n      background: none;\n      border: none;\n      color: inherit;\n      display: flex;\n      font: inherit;\n      padding: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER});\n      pointer-events: auto;\n    }\n\n    button:enabled {\n      cursor: pointer;\n    }\n  `;\n\n  // https://lit.dev/docs/components/shadow-dom/#setting-shadowrootoptions\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...BaseComponent.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Restricts predictions to up to five countries identified by their ISO\n   * 3166-1 Alpha-2 country codes, case insensitive ('us', 'br', 'au', etc.).\n   *\n   * Multiple country codes can be specified in the attribute as a set of\n   * space-separated tokens (for example, \"us ca\").\n   */\n  @property({converter: STRING_ARRAY_ATTRIBUTE_CONVERTER, reflect: true})\n  country?: string[];\n\n  /**\n   * The HTML id of a `<gmp-map>` element on the page that Place Autocomplete\n   * should bind to for location biasing. Note that the map need not be a parent\n   * of the current element.\n   */\n  @property({attribute: 'for-map', reflect: true, type: String})\n  forMap?: string;\n\n  /**\n   * Location of the region to bias predictions towards (or restrict if\n   * `strict-bounds` is set), in \"lat,lng\" format.\n   *\n   * This attribute must be used in conjunction with `radius`.\n   */\n  @property({\n    attribute: 'location-bias',\n    converter: LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER,\n    reflect: true,\n  })\n  locationBias?: google.maps.LatLngLiteral;\n\n  /** Placeholder text to display before the user has entered any input. */\n  @property({reflect: true, type: String}) placeholder?: string;\n\n  /**\n   * Radius of the region, in meters, to bias predictions towards.\n   *\n   * This attribute must be used in conjunction with `location-bias`.\n   */\n  @property({reflect: true, type: Number}) radius?: number;\n\n  /**\n   * If true, only predictions that are within the specified location/radius\n   * or map viewport will be returned.\n   *\n   * Setting this property to false (which is the default) will make the results\n   * biased towards, but not restricted to, places contained within the bounds.\n   */\n  @property({attribute: 'strict-bounds', reflect: true, type: Boolean})\n  strictBounds = false;\n\n  /**\n   * The type of predictions to return. Some examples include “restaurant”,\n   * “country” and “address”. This property supports any one type found in\n   * Tables 1~3 of [Place\n   * Types](https://developers.google.com/maps/documentation/javascript/supported_types).\n   *\n   * If no type is specified, predictions of all types will be returned.\n   */\n  @property({reflect: true, type: String}) type?: string;\n\n  /**\n   * This readonly property contains data about the user-selected place.\n   *\n   * If the user selects a valid place, then the object is guaranteed to contain\n   * at minimum its Place ID, along with all available [Basic Data\n   * fields](https://developers.google.com/maps/documentation/places/web-service/place-data-fields#basic).\n   *\n   * This property is undefined when user input is empty, and null when no\n   * results are found based on user input.\n   */\n  get value(): Place|null|undefined {\n    return this.valueInternal;\n  }\n  @state() private valueInternal?: Place|null;\n\n  @state() private disableSearch = true;\n  @state() private hideClearButton = true;\n\n  @query('input') private readonly inputElement?: HTMLInputElement;\n\n  @query('.clear-button')\n  private readonly clearButtonElement?: HTMLButtonElement;\n  @query('.search-button')\n  private readonly searchButtonElement?: HTMLButtonElement;\n\n  protected readonly focusController = new FocusController(this);\n\n  protected readonly fontLoader = new WebFontController(\n      this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n\n  private readonly autocomplete = new Deferred<Autocomplete>();\n\n  protected override willUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has(/* @state */ 'disableSearch') &&\n        this.disableSearch && this.focusController.isKeyboardNavigating &&\n        getDeepActiveElement() === this.searchButtonElement) {\n      this.clearButtonElement?.focus();\n    }\n    if (changedProperties.has(/* @state */ 'hideClearButton') &&\n        this.hideClearButton && this.focusController.isKeyboardNavigating &&\n        getDeepActiveElement() === this.clearButtonElement) {\n      this.inputElement?.focus();\n    }\n  }\n\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\n\n  protected override render() {\n    return html`\n      <div class=\"container\">\n        <input\n          @input=${this.handleInput}\n          .placeholder=${this.placeholder ?? ''}\n        />\n        <div class=\"overlay\">\n          <button\n            aria-label=${this.getMsg('PLACE_SEARCH_ARIA_LABEL')}\n            class=\"search-button\"\n            @click=${this.handleSearch}\n            .disabled=${this.disableSearch}\n            type=\"button\"\n          >\n            <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n              search\n            </span>\n          </button>\n          <button\n            aria-label=${this.getMsg('PLACE_CLEAR_ARIA_LABEL')}\n            class=\"clear-button\"\n            @click=${this.handleClear}\n            .hidden=${this.hideClearButton}\n            type=\"button\"\n          >\n            <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n              cancel\n            </span>\n          </button>\n        </div>\n      </div>\n    `;\n  }\n\n  protected override firstUpdated() {\n    this.initializeAutocomplete(this.inputElement!);\n  }\n\n  protected override async updated(changedProperties: PropertyValues) {\n    if (this.autocomplete.value &&\n        this.shouldUpdateAutocompleteOptions(changedProperties)) {\n      const options = await this.makeAutocompleteOptions();\n      this.autocomplete.value.setOptions(options);\n    }\n    if (changedProperties.has('forMap') && this.forMap) {\n      const map = await this.getMapById(this.forMap);\n      map && this.bindTo(map);\n    }\n    if (changedProperties.has(/* @state */ 'valueInternal')) {\n      this.dispatchEvent(new Event('gmpx-placechange'));\n    }\n  }\n\n  /**\n   * Binds Place Autocomplete to the specified map so that its results are\n   * biased towards the map’s viewport.\n   */\n  async bindTo(map: google.maps.Map) {\n    const autocomplete = await this.autocomplete.promise;\n    autocomplete.bindTo('bounds', map);\n  }\n\n  /**\n   * Finds a `<gmp-map>` element under the same root node as this component with\n   * the specified HTML ID and returns its inner `google.maps.Map` object.\n   *\n   * Note that this method may block indefinitely if the `<gmp-map>` custom\n   * element never gets defined.\n   */\n  private async getMapById(id: string): Promise<google.maps.Map|null> {\n    const rootNode = this.getRootNode() as Document | ShadowRoot;\n    const mapElement = rootNode.getElementById(id);\n    if (mapElement?.tagName === 'GMP-MAP') {\n      await customElements.whenDefined('gmp-map');\n      return (mapElement as unknown as {innerMap: google.maps.Map}).innerMap;\n    }\n    return null;\n  }\n\n  private shouldUpdateAutocompleteOptions(changedProperties: PropertyValues):\n      boolean {\n    return changedProperties.has('country') ||\n        changedProperties.has('locationBias') ||\n        changedProperties.has('radius') ||\n        changedProperties.has('strictBounds') || changedProperties.has('type');\n  }\n\n  private async makeAutocompleteOptions(): Promise<AutocompleteOptions> {\n    const {country, locationBias, radius, strictBounds} = this;\n    let bounds;\n    if (locationBias && radius) {\n      const {Circle} =\n          await APILoader.importLibrary('maps', this) as typeof google.maps;\n      bounds =\n          new Circle({center: locationBias, radius}).getBounds() ?? undefined;\n    }\n    return {\n      bounds,\n      componentRestrictions: country ? {country} : undefined,\n      fields: [...PLACE_RESULT_DATA_FIELDS],\n      strictBounds,\n      types: this.type ? [this.type] : [],\n    };\n  }\n\n  private async initializeAutocomplete(inputElement: HTMLInputElement) {\n    const {Autocomplete} = await APILoader.importLibrary('places', this) as\n        typeof google.maps.places;\n    const autocomplete =\n        new Autocomplete(inputElement, await this.makeAutocompleteOptions());\n    autocomplete.addListener('place_changed', async () => {\n      const result = autocomplete.getPlace();\n      if (result?.place_id) {\n        this.disableSearch = true;\n        this.valueInternal = await makePlaceFromPlaceResult(result, this);\n      } else {\n        await this.handleSearch();\n      }\n    });\n    this.autocomplete.resolve(autocomplete);\n  }\n\n  /**\n   * Fetches a Place object based on input query when the user does not select\n   * one of the Place Autocomplete predictions, or null if no result is found.\n   */\n  private async search(query: string): Promise<Place|null> {\n    // tslint:disable-next-line:enforce-name-casing\n    const {Place: OrigPlace} =\n        (await APILoader.importLibrary('places', this)) as unknown as\n        PlacesLibrary;\n    // A TextSearch request containing only the Place ID field incurs no charge:\n    // https://developers.google.com/maps/documentation/places/web-service/usage-and-billing#id-textsearch.\n    const searchRequest = {\n      textQuery: query,\n      fields: ['id'],\n      locationBias: this.autocomplete.value?.getBounds(),\n    };\n    let places;\n    try {\n      ({places} = await OrigPlace.searchByText(searchRequest));\n    } catch (error: unknown) {\n      if (isNotAvailableError(error, 'searchByText()')) {\n        // `Place.searchByText()` isn't available in GA; use\n        // `PlacesService.findPlaceFromQuery()` as a fallback.\n        const findRequest = {\n          query,\n          fields: ['id'],\n          locationBias: this.autocomplete.value?.getBounds(),\n        };\n        const results = await this.searchWithFindPlaceFromQuery(findRequest);\n        places = [];\n        for (const placeResult of results) {\n          places.push(await makePlaceFromPlaceResult(placeResult, this));\n          break;\n        }\n      } else {\n        throw error;\n      }\n    }\n    if (!places.length) return null;\n    await places[0].fetchFields({fields: [...PLACE_DATA_FIELDS]});\n    return places[0] as Place;\n  }\n\n  /** Looks up a Place using the GA API. */\n  private async searchWithFindPlaceFromQuery(\n      request: google.maps.places.FindPlaceFromQueryRequest):\n      Promise<PlaceResult[]> {\n    const {PlacesService} = await APILoader.importLibrary('places', this) as\n        google.maps.PlacesLibrary;\n    const service = new PlacesService(document.createElement('div'));\n    return new Promise((resolve, reject) => {\n      service.findPlaceFromQuery(\n          {\n            ...request,\n            fields: mapPlaceFieldsToPlaceResultFields(\n                request.fields as Array<keyof Place>)\n          },\n          (results, status) => {\n            if (results && status === 'OK') {\n              resolve(results);\n            } else {\n              reject(status);\n            }\n          });\n    });\n  }\n\n  private handleClear() {\n    this.inputElement!.value = '';\n    this.valueInternal = undefined;\n    this.disableSearch = true;\n    this.hideClearButton = true;\n  }\n\n  private handleInput(e: {target: HTMLInputElement}) {\n    if (!e.target.value) {\n      this.handleClear();\n    } else {\n      this.disableSearch = false;\n      this.hideClearButton = false;\n    }\n  }\n\n  private async handleSearch() {\n    if (this.disableSearch || !this.inputElement?.value) return;\n\n    this.disableSearch = true;\n    try {\n      this.valueInternal = await this.search(this.inputElement.value);\n      if (this.valueInternal) this.updateInputTextFromPlace(this.valueInternal);\n    } catch (error: unknown) {\n      const requestErrorEvent = new RequestErrorEvent(error);\n      this.dispatchEvent(requestErrorEvent);\n    }\n  }\n\n  private updateInputTextFromPlace(place: Place) {\n    let newText;\n    if (place.formattedAddress && place.displayName) {\n      if (place.formattedAddress.startsWith(place.displayName)) {\n        newText = place.formattedAddress;\n      } else {\n        newText = `${place.displayName}, ${place.formattedAddress}`;\n      }\n    } else {\n      newText = place.displayName ?? place.formattedAddress ?? '';\n    }\n    if (newText) this.inputElement!.value = newText;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}