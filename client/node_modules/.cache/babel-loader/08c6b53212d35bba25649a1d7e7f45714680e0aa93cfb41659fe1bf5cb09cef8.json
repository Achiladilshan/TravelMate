{"ast":null,"code":"/**\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { deepParentChain } from '../utils/deep_element_access.js';\nimport { Deferred } from '../utils/deferred.js';\nimport { ViewportManager } from './viewport_manager.js';\n/**\n * Controller that finds a containing `<gmp-map>` element in the DOM when its\n * host is connected, and saves a reference to the internal Map for the host to\n * use.\n */\nexport class MapController {\n  get map() {\n    return this.deferredMap.value;\n  }\n  /**\n   * Resolves to the map when it's ready. It might not be ready immediately due\n   * to delays in connecting the host or loading the `<gmp-map>` component from\n   * the Maps JS API.\n   */\n  get mapPromise() {\n    return this.deferredMap.promise;\n  }\n  constructor(host) {\n    this.host = host;\n    this.deferredMap = new Deferred();\n    host.addController(this);\n  }\n  async hostConnected() {\n    const gmpMap = this.getContainingGmpMap();\n    if (gmpMap) {\n      if (!customElements.get('gmp-map')) {\n        await customElements.whenDefined('gmp-map');\n      }\n      const mapElement = gmpMap;\n      // Make sure the host hasn't been disconnected while awaiting\n      if (this.host.isConnected) {\n        this.deferredMap.resolve(mapElement.innerMap);\n        this.viewportManager = ViewportManager.getInstanceForMap(mapElement);\n      }\n    }\n  }\n  hostDisconnected() {\n    this.deferredMap = new Deferred();\n  }\n  /**\n   * Finds and returns a `<gmp-map>` in the DOM that contains the host element,\n   * even if the host is in a shadow root. The `<gmp-map>` is identified by its\n   * tag and might not be an instance of MapElement, if the custom element is\n   * not yet defined.\n   */\n  getContainingGmpMap() {\n    for (const node of deepParentChain(this.host)) {\n      if (node instanceof Element && node.localName === 'gmp-map') {\n        return node;\n      }\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["deepParentChain","Deferred","ViewportManager","MapController","map","deferredMap","value","mapPromise","promise","constructor","host","addController","hostConnected","gmpMap","getContainingGmpMap","customElements","get","whenDefined","mapElement","isConnected","resolve","innerMap","viewportManager","getInstanceForMap","hostDisconnected","node","Element","localName"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/route_building_blocks/map_controller.ts"],"sourcesContent":["/**\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {deepParentChain} from '../utils/deep_element_access.js';\nimport {MapElement} from '../utils/googlemaps_types.js';\nimport {Deferred} from '../utils/deferred.js';\n\nimport {ViewportManager} from './viewport_manager.js';\n\n/**\n * Controller that finds a containing `<gmp-map>` element in the DOM when its\n * host is connected, and saves a reference to the internal Map for the host to\n * use.\n */\nexport class MapController implements ReactiveController {\n  private deferredMap = new Deferred<google.maps.Map>();\n\n  get map(): google.maps.Map|undefined {\n    return this.deferredMap.value;\n  }\n\n  /**\n   * Resolves to the map when it's ready. It might not be ready immediately due\n   * to delays in connecting the host or loading the `<gmp-map>` component from\n   * the Maps JS API.\n   */\n  get mapPromise(): Promise<google.maps.Map> {\n    return this.deferredMap.promise;\n  }\n\n  /**\n   * The viewport manager instance for the map. This is first defined when `map`\n   * is defined, so it can be safely accessed after awaiting `mapPromise`.\n   *\n   * When the host is disconnected and `map` is unset, `viewportManager` remains\n   * set to the most recent viewport manager, so that components can be\n   * unregistered in the host's `disconnectedCallback`.\n   */\n  viewportManager?: ViewportManager;\n\n  constructor(private readonly host: ReactiveControllerHost&LitElement) {\n    host.addController(this);\n  }\n\n  async hostConnected() {\n    const gmpMap = this.getContainingGmpMap();\n    if (gmpMap) {\n      if (!customElements.get('gmp-map')) {\n        await customElements.whenDefined('gmp-map');\n      }\n      const mapElement = gmpMap as MapElement;\n      // Make sure the host hasn't been disconnected while awaiting\n      if (this.host.isConnected) {\n        this.deferredMap.resolve(mapElement.innerMap);\n        this.viewportManager = ViewportManager.getInstanceForMap(mapElement);\n      }\n    }\n  }\n\n  hostDisconnected() {\n    this.deferredMap = new Deferred<google.maps.Map>();\n  }\n\n  /**\n   * Finds and returns a `<gmp-map>` in the DOM that contains the host element,\n   * even if the host is in a shadow root. The `<gmp-map>` is identified by its\n   * tag and might not be an instance of MapElement, if the custom element is\n   * not yet defined.\n   */\n  private getContainingGmpMap(): Element|null {\n    for (const node of deepParentChain(this.host)) {\n      if (node instanceof Element && node.localName === 'gmp-map') {\n        return node;\n      }\n    }\n    return null;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAsBA,SAAQA,eAAe,QAAO,iCAAiC;AAE/D,SAAQC,QAAQ,QAAO,sBAAsB;AAE7C,SAAQC,eAAe,QAAO,uBAAuB;AAErD;;;;;AAKA,OAAM,MAAOC,aAAa;EAGxB,IAAIC,GAAGA,CAAA;IACL,OAAO,IAAI,CAACC,WAAW,CAACC,KAAK;EAC/B;EAEA;;;;;EAKA,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACF,WAAW,CAACG,OAAO;EACjC;EAYAC,YAA6BC,IAAuC;IAAvC,KAAAA,IAAI,GAAJA,IAAI;IAzBzB,KAAAL,WAAW,GAAG,IAAIJ,QAAQ,EAAmB;IA0BnDS,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC;EAC1B;EAEA,MAAMC,aAAaA,CAAA;IACjB,MAAMC,MAAM,GAAG,IAAI,CAACC,mBAAmB,EAAE;IACzC,IAAID,MAAM,EAAE;MACV,IAAI,CAACE,cAAc,CAACC,GAAG,CAAC,SAAS,CAAC,EAAE;QAClC,MAAMD,cAAc,CAACE,WAAW,CAAC,SAAS,CAAC;;MAE7C,MAAMC,UAAU,GAAGL,MAAoB;MACvC;MACA,IAAI,IAAI,CAACH,IAAI,CAACS,WAAW,EAAE;QACzB,IAAI,CAACd,WAAW,CAACe,OAAO,CAACF,UAAU,CAACG,QAAQ,CAAC;QAC7C,IAAI,CAACC,eAAe,GAAGpB,eAAe,CAACqB,iBAAiB,CAACL,UAAU,CAAC;;;EAG1E;EAEAM,gBAAgBA,CAAA;IACd,IAAI,CAACnB,WAAW,GAAG,IAAIJ,QAAQ,EAAmB;EACpD;EAEA;;;;;;EAMQa,mBAAmBA,CAAA;IACzB,KAAK,MAAMW,IAAI,IAAIzB,eAAe,CAAC,IAAI,CAACU,IAAI,CAAC,EAAE;MAC7C,IAAIe,IAAI,YAAYC,OAAO,IAAID,IAAI,CAACE,SAAS,KAAK,SAAS,EAAE;QAC3D,OAAOF,IAAI;;;IAGf,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}