{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nvar PlaceDataProvider_1;\nimport { __decorate, __metadata } from \"tslib\";\nimport { ContextProvider, provide } from '@lit/context';\nimport { html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { choose } from 'lit/directives/choose.js';\nimport { BaseComponent } from '../../base/base_component.js';\nimport { RequestErrorEvent } from '../../base/events.js';\nimport { SlotValidationController } from '../../base/slot_validation_controller.js';\nimport { STRING_ARRAY_ATTRIBUTE_CONVERTER } from '../../utils/attribute_converters.js';\nimport { isNotAvailableError, isPlaceResult, makePlaceFromPlaceResult } from '../../utils/place_utils.js';\nimport { PlaceAttribution } from '../place_attribution/place_attribution.js';\nimport { placeConsumerRegistrationContext, placeContext } from '../place_data_consumer.js';\nimport { CachedPlaceLookup } from './cached_place_lookup.js';\nvar LoadingState;\n(function (LoadingState) {\n  LoadingState[\"EMPTY\"] = \"EMPTY\";\n  LoadingState[\"LOADING\"] = \"LOADING\";\n  LoadingState[\"LOADED\"] = \"LOADED\";\n  LoadingState[\"ERROR\"] = \"ERROR\";\n})(LoadingState || (LoadingState = {}));\nconst CACHE_SIZE = 100;\n/**\n * Provides place data to child components as context.\n *\n * This component can fetch place data from the Places API, or forward a Place\n * or PlaceResult object provided elsewhere in code. By default, this component\n * will only request fields from the Places API which are required to render\n * child components. The component will locally cache place data to avoid\n * redundant API requests.\n *\n * @slot - Elements to receive Places data.\n * @slot initial-loading - If specified, display this content when the component\n * is initially loading Places data. Content in this slot will receive Places\n * data, but some or all fields may be undefined.\n * @slot error - If specified, display this content when there was any error\n * loading data from the Places API.\n *\n * @event {RequestErrorEvent} gmpx-requesterror - Indicates an error condition\n * in an underlying Google Maps JavaScript API call. (React: onRequestError)\n */\nlet PlaceDataProvider = PlaceDataProvider_1 = class PlaceDataProvider extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    /**\n     * If `place` is provided with a `Place` or `PlaceResult` instance, but does\n     * not contain fields required by child components, this element will make a\n     * request to the Place API to retrieve the missing data. Set\n     * `auto-fetch-disabled` to prevent the component from performing these\n     * requests.\n     */\n    this.autoFetchDisabled = false;\n    /**\n     * @ignore\n     * Place consumer registration functions, passed to child `PlaceDataConsumer`s\n     * via context.\n     */\n    this.contextRegistration = {\n      registerPlaceConsumer: c => void this.registerPlaceConsumer(c),\n      unregisterPlaceConsumer: c => void this.unregisterPlaceConsumer(c)\n    };\n    this.loadingState = LoadingState.EMPTY;\n    this.slotValidator = new SlotValidationController(this, this.logger, ['', 'initial-loading', 'error']);\n    this.placeConsumers = new Set();\n    this.placeAttributions = new Set();\n    this.placeContextProvider = new ContextProvider(this, {\n      context: placeContext\n    });\n  }\n  /**\n   * Place data passed to child `PlaceDataConsumer`s via context.\n   */\n  get contextPlace() {\n    return this.placeContextProvider.value;\n  }\n  set contextPlace(place) {\n    // Force an update to the consumer even if the place is the same object.\n    // This allows developers to refresh the consumers by setting\n    // provider.place = provider.place, for example if they added/fetched new\n    // fields to the place object themselves.\n    this.placeContextProvider.setValue(place, /* force= */true);\n  }\n  render() {\n    return choose(this.loadingState, [[LoadingState.EMPTY, () => html``], [LoadingState.LOADING, () => html`<slot name=\"initial-loading\"></slot>`], [LoadingState.LOADED, () => html`<slot></slot>`], [LoadingState.ERROR, () => html`<slot name=\"error\"></slot>`]]);\n  }\n  async updated(changedProperties) {\n    if (changedProperties.has('place')) {\n      try {\n        await this.updatePlace();\n      } catch (error) {\n        this.handleError(error);\n      }\n    }\n  }\n  async updatePlace() {\n    this.loadingState = LoadingState.LOADING;\n    // Set this.contextPlace to an appropriate Place v2, according to the\n    // type of this.place\n    if (!this.place) {\n      // undefined or empty string\n      this.contextPlace = undefined;\n      this.loadingState = LoadingState.EMPTY;\n      return;\n    } else if (typeof this.place === 'string') {\n      this.contextPlace = await PlaceDataProvider_1.placeLookup.getPlace(this.place);\n    } else if (isPlaceResult(this.place)) {\n      this.contextPlace = await makePlaceFromPlaceResult(this.place, this);\n      PlaceDataProvider_1.placeLookup.updatePlace(this.contextPlace);\n    } else {\n      // this.place is a Place\n      this.contextPlace = this.place;\n      PlaceDataProvider_1.placeLookup.updatePlace(this.contextPlace);\n    }\n    // Fetch place data (a) if this.place is a Place ID, or (b) if this.place\n    // is an object and auto-fetch is enabled\n    if (typeof this.place === 'string' || !this.autoFetchDisabled) {\n      let fields;\n      if (this.fields?.length) {\n        fields = this.fields;\n      } else {\n        // Defer execution to ensure that place consumers finish registration\n        await 0;\n        fields = this.getConsumerFields();\n      }\n      try {\n        await this.contextPlace.fetchFields({\n          fields\n        });\n      } catch (error) {\n        if (isNotAvailableError(error, 'fetchFields()')) {\n          // If the SDK doesn't support fetchFields(), replace the Place with a\n          // shimmed version, taking advantage of the fallback capabilities of\n          // `makePlaceFromPlaceResult()`.\n          this.contextPlace = await makePlaceFromPlaceResult({\n            place_id: this.contextPlace.id\n          });\n          PlaceDataProvider_1.placeLookup.updatePlace(this.contextPlace);\n          await this.contextPlace.fetchFields({\n            fields\n          });\n        } else {\n          throw error;\n        }\n      }\n      // Manually update consumers of the context Place, since the object has\n      // been mutated\n      for (const consumer of this.placeConsumers) {\n        consumer.requestUpdate('contextPlace', consumer.contextPlace, {\n          hasChanged: () => true\n        });\n      }\n    }\n    this.appendAttributionIfAbsent();\n    this.loadingState = LoadingState.LOADED;\n  }\n  registerPlaceConsumer(consumer) {\n    this.placeConsumers.add(consumer);\n    if (consumer instanceof PlaceAttribution) {\n      this.placeAttributions.add(consumer);\n    }\n  }\n  unregisterPlaceConsumer(consumer) {\n    this.placeConsumers.delete(consumer);\n    if (consumer instanceof PlaceAttribution) {\n      this.placeAttributions.delete(consumer);\n    }\n  }\n  getConsumerFields() {\n    const fieldSet = new Set();\n    for (const consumer of this.placeConsumers) {\n      for (const field of consumer.getRequiredFields()) {\n        fieldSet.add(field);\n      }\n    }\n    return Array.from(fieldSet.values());\n  }\n  /**\n   * Appends a Place Attribution component as child if none exists in order to\n   * comply with the Google Maps Platform Terms of Service.\n   */\n  appendAttributionIfAbsent() {\n    if (this.placeAttributions.size === 0) {\n      this.appendChild(new PlaceAttribution());\n    }\n  }\n  handleError(error) {\n    this.loadingState = LoadingState.ERROR;\n    const requestErrorEvent = new RequestErrorEvent(error);\n    this.dispatchEvent(requestErrorEvent);\n  }\n};\nPlaceDataProvider.placeLookup = new CachedPlaceLookup(CACHE_SIZE);\n__decorate([property({\n  type: Boolean,\n  attribute: 'auto-fetch-disabled',\n  reflect: true\n}), __metadata(\"design:type\", Object)], PlaceDataProvider.prototype, \"autoFetchDisabled\", void 0);\n__decorate([property({\n  converter: STRING_ARRAY_ATTRIBUTE_CONVERTER,\n  reflect: true\n}), __metadata(\"design:type\", Array)], PlaceDataProvider.prototype, \"fields\", void 0);\n__decorate([property({\n  type: String,\n  hasChanged: () => true\n}), __metadata(\"design:type\", Object)], PlaceDataProvider.prototype, \"place\", void 0);\n__decorate([provide({\n  context: placeConsumerRegistrationContext\n}), property({\n  attribute: false\n}), __metadata(\"design:type\", Object)], PlaceDataProvider.prototype, \"contextRegistration\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlaceDataProvider.prototype, \"loadingState\", void 0);\nPlaceDataProvider = PlaceDataProvider_1 = __decorate([customElement('gmpx-place-data-provider')], PlaceDataProvider);\nexport { PlaceDataProvider };","map":{"version":3,"names":["ContextProvider","provide","html","customElement","property","state","choose","BaseComponent","RequestErrorEvent","SlotValidationController","STRING_ARRAY_ATTRIBUTE_CONVERTER","isNotAvailableError","isPlaceResult","makePlaceFromPlaceResult","PlaceAttribution","placeConsumerRegistrationContext","placeContext","CachedPlaceLookup","LoadingState","CACHE_SIZE","PlaceDataProvider","PlaceDataProvider_1","constructor","autoFetchDisabled","contextRegistration","registerPlaceConsumer","c","unregisterPlaceConsumer","loadingState","EMPTY","slotValidator","logger","placeConsumers","Set","placeAttributions","placeContextProvider","context","contextPlace","value","place","setValue","render","LOADING","LOADED","ERROR","updated","changedProperties","has","updatePlace","error","handleError","undefined","placeLookup","getPlace","fields","length","getConsumerFields","fetchFields","place_id","id","consumer","requestUpdate","hasChanged","appendAttributionIfAbsent","add","delete","fieldSet","field","getRequiredFields","Array","from","values","size","appendChild","requestErrorEvent","dispatchEvent","__decorate","type","Boolean","attribute","reflect","converter","String"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/place_building_blocks/place_data_provider/place_data_provider.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ContextProvider, provide} from '@lit/context';\nimport {html, PropertyValues} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport {choose} from 'lit/directives/choose.js';\n\nimport {BaseComponent} from '../../base/base_component.js';\nimport {RequestErrorEvent} from '../../base/events.js';\nimport {SlotValidationController} from '../../base/slot_validation_controller.js';\nimport {STRING_ARRAY_ATTRIBUTE_CONVERTER} from '../../utils/attribute_converters.js';\nimport type {Place, PlaceResult} from '../../utils/googlemaps_types.js';\nimport {isNotAvailableError, isPlaceResult, makePlaceFromPlaceResult} from '../../utils/place_utils.js';\nimport {PlaceAttribution} from '../place_attribution/place_attribution.js';\nimport {type PlaceConsumerRegistration, placeConsumerRegistrationContext, placeContext, PlaceDataConsumer} from '../place_data_consumer.js';\n\nimport {CachedPlaceLookup} from './cached_place_lookup.js';\n\n\nenum LoadingState {\n  EMPTY = 'EMPTY',\n  LOADING = 'LOADING',\n  LOADED = 'LOADED',\n  ERROR = 'ERROR',\n}\n\nconst CACHE_SIZE = 100;\n\n/**\n * Provides place data to child components as context.\n *\n * This component can fetch place data from the Places API, or forward a Place\n * or PlaceResult object provided elsewhere in code. By default, this component\n * will only request fields from the Places API which are required to render\n * child components. The component will locally cache place data to avoid\n * redundant API requests.\n *\n * @slot - Elements to receive Places data.\n * @slot initial-loading - If specified, display this content when the component\n * is initially loading Places data. Content in this slot will receive Places\n * data, but some or all fields may be undefined.\n * @slot error - If specified, display this content when there was any error\n * loading data from the Places API.\n *\n * @event {RequestErrorEvent} gmpx-requesterror - Indicates an error condition\n * in an underlying Google Maps JavaScript API call. (React: onRequestError)\n */\n@customElement('gmpx-place-data-provider')\nexport class PlaceDataProvider extends BaseComponent {\n  /**\n   * If `place` is provided with a `Place` or `PlaceResult` instance, but does\n   * not contain fields required by child components, this element will make a\n   * request to the Place API to retrieve the missing data. Set\n   * `auto-fetch-disabled` to prevent the component from performing these\n   * requests.\n   */\n  @property({type: Boolean, attribute: 'auto-fetch-disabled', reflect: true})\n  autoFetchDisabled = false;\n\n  /**\n   * Manually specify the fields to request from the Places API.\n   *\n   * If unspecified, the component will request only fields used by child\n   * components.\n   */\n  @property({converter: STRING_ARRAY_ATTRIBUTE_CONVERTER, reflect: true})\n  fields?: string[];\n\n  /**\n   * The place to be displayed by this component. Provide a [Place\n   * ID](https://developers.google.com/maps/documentation/places/web-service/place-id)\n   * as a string to have the component look up and display details from the\n   * Place API. The component will not make further API requests if child\n   * components are added at a later time. If required, explicitly request a\n   * data fetch by re-setting `place` to the same Place ID as before.\n   *\n   * Alternatively, assign a `Place` or `PlaceResult` object to the `place`\n   * property to render it directly (note that the attribute, on the other hand,\n   * only accepts a Place ID string).\n   */\n  @property({type: String, hasChanged: () => true})\n  place?: string|Place|PlaceResult;\n\n  /**\n   * @ignore\n   * Place consumer registration functions, passed to child `PlaceDataConsumer`s\n   * via context.\n   */\n  @provide({context: placeConsumerRegistrationContext})\n  @property({attribute: false})\n  contextRegistration: PlaceConsumerRegistration = {\n    registerPlaceConsumer: (c) => void this.registerPlaceConsumer(c),\n    unregisterPlaceConsumer: (c) => void this.unregisterPlaceConsumer(c),\n  };\n\n  @state() private loadingState = LoadingState.EMPTY;\n\n  protected readonly slotValidator = new SlotValidationController(\n      this, this.logger, ['', 'initial-loading', 'error']);\n\n  private readonly placeConsumers = new Set<PlaceDataConsumer>();\n  private readonly placeAttributions = new Set<PlaceAttribution>();\n\n  private readonly placeContextProvider =\n      new ContextProvider(this, {context: placeContext});\n\n  /**\n   * Place data passed to child `PlaceDataConsumer`s via context.\n   */\n  private get contextPlace(): Place|undefined {\n    return this.placeContextProvider.value;\n  }\n\n  private set contextPlace(place: Place|undefined) {\n    // Force an update to the consumer even if the place is the same object.\n    // This allows developers to refresh the consumers by setting\n    // provider.place = provider.place, for example if they added/fetched new\n    // fields to the place object themselves.\n    this.placeContextProvider.setValue(place, /* force= */ true);\n  }\n\n  private static readonly placeLookup = new CachedPlaceLookup(CACHE_SIZE);\n\n  protected override render() {\n    return choose(this.loadingState, [\n      [LoadingState.EMPTY, () => html``],\n      [LoadingState.LOADING, () => html`<slot name=\"initial-loading\"></slot>`],\n      [LoadingState.LOADED, () => html`<slot></slot>`],\n      [LoadingState.ERROR, () => html`<slot name=\"error\"></slot>`]\n    ]);\n  }\n\n  protected override async updated(changedProperties: PropertyValues<this>) {\n    if (changedProperties.has('place')) {\n      try {\n        await this.updatePlace();\n      } catch (error: unknown) {\n        this.handleError(error);\n      }\n    }\n  }\n\n  private async updatePlace() {\n    this.loadingState = LoadingState.LOADING;\n    // Set this.contextPlace to an appropriate Place v2, according to the\n    // type of this.place\n    if (!this.place) {  // undefined or empty string\n      this.contextPlace = undefined;\n      this.loadingState = LoadingState.EMPTY;\n      return;\n    } else if (typeof this.place === 'string') {\n      this.contextPlace =\n          await PlaceDataProvider.placeLookup.getPlace(this.place);\n    } else if (isPlaceResult(this.place)) {\n      this.contextPlace = await makePlaceFromPlaceResult(this.place, this);\n      PlaceDataProvider.placeLookup.updatePlace(this.contextPlace);\n    } else {  // this.place is a Place\n      this.contextPlace = this.place;\n      PlaceDataProvider.placeLookup.updatePlace(this.contextPlace);\n    }\n\n    // Fetch place data (a) if this.place is a Place ID, or (b) if this.place\n    // is an object and auto-fetch is enabled\n    if ((typeof this.place === 'string') || !this.autoFetchDisabled) {\n      let fields: string[];\n      if (this.fields?.length) {\n        fields = this.fields;\n      } else {\n        // Defer execution to ensure that place consumers finish registration\n        await 0;\n        fields = this.getConsumerFields();\n      }\n      try {\n        await this.contextPlace.fetchFields({fields});\n      } catch (error: unknown) {\n        if (isNotAvailableError(error, 'fetchFields()')) {\n          // If the SDK doesn't support fetchFields(), replace the Place with a\n          // shimmed version, taking advantage of the fallback capabilities of\n          // `makePlaceFromPlaceResult()`.\n          this.contextPlace =\n              await makePlaceFromPlaceResult({place_id: this.contextPlace.id});\n          PlaceDataProvider.placeLookup.updatePlace(this.contextPlace);\n          await this.contextPlace.fetchFields({fields});\n        } else {\n          throw error;\n        }\n      }\n      // Manually update consumers of the context Place, since the object has\n      // been mutated\n      for (const consumer of this.placeConsumers) {\n        consumer.requestUpdate(\n            'contextPlace', consumer.contextPlace, {hasChanged: () => true});\n      }\n    }\n    this.appendAttributionIfAbsent();\n    this.loadingState = LoadingState.LOADED;\n  }\n\n  private registerPlaceConsumer(consumer: PlaceDataConsumer) {\n    this.placeConsumers.add(consumer);\n    if (consumer instanceof PlaceAttribution) {\n      this.placeAttributions.add(consumer);\n    }\n  }\n\n  private unregisterPlaceConsumer(consumer: PlaceDataConsumer) {\n    this.placeConsumers.delete(consumer);\n    if (consumer instanceof PlaceAttribution) {\n      this.placeAttributions.delete(consumer);\n    }\n  }\n\n  private getConsumerFields(): Array<keyof Place> {\n    const fieldSet = new Set<keyof Place>();\n    for (const consumer of this.placeConsumers) {\n      for (const field of consumer.getRequiredFields()) {\n        fieldSet.add(field);\n      }\n    }\n    return Array.from(fieldSet.values());\n  }\n\n  /**\n   * Appends a Place Attribution component as child if none exists in order to\n   * comply with the Google Maps Platform Terms of Service.\n   */\n  private appendAttributionIfAbsent() {\n    if (this.placeAttributions.size === 0) {\n      this.appendChild(new PlaceAttribution());\n    }\n  }\n\n  private handleError(error: unknown) {\n    this.loadingState = LoadingState.ERROR;\n    const requestErrorEvent = new RequestErrorEvent(error);\n    this.dispatchEvent(requestErrorEvent);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-data-provider': PlaceDataProvider;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}