{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { STRING_LITERALS_EN_US } from './strings.js';\n/**\n * Controller that provides localized string literals (`en-US` by default)\n * for use in components of this library.\n */\nexport class LocalizationController {\n  constructor(host) {\n    this.host = host;\n    host.addController(this);\n  }\n  hostConnected() {\n    LocalizationController.connectedComponents.add(this.host);\n  }\n  hostDisconnected() {\n    LocalizationController.connectedComponents.delete(this.host);\n  }\n  /**\n   * Returns a localized string literal with the specified ID.\n   *\n   * @param args If the value keyed by that ID is a string function, provide\n   * one or more inputs as function arguments.\n   */\n  getStringLiteral(id, ...args) {\n    const literal = LocalizationController.translatedStringLiterals[id] ?? STRING_LITERALS_EN_US[id];\n    return typeof literal === 'string' ? literal : literal(...args);\n  }\n  /**\n   * Sets one or many localized string literals in the new locale then\n   * requests an update for all currently connected components.\n   */\n  static setStringLiterals(stringLiterals) {\n    for (const key of Object.keys(stringLiterals)) {\n      LocalizationController.translatedStringLiterals[key] = stringLiterals[key];\n    }\n    for (const component of LocalizationController.connectedComponents) {\n      component.requestUpdate();\n    }\n  }\n  /**\n   * Builds instance of localizer controller to be used for getting string\n   * literal messages.\n   */\n  static buildLocalizer(baseComponent) {\n    const localizer = new LocalizationController(baseComponent);\n    return localizer.getStringLiteral.bind(localizer);\n  }\n  /**\n   * Resets Localization Controller state by clearing its connected components\n   * and translated string literals. This method should be invoked for testing\n   * purposes only.\n   * @ignore\n   */\n  static reset() {\n    LocalizationController.connectedComponents.clear();\n    LocalizationController.translatedStringLiterals = {};\n  }\n}\nLocalizationController.connectedComponents = new Set();\nLocalizationController.translatedStringLiterals = {};","map":{"version":3,"names":["STRING_LITERALS_EN_US","LocalizationController","constructor","host","addController","hostConnected","connectedComponents","add","hostDisconnected","delete","getStringLiteral","id","args","literal","translatedStringLiterals","setStringLiterals","stringLiterals","key","Object","keys","component","requestUpdate","buildLocalizer","baseComponent","localizer","bind","reset","clear","Set"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/base/localization_controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost, ReactiveElement} from 'lit';\n\nimport {STRING_LITERALS_EN_US, StringFunction, StringLiterals} from './strings.js';\n\ntype ParametersOrEmpty<T extends string|StringFunction> =\n    T extends StringFunction ? Parameters<T>: [];\n\n/**\n * Controller that provides localized string literals (`en-US` by default)\n * for use in components of this library.\n */\nexport class LocalizationController implements ReactiveController {\n  private static readonly connectedComponents = new Set<ReactiveElement>();\n  private static translatedStringLiterals: Partial<StringLiterals> = {};\n\n  constructor(private readonly host: ReactiveControllerHost&LitElement) {\n    host.addController(this);\n  }\n\n  hostConnected() {\n    LocalizationController.connectedComponents.add(this.host);\n  }\n\n  hostDisconnected() {\n    LocalizationController.connectedComponents.delete(this.host);\n  }\n\n  /**\n   * Returns a localized string literal with the specified ID.\n   *\n   * @param args If the value keyed by that ID is a string function, provide\n   * one or more inputs as function arguments.\n   */\n  getStringLiteral<T extends keyof StringLiterals>(\n      id: T, ...args: ParametersOrEmpty<StringLiterals[T]>): string {\n    const literal = LocalizationController.translatedStringLiterals[id] ??\n        STRING_LITERALS_EN_US[id];\n    return (typeof literal === 'string') ? literal : literal(...args);\n  }\n\n  /**\n   * Sets one or many localized string literals in the new locale then\n   * requests an update for all currently connected components.\n   */\n  static setStringLiterals(stringLiterals: Partial<StringLiterals>) {\n    for (const key of Object.keys(stringLiterals)) {\n      LocalizationController.translatedStringLiterals[key] =\n          stringLiterals[key];\n    }\n    for (const component of LocalizationController.connectedComponents) {\n      component.requestUpdate();\n    }\n  }\n\n  /**\n   * Builds instance of localizer controller to be used for getting string\n   * literal messages.\n   */\n  static buildLocalizer(baseComponent: LitElement) {\n    const localizer = new LocalizationController(baseComponent);\n    return localizer.getStringLiteral.bind(localizer);\n  }\n\n  /**\n   * Resets Localization Controller state by clearing its connected components\n   * and translated string literals. This method should be invoked for testing\n   * purposes only.\n   * @ignore\n   */\n  static reset() {\n    LocalizationController.connectedComponents.clear();\n    LocalizationController.translatedStringLiterals = {};\n  }\n}\n"],"mappings":"AAAA;;;;;AAQA,SAAQA,qBAAqB,QAAuC,cAAc;AAKlF;;;;AAIA,OAAM,MAAOC,sBAAsB;EAIjCC,YAA6BC,IAAuC;IAAvC,KAAAA,IAAI,GAAJA,IAAI;IAC/BA,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC;EAC1B;EAEAC,aAAaA,CAAA;IACXJ,sBAAsB,CAACK,mBAAmB,CAACC,GAAG,CAAC,IAAI,CAACJ,IAAI,CAAC;EAC3D;EAEAK,gBAAgBA,CAAA;IACdP,sBAAsB,CAACK,mBAAmB,CAACG,MAAM,CAAC,IAAI,CAACN,IAAI,CAAC;EAC9D;EAEA;;;;;;EAMAO,gBAAgBA,CACZC,EAAK,EAAE,GAAGC,IAA0C;IACtD,MAAMC,OAAO,GAAGZ,sBAAsB,CAACa,wBAAwB,CAACH,EAAE,CAAC,IAC/DX,qBAAqB,CAACW,EAAE,CAAC;IAC7B,OAAQ,OAAOE,OAAO,KAAK,QAAQ,GAAIA,OAAO,GAAGA,OAAO,CAAC,GAAGD,IAAI,CAAC;EACnE;EAEA;;;;EAIA,OAAOG,iBAAiBA,CAACC,cAAuC;IAC9D,KAAK,MAAMC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACH,cAAc,CAAC,EAAE;MAC7Cf,sBAAsB,CAACa,wBAAwB,CAACG,GAAG,CAAC,GAChDD,cAAc,CAACC,GAAG,CAAC;;IAEzB,KAAK,MAAMG,SAAS,IAAInB,sBAAsB,CAACK,mBAAmB,EAAE;MAClEc,SAAS,CAACC,aAAa,EAAE;;EAE7B;EAEA;;;;EAIA,OAAOC,cAAcA,CAACC,aAAyB;IAC7C,MAAMC,SAAS,GAAG,IAAIvB,sBAAsB,CAACsB,aAAa,CAAC;IAC3D,OAAOC,SAAS,CAACd,gBAAgB,CAACe,IAAI,CAACD,SAAS,CAAC;EACnD;EAEA;;;;;;EAMA,OAAOE,KAAKA,CAAA;IACVzB,sBAAsB,CAACK,mBAAmB,CAACqB,KAAK,EAAE;IAClD1B,sBAAsB,CAACa,wBAAwB,GAAG,EAAE;EACtD;;AA5DwBb,sBAAA,CAAAK,mBAAmB,GAAG,IAAIsB,GAAG,EAAmB;AACzD3B,sBAAA,CAAAa,wBAAwB,GAA4B,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}