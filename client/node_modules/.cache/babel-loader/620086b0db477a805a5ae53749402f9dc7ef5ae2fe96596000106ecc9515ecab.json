{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nvar APILoader_1;\nimport { __decorate, __metadata } from \"tslib\";\nimport { html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { BaseComponent } from '../base/base_component.js';\nimport { ATTRIBUTION_SOURCE_ID, LIBRARY_VERSION } from '../base/constants.js';\nimport { LoggingController } from '../base/logging_controller.js';\nimport { Deferred } from '../utils/deferred.js';\nimport inlineScript from './inline_script.js';\n/** Returns a reference to `google.maps` from the global scope, if defined. */\nfunction getGoogleMaps() {\n  try {\n    return google?.maps;\n  } catch (e) {\n    return undefined;\n  }\n}\n/** Imports Web Components defined by the Maps JavaScript API. */\nfunction loadComponentsFromMapsJS(googleMaps) {\n  googleMaps.importLibrary('maps');\n  googleMaps.importLibrary('marker');\n}\n/** Returns a `LoggingController` owned by the element, if one exists. */\nfunction getLogger(host) {\n  const logger = host.logger;\n  return logger instanceof LoggingController ? logger : undefined;\n}\n/**\n * The API loader component loads the Google Maps Platform libraries necessary\n * for Extended Components.\n *\n * To use this component, make sure you [sign up for Google Maps Platform and\n * create an API\n * key](https://console.cloud.google.com/google/maps-apis/start).\n * By default, the API loader component will request the beta version of the\n * Maps JavaScript API, giving you access to additional components [`<gmp-map>`\n * and\n * `<gmp-advanced-marker>`](https://developers.google.com/maps/documentation/javascript/web-components/overview).\n * However, you can set the `version` attribute to select a stable (General\n * Availability) version of the SDK such as `weekly`.\n */\nlet APILoader = APILoader_1 = class APILoader extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    /**\n     * The release channel or version numbers. See the\n     * [documentation](https://developers.google.com/maps/documentation/javascript/versions)\n     * for more information.\n     */\n    this.version = 'beta';\n  }\n  /**\n   * An alias for the `key` property. React developers should use this prop to\n   * set the API key.\n   */\n  set apiKey(key) {\n    this.key = key;\n  }\n  get apiKey() {\n    return this.key;\n  }\n  async connectedCallback() {\n    super.connectedCallback();\n    if (APILoader_1.instance) {\n      this.logger.warn('Found multiple instances of this element on the same page. ' + 'The Google Maps JavaScript API can only be configured once; ' + 'please ensure you only have a single instance.', this);\n    } else {\n      APILoader_1.instance = this;\n    }\n  }\n  willUpdate(changedProperties) {\n    // Do not handle updates to any duplicate API loader elements.\n    if (APILoader_1.instance !== this) return;\n    this.tryLoadGoogleMapsAPI(changedProperties);\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n  getSolutionChannel() {\n    if (this.solutionChannel === '') return undefined;\n    if (!this.solutionChannel) {\n      return `GMP_${ATTRIBUTION_SOURCE_ID}_extended_v${LIBRARY_VERSION}`;\n    }\n    return this.solutionChannel;\n  }\n  tryLoadGoogleMapsAPI(changedProperties) {\n    if (APILoader_1.googleMapsDeferred.value) {\n      if (APILoader_1.inlineScriptLoaded) {\n        const changedProperty = changedProperties.keys().next().value;\n        this.logger.warn(`Property '${changedProperty}' cannot be updated once the ` + 'Google Maps JavaScript API is already loaded.');\n      } else {\n        this.logger.warn('Please remove the <gmpx-api-loader> element if you are using ' + 'the Google Maps JavaScript API inline bootstrap loader. ' + 'Duplicate configuration may cause unexpected behavior.');\n      }\n    } else if (this.key !== undefined) {\n      const {\n        key,\n        version,\n        language,\n        region,\n        authReferrerPolicy\n      } = this;\n      const solutionChannel = this.getSolutionChannel();\n      const googleMaps = inlineScript.load({\n        key,\n        ...(version && {\n          v: version\n        }),\n        ...(language && {\n          language\n        }),\n        ...(region && {\n          region\n        }),\n        ...(solutionChannel && {\n          solutionChannel\n        }),\n        ...(authReferrerPolicy && {\n          authReferrerPolicy\n        })\n      });\n      APILoader_1.inlineScriptLoaded = true;\n      APILoader_1.googleMapsDeferred.resolve(googleMaps);\n      loadComponentsFromMapsJS(googleMaps);\n    }\n  }\n  /**\n   * Retrieves a reference to the specified Maps JavaScript API library.\n   *\n   * Libraries are [loaded dynamically from the Maps JavaScript\n   * API](https://developers.google.com/maps/documentation/javascript/dynamic-loading).\n   * If an instance of the API is not already available, one will be configured\n   * and loaded based on a `<gmpx-api-loader>` element in the document.\n   *\n   * @param library Name of the library. Full list of libraries can be found in\n   *     the\n   *     [documentation](https://developers.google.com/maps/documentation/javascript/libraries).\n   * @param consumer Optionally specify the custom element requesting the\n   *     library to provide more helpful console warnings when a library cannot\n   *     be loaded.\n   * @nocollapse\n   */\n  static async importLibrary(library, consumer) {\n    let googleMaps = APILoader_1.googleMapsDeferred.value;\n    if (!googleMaps) {\n      APILoader_1.pollForGoogleMaps( /* numRetries= */5, /* interval= */1000, consumer && getLogger(consumer));\n      googleMaps = await APILoader_1.googleMapsDeferred.promise;\n    }\n    return googleMaps.importLibrary(library);\n  }\n  /**\n   * Resets API loader state and removes `google.maps` from the global scope.\n   * This method should be invoked for testing purposes only.\n   * @ignore\n   */\n  static reset() {\n    delete window.google;\n    delete APILoader_1.instance;\n    APILoader_1.inlineScriptLoaded = false;\n    APILoader_1.googleMapsDeferred = new Deferred();\n  }\n  /** @nocollapse */\n  static pollForGoogleMaps(numRetries, interval, logger, pollCount = 0) {\n    const googleMaps = getGoogleMaps();\n    if (googleMaps) {\n      // Display a warning if `google.maps` is not present in the global\n      // namespace at first, but shows up during subsequent polling period.\n      // This indicates that the developer is using the legacy script loader.\n      if (!APILoader_1.inlineScriptLoaded && pollCount > 0) {\n        (logger ?? console).warn('Using the legacy Google Maps JavaScript API script loader ' + 'may result in suboptimal performance. ' + 'For best results, please include a <gmpx-api-loader> ' + '(https://github.com/googlemaps/extended-component-library) ' + 'or use the inline bootstrap loader ' + '(https://goo.gle/js-api-loading) instead.');\n      }\n      APILoader_1.googleMapsDeferred.resolve(googleMaps);\n      loadComponentsFromMapsJS(googleMaps);\n    } else if (numRetries > 0) {\n      window.setTimeout(() => {\n        APILoader_1.pollForGoogleMaps(numRetries - 1, interval, logger, pollCount + 1);\n      }, interval);\n    } else {\n      // Throw an error if the Maps JavaScript API is not initialized after\n      // several polling attempts. This should help developers debug scenarios\n      // where they forgot to include an API loader or script tag.\n      let errorMessage = logger ? logger.formatMessage('The Google Maps JavaScript API is required for this element ' + 'to function correctly. ') : 'APILoader.importLibrary(): ' + 'Unable to initialize the Google Maps JavaScript API. ';\n      errorMessage += 'Please ensure you have a <gmpx-api-loader> on the ' + 'page with a valid API key. ' + 'https://github.com/googlemaps/extended-component-library';\n      throw new Error(errorMessage);\n    }\n  }\n};\n/** A deferred promise that resolves to the `google.maps` object. */\nAPILoader.googleMapsDeferred = new Deferred();\n/** Whether the inline script has been invoked by this component. */\nAPILoader.inlineScriptLoaded = false;\n__decorate([property({\n  attribute: 'auth-referrer-policy',\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], APILoader.prototype, \"authReferrerPolicy\", void 0);\n__decorate([property({\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], APILoader.prototype, \"key\", void 0);\n__decorate([property({\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], APILoader.prototype, \"language\", void 0);\n__decorate([property({\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], APILoader.prototype, \"region\", void 0);\n__decorate([property({\n  attribute: 'solution-channel',\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], APILoader.prototype, \"solutionChannel\", void 0);\n__decorate([property({\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", Object)], APILoader.prototype, \"version\", void 0);\nAPILoader = APILoader_1 = __decorate([customElement('gmpx-api-loader')], APILoader);\nexport { APILoader };","map":{"version":3,"names":["html","customElement","property","BaseComponent","ATTRIBUTION_SOURCE_ID","LIBRARY_VERSION","LoggingController","Deferred","inlineScript","getGoogleMaps","google","maps","e","undefined","loadComponentsFromMapsJS","googleMaps","importLibrary","getLogger","host","logger","APILoader","APILoader_1","constructor","version","apiKey","key","connectedCallback","instance","warn","willUpdate","changedProperties","tryLoadGoogleMapsAPI","render","getSolutionChannel","solutionChannel","googleMapsDeferred","value","inlineScriptLoaded","changedProperty","keys","next","language","region","authReferrerPolicy","load","v","resolve","library","consumer","pollForGoogleMaps","promise","reset","window","numRetries","interval","pollCount","console","setTimeout","errorMessage","formatMessage","Error","__decorate","attribute","reflect","type","String"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/api_loader/api_loader.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, PropertyValues} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\nimport {BaseComponent} from '../base/base_component.js';\nimport {ATTRIBUTION_SOURCE_ID, LIBRARY_VERSION} from '../base/constants.js';\nimport {LoggingController} from '../base/logging_controller.js';\nimport {Deferred} from '../utils/deferred.js';\n\nimport inlineScript from './inline_script.js';\n\n/** Returns a reference to `google.maps` from the global scope, if defined. */\nfunction getGoogleMaps(): typeof google.maps|undefined {\n  try {\n    return google?.maps;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Imports Web Components defined by the Maps JavaScript API. */\nfunction loadComponentsFromMapsJS(googleMaps: typeof google.maps) {\n  googleMaps.importLibrary('maps');\n  googleMaps.importLibrary('marker');\n}\n\n/** Returns a `LoggingController` owned by the element, if one exists. */\nfunction getLogger(host: HTMLElement): LoggingController|undefined {\n  const logger = (host as {logger?: unknown}).logger;\n  return logger instanceof LoggingController ? logger : undefined;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-api-loader': APILoader;\n  }\n}\n\n/**\n * The API loader component loads the Google Maps Platform libraries necessary\n * for Extended Components.\n *\n * To use this component, make sure you [sign up for Google Maps Platform and\n * create an API\n * key](https://console.cloud.google.com/google/maps-apis/start).\n * By default, the API loader component will request the beta version of the\n * Maps JavaScript API, giving you access to additional components [`<gmp-map>`\n * and\n * `<gmp-advanced-marker>`](https://developers.google.com/maps/documentation/javascript/web-components/overview).\n * However, you can set the `version` attribute to select a stable (General\n * Availability) version of the SDK such as `weekly`.\n */\n@customElement('gmpx-api-loader')\nexport class APILoader extends BaseComponent {\n  /**\n   * An alias for the `key` property. React developers should use this prop to\n   * set the API key.\n   */\n  set apiKey(key: string|undefined) {\n    this.key = key;\n  }\n  get apiKey(): string|undefined {\n    return this.key;\n  }\n\n  /**\n   * Maps JS customers can configure HTTP Referrer Restrictions in the Cloud\n   * Console to limit which URLs are allowed to use a particular API Key. This\n   * parameter can limit the amount of data sent to Google Maps when evaluating\n   * HTTP Referrer Restrictions. Please see the\n   * [documentation](https://developers.google.com/maps/documentation/javascript/dynamic-loading#optional_parameters)\n   * for more information.\n   */\n  @property({attribute: 'auth-referrer-policy', reflect: true, type: String})\n  authReferrerPolicy?: string;\n\n  /**\n   * (Required) A valid Google Maps Platform API key. If you don't have one\n   * already [sign up for Google Maps Platform and create an API\n   * key](https://console.cloud.google.com/google/maps-apis/start).\n   *\n   * React developers are encouraged to use the `apiKey` property instead,\n   * as `key` is a reserved word.\n   *\n   * You can learn more about API keys in the Google Maps Platform\n   * [documentation](https://developers.google.com/maps/documentation/javascript/get-api-key).\n   */\n  @property({reflect: true, type: String}) key?: string;\n\n  /**\n   * The language code; defaults to the user's preferred language setting as\n   * specified in the browser when displaying textual information. Read [more on\n   * localization](https://developers.google.com/maps/documentation/javascript/localization).\n   */\n  @property({reflect: true, type: String}) language?: string;\n\n  /**\n   * The region code to use. This alters the map's behavior based on a given\n   * country or territory. Read [more on region\n   * codes](https://developers.google.com/maps/documentation/javascript/localization#Region).\n   */\n  @property({reflect: true, type: String}) region?: string;\n\n  /**\n   * To understand usage and ways to improve our solutions, Google includes the\n   * `solution_channel` query parameter in API calls to gather information about\n   * code usage. You may opt out at any time by setting this attribute to an\n   * empty string. Read more in the\n   * [documentation](https://developers.google.com/maps/reporting-and-monitoring/reporting#solutions-usage).\n   */\n  @property({attribute: 'solution-channel', reflect: true, type: String})\n  solutionChannel?: string;\n\n  /**\n   * The release channel or version numbers. See the\n   * [documentation](https://developers.google.com/maps/documentation/javascript/versions)\n   * for more information.\n   */\n  @property({reflect: true, type: String}) version = 'beta';\n\n  /** A deferred promise that resolves to the `google.maps` object. */\n  private static googleMapsDeferred = new Deferred<typeof google.maps>();\n\n  /** Whether the inline script has been invoked by this component. */\n  private static inlineScriptLoaded = false;\n\n  /** A single instance of this component used to detect duplicates. */\n  private static instance?: APILoader;\n\n  override async connectedCallback() {\n    super.connectedCallback();\n\n    if (APILoader.instance) {\n      this.logger.warn(\n          'Found multiple instances of this element on the same page. ' +\n              'The Google Maps JavaScript API can only be configured once; ' +\n              'please ensure you only have a single instance.',\n          this);\n    } else {\n      APILoader.instance = this;\n    }\n  }\n\n  protected override willUpdate(changedProperties: PropertyValues<this>) {\n    // Do not handle updates to any duplicate API loader elements.\n    if (APILoader.instance !== this) return;\n\n    this.tryLoadGoogleMapsAPI(changedProperties);\n  }\n\n  protected override render() {\n    return html`<slot></slot>`;\n  }\n\n  private getSolutionChannel(): string|undefined {\n    if (this.solutionChannel === '') return undefined;\n    if (!this.solutionChannel) {\n      return `GMP_${ATTRIBUTION_SOURCE_ID}_extended_v${LIBRARY_VERSION}`;\n    }\n    return this.solutionChannel;\n  }\n\n  private tryLoadGoogleMapsAPI(changedProperties: PropertyValues<this>) {\n    if (APILoader.googleMapsDeferred.value) {\n      if (APILoader.inlineScriptLoaded) {\n        const changedProperty = changedProperties.keys().next().value;\n        this.logger.warn(\n            `Property '${changedProperty}' cannot be updated once the ` +\n            'Google Maps JavaScript API is already loaded.');\n      } else {\n        this.logger.warn(\n            'Please remove the <gmpx-api-loader> element if you are using ' +\n            'the Google Maps JavaScript API inline bootstrap loader. ' +\n            'Duplicate configuration may cause unexpected behavior.');\n      }\n    } else if (this.key !== undefined) {\n      const {key, version, language, region, authReferrerPolicy} = this;\n      const solutionChannel = this.getSolutionChannel();\n      const googleMaps = inlineScript.load({\n        key,\n        ...(version && {v: version}),\n        ...(language && {language}),\n        ...(region && {region}),\n        ...(solutionChannel && {solutionChannel}),\n        ...(authReferrerPolicy && {authReferrerPolicy}),\n      });\n      APILoader.inlineScriptLoaded = true;\n      APILoader.googleMapsDeferred.resolve(googleMaps);\n      loadComponentsFromMapsJS(googleMaps);\n    }\n  }\n\n  /**\n   * Retrieves a reference to the specified Maps JavaScript API library.\n   *\n   * Libraries are [loaded dynamically from the Maps JavaScript\n   * API](https://developers.google.com/maps/documentation/javascript/dynamic-loading).\n   * If an instance of the API is not already available, one will be configured\n   * and loaded based on a `<gmpx-api-loader>` element in the document.\n   *\n   * @param library Name of the library. Full list of libraries can be found in\n   *     the\n   *     [documentation](https://developers.google.com/maps/documentation/javascript/libraries).\n   * @param consumer Optionally specify the custom element requesting the\n   *     library to provide more helpful console warnings when a library cannot\n   *     be loaded.\n   * @nocollapse\n   */\n  static async importLibrary(library: string, consumer?: HTMLElement):\n      Promise<google.maps.CoreLibrary|google.maps.MapsLibrary|\n              google.maps.PlacesLibrary|google.maps.GeocodingLibrary|\n              google.maps.RoutesLibrary|google.maps.MarkerLibrary|\n              google.maps.GeometryLibrary|google.maps.ElevationLibrary|\n              google.maps.StreetViewLibrary|\n              google.maps.JourneySharingLibrary|\n              google.maps.DrawingLibrary|google.maps.VisualizationLibrary> {\n    let googleMaps = APILoader.googleMapsDeferred.value;\n    if (!googleMaps) {\n      APILoader.pollForGoogleMaps(\n          /* numRetries= */ 5, /* interval= */ 1000,\n          consumer && getLogger(consumer));\n      googleMaps = await APILoader.googleMapsDeferred.promise;\n    }\n    return googleMaps.importLibrary(library);\n  }\n\n  /**\n   * Resets API loader state and removes `google.maps` from the global scope.\n   * This method should be invoked for testing purposes only.\n   * @ignore\n   */\n  static reset() {\n    delete (window as {google?: typeof google}).google;\n    delete APILoader.instance;\n    APILoader.inlineScriptLoaded = false;\n    APILoader.googleMapsDeferred = new Deferred<typeof google.maps>();\n  }\n\n  /** @nocollapse */\n  private static pollForGoogleMaps(\n      numRetries: number, interval: number, logger?: LoggingController,\n      pollCount = 0) {\n    const googleMaps = getGoogleMaps();\n    if (googleMaps) {\n      // Display a warning if `google.maps` is not present in the global\n      // namespace at first, but shows up during subsequent polling period.\n      // This indicates that the developer is using the legacy script loader.\n      if (!APILoader.inlineScriptLoaded && pollCount > 0) {\n        (logger ?? console)\n            .warn(\n                'Using the legacy Google Maps JavaScript API script loader ' +\n                'may result in suboptimal performance. ' +\n                'For best results, please include a <gmpx-api-loader> ' +\n                '(https://github.com/googlemaps/extended-component-library) ' +\n                'or use the inline bootstrap loader ' +\n                '(https://goo.gle/js-api-loading) instead.');\n      }\n      APILoader.googleMapsDeferred.resolve(googleMaps);\n      loadComponentsFromMapsJS(googleMaps);\n    } else if (numRetries > 0) {\n      window.setTimeout(() => {\n        APILoader.pollForGoogleMaps(\n            numRetries - 1, interval, logger, pollCount + 1);\n      }, interval);\n    } else {\n      // Throw an error if the Maps JavaScript API is not initialized after\n      // several polling attempts. This should help developers debug scenarios\n      // where they forgot to include an API loader or script tag.\n      let errorMessage = logger ?\n          logger.formatMessage(\n              'The Google Maps JavaScript API is required for this element ' +\n              'to function correctly. ') :\n          'APILoader.importLibrary(): ' +\n              'Unable to initialize the Google Maps JavaScript API. ';\n      errorMessage += 'Please ensure you have a <gmpx-api-loader> on the ' +\n          'page with a valid API key. ' +\n          'https://github.com/googlemaps/extended-component-library';\n      throw new Error(errorMessage);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}