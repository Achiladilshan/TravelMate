{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { APILoader } from '../api_loader/api_loader.js';\n/**\n * Manages a map's viewport to fit the bounds of one or several `LatLngBounded`\n * components.\n */\nexport class ViewportManager {\n  constructor(map) {\n    this.map = map;\n    this.managedComponents = new Set();\n  }\n  /**\n   * Returns the `ViewportManager` instance for the given `MapElement`,\n   * constructing one if none exists already. Each `MapElement` will have only\n   * one associated `ViewportManager` instance.\n   */\n  static getInstanceForMap(map) {\n    if (!ViewportManager.instances.has(map)) {\n      ViewportManager.instances.set(map, new ViewportManager(map));\n    }\n    return ViewportManager.instances.get(map);\n  }\n  /**\n   * Registers a `LatLngBounded` component to be included in the viewport.\n   * Triggers an `updateViewport()` if the component was not already registered.\n   */\n  async register(component) {\n    if (!this.managedComponents.has(component)) {\n      this.managedComponents.add(component);\n      await this.updateViewport();\n    }\n  }\n  /**\n   * If the given `LatLngBounded` component is registered, unregisters it and\n   * triggers an `updateViewport()`.\n   */\n  async unregister(component) {\n    if (this.managedComponents.has(component)) {\n      this.managedComponents.delete(component);\n      await this.updateViewport();\n    }\n  }\n  /**\n   * Updates the map's viewport to fit all registered `LatLngBounded`\n   * components.\n   */\n  async updateViewport() {\n    const boundsUnion = await this.getBoundsUnion();\n    if (boundsUnion) {\n      this.map.innerMap.fitBounds(boundsUnion);\n    }\n  }\n  async getBoundsUnion() {\n    let result = null;\n    for (const component of this.managedComponents) {\n      const bounds = component.getBounds();\n      if (bounds) {\n        if (!result) {\n          const {\n            LatLngBounds\n          } = await APILoader.importLibrary('core');\n          result = new LatLngBounds();\n        }\n        result.union(bounds);\n      }\n    }\n    return result;\n  }\n}\nViewportManager.instances = new Map();","map":{"version":3,"names":["APILoader","ViewportManager","constructor","map","managedComponents","Set","getInstanceForMap","instances","has","set","get","register","component","add","updateViewport","unregister","delete","boundsUnion","getBoundsUnion","innerMap","fitBounds","result","bounds","getBounds","LatLngBounds","importLibrary","union","Map"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/route_building_blocks/viewport_manager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {APILoader} from '../api_loader/api_loader.js';\nimport {MapElement} from '../utils/googlemaps_types.js';\n\ntype LatLngBounds = google.maps.LatLngBounds;\n\n/**\n * Interface for components that occupy an area on the map in LatLng space, and\n * can be managed by the `ViewportManager`.\n */\nexport interface LatLngBounded {\n  /**\n   * Returns the `LatLngBounds` of the component that should be included in the\n   * map's viewport, or `null` if the component should be ignored.\n   */\n  getBounds(): google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral|null;\n}\n\n/**\n * Manages a map's viewport to fit the bounds of one or several `LatLngBounded`\n * components.\n */\nexport class ViewportManager {\n  constructor(readonly map: MapElement) {}\n\n  private static readonly instances = new Map<MapElement, ViewportManager>();\n\n  /**\n   * Returns the `ViewportManager` instance for the given `MapElement`,\n   * constructing one if none exists already. Each `MapElement` will have only\n   * one associated `ViewportManager` instance.\n   */\n  static getInstanceForMap(map: MapElement) {\n    if (!ViewportManager.instances.has(map)) {\n      ViewportManager.instances.set(map, new ViewportManager(map));\n    }\n    return ViewportManager.instances.get(map)!;\n  }\n\n  private readonly managedComponents = new Set<LatLngBounded>();\n\n  /**\n   * Registers a `LatLngBounded` component to be included in the viewport.\n   * Triggers an `updateViewport()` if the component was not already registered.\n   */\n  async register(component: LatLngBounded) {\n    if (!this.managedComponents.has(component)) {\n      this.managedComponents.add(component);\n      await this.updateViewport();\n    }\n  }\n\n  /**\n   * If the given `LatLngBounded` component is registered, unregisters it and\n   * triggers an `updateViewport()`.\n   */\n  async unregister(component: LatLngBounded) {\n    if (this.managedComponents.has(component)) {\n      this.managedComponents.delete(component);\n      await this.updateViewport();\n    }\n  }\n\n  /**\n   * Updates the map's viewport to fit all registered `LatLngBounded`\n   * components.\n   */\n  async updateViewport() {\n    const boundsUnion = await this.getBoundsUnion();\n    if (boundsUnion) {\n      this.map.innerMap.fitBounds(boundsUnion);\n    }\n  }\n\n  private async getBoundsUnion(): Promise<LatLngBounds|null> {\n    let result: LatLngBounds|null = null;\n    for (const component of this.managedComponents) {\n      const bounds = component.getBounds();\n      if (bounds) {\n        if (!result) {\n          const {LatLngBounds} =\n              await APILoader.importLibrary('core') as typeof google.maps;\n          result = new LatLngBounds();\n        }\n        result.union(bounds);\n      }\n    }\n    return result;\n  }\n}\n"],"mappings":"AAAA;;;;;AAMA,SAAQA,SAAS,QAAO,6BAA6B;AAiBrD;;;;AAIA,OAAM,MAAOC,eAAe;EAC1BC,YAAqBC,GAAe;IAAf,KAAAA,GAAG,GAAHA,GAAG;IAgBP,KAAAC,iBAAiB,GAAG,IAAIC,GAAG,EAAiB;EAhBtB;EAIvC;;;;;EAKA,OAAOC,iBAAiBA,CAACH,GAAe;IACtC,IAAI,CAACF,eAAe,CAACM,SAAS,CAACC,GAAG,CAACL,GAAG,CAAC,EAAE;MACvCF,eAAe,CAACM,SAAS,CAACE,GAAG,CAACN,GAAG,EAAE,IAAIF,eAAe,CAACE,GAAG,CAAC,CAAC;;IAE9D,OAAOF,eAAe,CAACM,SAAS,CAACG,GAAG,CAACP,GAAG,CAAE;EAC5C;EAIA;;;;EAIA,MAAMQ,QAAQA,CAACC,SAAwB;IACrC,IAAI,CAAC,IAAI,CAACR,iBAAiB,CAACI,GAAG,CAACI,SAAS,CAAC,EAAE;MAC1C,IAAI,CAACR,iBAAiB,CAACS,GAAG,CAACD,SAAS,CAAC;MACrC,MAAM,IAAI,CAACE,cAAc,EAAE;;EAE/B;EAEA;;;;EAIA,MAAMC,UAAUA,CAACH,SAAwB;IACvC,IAAI,IAAI,CAACR,iBAAiB,CAACI,GAAG,CAACI,SAAS,CAAC,EAAE;MACzC,IAAI,CAACR,iBAAiB,CAACY,MAAM,CAACJ,SAAS,CAAC;MACxC,MAAM,IAAI,CAACE,cAAc,EAAE;;EAE/B;EAEA;;;;EAIA,MAAMA,cAAcA,CAAA;IAClB,MAAMG,WAAW,GAAG,MAAM,IAAI,CAACC,cAAc,EAAE;IAC/C,IAAID,WAAW,EAAE;MACf,IAAI,CAACd,GAAG,CAACgB,QAAQ,CAACC,SAAS,CAACH,WAAW,CAAC;;EAE5C;EAEQ,MAAMC,cAAcA,CAAA;IAC1B,IAAIG,MAAM,GAAsB,IAAI;IACpC,KAAK,MAAMT,SAAS,IAAI,IAAI,CAACR,iBAAiB,EAAE;MAC9C,MAAMkB,MAAM,GAAGV,SAAS,CAACW,SAAS,EAAE;MACpC,IAAID,MAAM,EAAE;QACV,IAAI,CAACD,MAAM,EAAE;UACX,MAAM;YAACG;UAAY,CAAC,GAChB,MAAMxB,SAAS,CAACyB,aAAa,CAAC,MAAM,CAAuB;UAC/DJ,MAAM,GAAG,IAAIG,YAAY,EAAE;;QAE7BH,MAAM,CAACK,KAAK,CAACJ,MAAM,CAAC;;;IAGxB,OAAOD,MAAM;EACf;;AA/DwBpB,eAAA,CAAAM,SAAS,GAAG,IAAIoB,GAAG,EAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}