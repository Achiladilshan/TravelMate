{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport { customElement, property } from 'lit/decorators.js';\nimport { APILoader } from '../../api_loader/api_loader.js';\nimport { Deferred } from '../../utils/deferred.js';\nimport { MapController } from '../map_controller.js';\nimport { RouteDataConsumer } from '../route_data_consumer.js';\nconst POLYLINE_OPTIONS_PROPS = ['strokeColor', 'strokeWeight', 'strokeOpacity', 'zIndex', 'invisible'];\n/**\n * Renders a polyline indicating the path of a route.\n */\nlet RoutePolyline = class RoutePolyline extends RouteDataConsumer {\n  /**\n   * The inner `google.maps.Polyline` from the Maps JS API. This value is set\n   * once `innerPolylinePromise` is resolved.\n   */\n  get innerPolyline() {\n    return this.innerPolylineDeferred.value;\n  }\n  /**\n   * Resolves to the inner polyline when it's ready. It might not be ready\n   * immediately because the `Polyline` class is loaded asynchronously from\n   * the Maps JS API.\n   */\n  get innerPolylinePromise() {\n    return this.innerPolylineDeferred.promise;\n  }\n  constructor() {\n    super();\n    /**\n     * Whether or not to automatically adjust the map's viewport to include the\n     * polyline.\n     */\n    this.fitInViewport = false;\n    /**\n     * Whether or not the polyline is invisible or visible on the map.\n     */\n    this.invisible = false;\n    this.innerPolylineDeferred = new Deferred();\n    this.mapController = new MapController(this);\n    this.initPolyline();\n  }\n  async initPolyline() {\n    const {\n      Polyline\n    } = await APILoader.importLibrary('maps', this);\n    const polyline = new Polyline();\n    this.innerPolylineDeferred.resolve(polyline);\n  }\n  async connectedCallback() {\n    super.connectedCallback();\n    const polyline = await this.innerPolylinePromise;\n    const map = await this.mapController.mapPromise;\n    // Make sure the component hasn't been disconnected while awaiting\n    if (this.isConnected) {\n      polyline.setMap(map);\n      await this.mapController.viewportManager.register(this);\n    }\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.mapController.viewportManager?.unregister(this);\n    this.innerPolyline?.setMap(null);\n  }\n  updated(changedProperties) {\n    if (POLYLINE_OPTIONS_PROPS.some(prop => changedProperties.has(prop))) {\n      this.setInnerPolylineOptions();\n    }\n    if (changedProperties.has('route') || changedProperties.has('contextRoute')) {\n      this.updatePath();\n    }\n    if (changedProperties.has('fitInViewport') || this.fitInViewport && (changedProperties.has('route') || changedProperties.has('contextRoute'))) {\n      this.mapController.viewportManager?.updateViewport();\n    }\n  }\n  /**\n   * Returns the `LatLngBounds` of the polyline that should be included in the\n   * map's viewport, for use by the `ViewportManager`.\n   * @ignore\n   */\n  getBounds() {\n    if (!this.fitInViewport) return null;\n    return this.getRoute()?.bounds ?? null;\n  }\n  async setInnerPolylineOptions() {\n    const options = {\n      strokeColor: this.strokeColor,\n      strokeWeight: this.strokeWeight,\n      zIndex: this.zIndex,\n      strokeOpacity: this.strokeOpacity,\n      visible: !this.invisible\n    };\n    const polyline = await this.innerPolylinePromise;\n    polyline.setOptions(options);\n  }\n  async updatePath() {\n    let path = [];\n    const route = this.getRoute();\n    if (route) {\n      for (const leg of route.legs) {\n        for (const step of leg.steps) {\n          path = path.concat(step.path);\n        }\n      }\n    }\n    const polyline = await this.innerPolylinePromise;\n    polyline.setPath(path);\n  }\n};\n__decorate([property({\n  attribute: 'fit-in-viewport',\n  type: Boolean,\n  reflect: true\n}), __metadata(\"design:type\", Object)], RoutePolyline.prototype, \"fitInViewport\", void 0);\n__decorate([property({\n  attribute: 'invisible',\n  type: Boolean,\n  reflect: true\n}), __metadata(\"design:type\", Object)], RoutePolyline.prototype, \"invisible\", void 0);\n__decorate([property({\n  attribute: 'stroke-color',\n  type: String,\n  reflect: true\n}), __metadata(\"design:type\", String)], RoutePolyline.prototype, \"strokeColor\", void 0);\n__decorate([property({\n  attribute: 'stroke-opacity',\n  type: Number,\n  reflect: true\n}), __metadata(\"design:type\", Number)], RoutePolyline.prototype, \"strokeOpacity\", void 0);\n__decorate([property({\n  attribute: 'stroke-weight',\n  type: Number,\n  reflect: true\n}), __metadata(\"design:type\", Number)], RoutePolyline.prototype, \"strokeWeight\", void 0);\n__decorate([property({\n  attribute: 'z-index',\n  type: Number,\n  reflect: true\n}), __metadata(\"design:type\", Number)], RoutePolyline.prototype, \"zIndex\", void 0);\nRoutePolyline = __decorate([customElement('gmpx-route-polyline'), __metadata(\"design:paramtypes\", [])], RoutePolyline);\nexport { RoutePolyline };","map":{"version":3,"names":["customElement","property","APILoader","Deferred","MapController","RouteDataConsumer","POLYLINE_OPTIONS_PROPS","RoutePolyline","innerPolyline","innerPolylineDeferred","value","innerPolylinePromise","promise","constructor","fitInViewport","invisible","mapController","initPolyline","Polyline","importLibrary","polyline","resolve","connectedCallback","map","mapPromise","isConnected","setMap","viewportManager","register","disconnectedCallback","unregister","updated","changedProperties","some","prop","has","setInnerPolylineOptions","updatePath","updateViewport","getBounds","getRoute","bounds","options","strokeColor","strokeWeight","zIndex","strokeOpacity","visible","setOptions","path","route","leg","legs","step","steps","concat","setPath","__decorate","attribute","type","Boolean","reflect","String","Number"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/route_building_blocks/route_polyline/route_polyline.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {PropertyValues} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\nimport {APILoader} from '../../api_loader/api_loader.js';\nimport {Deferred} from '../../utils/deferred.js';\nimport {MapController} from '../map_controller.js';\nimport {RouteDataConsumer} from '../route_data_consumer.js';\nimport {LatLngBounded} from '../viewport_manager.js';\n\nconst POLYLINE_OPTIONS_PROPS = [\n  'strokeColor',\n  'strokeWeight',\n  'strokeOpacity',\n  'zIndex',\n  'invisible',\n] as const;\n\n/**\n * Renders a polyline indicating the path of a route.\n */\n@customElement('gmpx-route-polyline')\nexport class RoutePolyline extends RouteDataConsumer implements LatLngBounded {\n  /**\n   * Whether or not to automatically adjust the map's viewport to include the\n   * polyline.\n   */\n  @property({attribute: 'fit-in-viewport', type: Boolean, reflect: true})\n  fitInViewport = false;\n\n  /**\n   * Whether or not the polyline is invisible or visible on the map.\n   */\n  @property({attribute: 'invisible', type: Boolean, reflect: true})\n  invisible = false;\n\n  /**\n   * Stroke color of the polyline. All CSS3 colors are supported except for\n   * extended named colors.\n   */\n  @property({attribute: 'stroke-color', type: String, reflect: true})\n  strokeColor?: string;\n\n  /**\n   * The stroke opacity of the polyline between 0.0 and 1.0.\n   */\n  @property({attribute: 'stroke-opacity', type: Number, reflect: true})\n  strokeOpacity?: number;\n\n  /**\n   * The stroke width of the polyline in pixels.\n   */\n  @property({attribute: 'stroke-weight', type: Number, reflect: true})\n  strokeWeight?: number;\n\n  /**\n   * The z-index of the polyline compared to other polys.\n   */\n  @property({attribute: 'z-index', type: Number, reflect: true})\n  zIndex?: number;\n\n  private readonly innerPolylineDeferred = new Deferred<google.maps.Polyline>();\n\n  /**\n   * The inner `google.maps.Polyline` from the Maps JS API. This value is set\n   * once `innerPolylinePromise` is resolved.\n   */\n  get innerPolyline(): google.maps.Polyline|undefined {\n    return this.innerPolylineDeferred.value;\n  }\n\n  /**\n   * Resolves to the inner polyline when it's ready. It might not be ready\n   * immediately because the `Polyline` class is loaded asynchronously from\n   * the Maps JS API.\n   */\n  get innerPolylinePromise(): Promise<google.maps.Polyline> {\n    return this.innerPolylineDeferred.promise;\n  }\n\n  private readonly mapController = new MapController(this);\n\n  constructor() {\n    super();\n    this.initPolyline();\n  }\n\n  private async initPolyline() {\n    const {Polyline} =\n        await APILoader.importLibrary('maps', this) as typeof google.maps;\n    const polyline = new Polyline();\n    this.innerPolylineDeferred.resolve(polyline);\n  }\n\n  override async connectedCallback() {\n    super.connectedCallback();\n    const polyline = await this.innerPolylinePromise;\n    const map = await this.mapController.mapPromise;\n    // Make sure the component hasn't been disconnected while awaiting\n    if (this.isConnected) {\n      polyline.setMap(map);\n      await this.mapController.viewportManager!.register(this);\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.mapController.viewportManager?.unregister(this);\n    this.innerPolyline?.setMap(null);\n  }\n\n  protected override updated(changedProperties: PropertyValues<this>) {\n    if (POLYLINE_OPTIONS_PROPS.some((prop) => changedProperties.has(prop))) {\n      this.setInnerPolylineOptions();\n    }\n    if (changedProperties.has('route') ||\n        changedProperties.has('contextRoute')) {\n      this.updatePath();\n    }\n    if (changedProperties.has('fitInViewport') ||\n        (this.fitInViewport &&\n         (changedProperties.has('route') ||\n          changedProperties.has('contextRoute')))) {\n      this.mapController.viewportManager?.updateViewport();\n    }\n  }\n\n  /**\n   * Returns the `LatLngBounds` of the polyline that should be included in the\n   * map's viewport, for use by the `ViewportManager`.\n   * @ignore\n   */\n  getBounds(): google.maps.LatLngBounds|null {\n    if (!this.fitInViewport) return null;\n    return this.getRoute()?.bounds ?? null;\n  }\n\n  private async setInnerPolylineOptions() {\n    const options = {\n      strokeColor: this.strokeColor,\n      strokeWeight: this.strokeWeight,\n      zIndex: this.zIndex,\n      strokeOpacity: this.strokeOpacity,\n      visible: !this.invisible,\n    };\n    const polyline = await this.innerPolylinePromise;\n    polyline.setOptions(options);\n  }\n\n  private async updatePath() {\n    let path: google.maps.LatLng[] = [];\n    const route = this.getRoute();\n    if (route) {\n      for (const leg of route.legs) {\n        for (const step of leg.steps) {\n          path = path.concat(step.path);\n        }\n      }\n    }\n    const polyline = await this.innerPolylinePromise;\n    polyline.setPath(path);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-route-polyline': RoutePolyline;\n  }\n}\n"],"mappings":"AAAA;;;;;;AAOA,SAAQA,aAAa,EAAEC,QAAQ,QAAO,mBAAmB;AAEzD,SAAQC,SAAS,QAAO,gCAAgC;AACxD,SAAQC,QAAQ,QAAO,yBAAyB;AAChD,SAAQC,aAAa,QAAO,sBAAsB;AAClD,SAAQC,iBAAiB,QAAO,2BAA2B;AAG3D,MAAMC,sBAAsB,GAAG,CAC7B,aAAa,EACb,cAAc,EACd,eAAe,EACf,QAAQ,EACR,WAAW,CACH;AAEV;;;AAIO,IAAMC,aAAa,GAAnB,MAAMA,aAAc,SAAQF,iBAAiB;EAyClD;;;;EAIA,IAAIG,aAAaA,CAAA;IACf,OAAO,IAAI,CAACC,qBAAqB,CAACC,KAAK;EACzC;EAEA;;;;;EAKA,IAAIC,oBAAoBA,CAAA;IACtB,OAAO,IAAI,CAACF,qBAAqB,CAACG,OAAO;EAC3C;EAIAC,YAAA;IACE,KAAK,EAAE;IA5DT;;;;IAKA,KAAAC,aAAa,GAAG,KAAK;IAErB;;;IAIA,KAAAC,SAAS,GAAG,KAAK;IA2BA,KAAAN,qBAAqB,GAAG,IAAIN,QAAQ,EAAwB;IAmB5D,KAAAa,aAAa,GAAG,IAAIZ,aAAa,CAAC,IAAI,CAAC;IAItD,IAAI,CAACa,YAAY,EAAE;EACrB;EAEQ,MAAMA,YAAYA,CAAA;IACxB,MAAM;MAACC;IAAQ,CAAC,GACZ,MAAMhB,SAAS,CAACiB,aAAa,CAAC,MAAM,EAAE,IAAI,CAAuB;IACrE,MAAMC,QAAQ,GAAG,IAAIF,QAAQ,EAAE;IAC/B,IAAI,CAACT,qBAAqB,CAACY,OAAO,CAACD,QAAQ,CAAC;EAC9C;EAES,MAAME,iBAAiBA,CAAA;IAC9B,KAAK,CAACA,iBAAiB,EAAE;IACzB,MAAMF,QAAQ,GAAG,MAAM,IAAI,CAACT,oBAAoB;IAChD,MAAMY,GAAG,GAAG,MAAM,IAAI,CAACP,aAAa,CAACQ,UAAU;IAC/C;IACA,IAAI,IAAI,CAACC,WAAW,EAAE;MACpBL,QAAQ,CAACM,MAAM,CAACH,GAAG,CAAC;MACpB,MAAM,IAAI,CAACP,aAAa,CAACW,eAAgB,CAACC,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EAESC,oBAAoBA,CAAA;IAC3B,KAAK,CAACA,oBAAoB,EAAE;IAC5B,IAAI,CAACb,aAAa,CAACW,eAAe,EAAEG,UAAU,CAAC,IAAI,CAAC;IACpD,IAAI,CAACtB,aAAa,EAAEkB,MAAM,CAAC,IAAI,CAAC;EAClC;EAEmBK,OAAOA,CAACC,iBAAuC;IAChE,IAAI1B,sBAAsB,CAAC2B,IAAI,CAAEC,IAAI,IAAKF,iBAAiB,CAACG,GAAG,CAACD,IAAI,CAAC,CAAC,EAAE;MACtE,IAAI,CAACE,uBAAuB,EAAE;;IAEhC,IAAIJ,iBAAiB,CAACG,GAAG,CAAC,OAAO,CAAC,IAC9BH,iBAAiB,CAACG,GAAG,CAAC,cAAc,CAAC,EAAE;MACzC,IAAI,CAACE,UAAU,EAAE;;IAEnB,IAAIL,iBAAiB,CAACG,GAAG,CAAC,eAAe,CAAC,IACrC,IAAI,CAACrB,aAAa,KACjBkB,iBAAiB,CAACG,GAAG,CAAC,OAAO,CAAC,IAC9BH,iBAAiB,CAACG,GAAG,CAAC,cAAc,CAAC,CAAE,EAAE;MAC7C,IAAI,CAACnB,aAAa,CAACW,eAAe,EAAEW,cAAc,EAAE;;EAExD;EAEA;;;;;EAKAC,SAASA,CAAA;IACP,IAAI,CAAC,IAAI,CAACzB,aAAa,EAAE,OAAO,IAAI;IACpC,OAAO,IAAI,CAAC0B,QAAQ,EAAE,EAAEC,MAAM,IAAI,IAAI;EACxC;EAEQ,MAAML,uBAAuBA,CAAA;IACnC,MAAMM,OAAO,GAAG;MACdC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,OAAO,EAAE,CAAC,IAAI,CAAChC;KAChB;IACD,MAAMK,QAAQ,GAAG,MAAM,IAAI,CAACT,oBAAoB;IAChDS,QAAQ,CAAC4B,UAAU,CAACN,OAAO,CAAC;EAC9B;EAEQ,MAAML,UAAUA,CAAA;IACtB,IAAIY,IAAI,GAAyB,EAAE;IACnC,MAAMC,KAAK,GAAG,IAAI,CAACV,QAAQ,EAAE;IAC7B,IAAIU,KAAK,EAAE;MACT,KAAK,MAAMC,GAAG,IAAID,KAAK,CAACE,IAAI,EAAE;QAC5B,KAAK,MAAMC,IAAI,IAAIF,GAAG,CAACG,KAAK,EAAE;UAC5BL,IAAI,GAAGA,IAAI,CAACM,MAAM,CAACF,IAAI,CAACJ,IAAI,CAAC;;;;IAInC,MAAM7B,QAAQ,GAAG,MAAM,IAAI,CAACT,oBAAoB;IAChDS,QAAQ,CAACoC,OAAO,CAACP,IAAI,CAAC;EACxB;CACD;AAtICQ,UAAA,EADCxD,QAAQ,CAAC;EAACyD,SAAS,EAAE,iBAAiB;EAAEC,IAAI,EAAEC,OAAO;EAAEC,OAAO,EAAE;AAAI,CAAC,CAAC,E,qFACjD;AAMtBJ,UAAA,EADCxD,QAAQ,CAAC;EAACyD,SAAS,EAAE,WAAW;EAAEC,IAAI,EAAEC,OAAO;EAAEC,OAAO,EAAE;AAAI,CAAC,CAAC,E,iFAC/C;AAOlBJ,UAAA,EADCxD,QAAQ,CAAC;EAACyD,SAAS,EAAE,cAAc;EAAEC,IAAI,EAAEG,MAAM;EAAED,OAAO,EAAE;AAAI,CAAC,CAAC,E,mFAC9C;AAMrBJ,UAAA,EADCxD,QAAQ,CAAC;EAACyD,SAAS,EAAE,gBAAgB;EAAEC,IAAI,EAAEI,MAAM;EAAEF,OAAO,EAAE;AAAI,CAAC,CAAC,E,qFAC9C;AAMvBJ,UAAA,EADCxD,QAAQ,CAAC;EAACyD,SAAS,EAAE,eAAe;EAAEC,IAAI,EAAEI,MAAM;EAAEF,OAAO,EAAE;AAAI,CAAC,CAAC,E,oFAC9C;AAMtBJ,UAAA,EADCxD,QAAQ,CAAC;EAACyD,SAAS,EAAE,SAAS;EAAEC,IAAI,EAAEI,MAAM;EAAEF,OAAO,EAAE;AAAI,CAAC,CAAC,E,8EAC9C;AArCLtD,aAAa,GAAAkD,UAAA,EADzBzD,aAAa,CAAC,qBAAqB,CAAC,E,sCACxBO,aAAa,CA4IzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}