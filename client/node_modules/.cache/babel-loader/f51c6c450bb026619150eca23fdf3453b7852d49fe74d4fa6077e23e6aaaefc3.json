{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport '../../icon_button/icon_button.js';\nimport { html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { makeWaypoint } from '../../utils/place_utils.js';\nimport { PlaceDataConsumer } from '../place_data_consumer.js';\n/**\n * Creates a Google Maps URL for directions from origin to destination\n * (https://developers.google.com/maps/documentation/urls#directions-action).\n */\nfunction buildMapsDirectionsURL(origin, destination) {\n  let url = 'https://www.google.com/maps/dir/?api=1';\n  if (origin) {\n    url = appendEncodedWaypointURLParams(url, 'origin', origin);\n  }\n  if (destination) {\n    url = appendEncodedWaypointURLParams(url, 'destination', destination);\n  }\n  return url;\n}\n/**\n * Appends encoded URL parameters to a Google Maps Directions URL based on\n * waypoint information. Always includes a Place ID if it is specified by the\n * waypoint. Describes waypoint by query if available, or \"lat,lng\" otherwise.\n */\nfunction appendEncodedWaypointURLParams(url, side, waypoint) {\n  if (waypoint.placeId) {\n    url += `&${side}_place_id=${waypoint.placeId}`;\n  }\n  if (waypoint.query) {\n    url += `&${side}=${encodeURIComponent(waypoint.query)}`;\n  } else if (waypoint.location) {\n    url += `&${side}=${waypoint.location.lat},${waypoint.location.lng}`;\n  } else if (waypoint.placeId) {\n    // A Place ID can be used as an origin/destination, but it *must* be\n    // accompanied by a query.\n    url += `&${side}=${encodeURIComponent('Selected Place')}`;\n  }\n  return url;\n}\n/**\n * Component that opens a new tab with directions to this place in Google Maps.\n *\n * @slot - Content to display as the button’s label.\n *\n * @cssproperty [--gmpx-color-primary] - Button text and outline color in the\n * `outlined` variant, or background color in `filled` variant.\n * @cssproperty [--gmpx-color-on-primary] - Button text color in `filled`\n * variant.\n * @cssproperty [--gmpx-font-size-base] - Font size for the button.\n * @cssproperty [--gmpx-font-family-headings] - Font face for the button, except\n * for condensed mode.\n * @cssproperty [--gmpx-font-family-base] - Font face used when the button is in\n * condensed mode.\n */\nlet PlaceDirectionsButton = class PlaceDirectionsButton extends PlaceDataConsumer {\n  constructor() {\n    super(...arguments);\n    /**\n     * A description that gets read by assistive devices. In the case of icon-only\n     * buttons, you should always include an ARIA label for optimal accessibility.\n     */\n    this.ariaLabel = null;\n    /**\n     * Whether to render the button in a condensed layout, where the label appears\n     * below the icon.\n     */\n    this.condensed = false;\n    /** Get directions from destination to origin instead. */\n    this.reversed = false;\n    /** Specifies the display style of the button. */\n    this.variant = 'outlined';\n  }\n  render() {\n    return html`\n      <gmpx-icon-button\n        .ariaLabel=${this.ariaLabel}\n        .condensed=${this.condensed}\n        .href=${this.getHref()}\n        icon=\"directions\"\n        .variant=${this.variant}\n      >\n        <slot></slot>\n      </gmpx-icon-button>\n    `;\n  }\n  updated() {\n    // If the aria-label attribute is set, hide it from the a11y tree. Otherwise\n    // the component and its shadow DOM content show up as duplicate nodes with\n    // the same aria-label.\n    this.role = this.ariaLabel != null ? 'none' : null;\n  }\n  /** @ignore */\n  getRequiredFields() {\n    return ['displayName', 'formattedAddress', 'location'];\n  }\n  placeHasData(place) {\n    // A Place requires a Place ID, which is enough to generate a link.\n    return true;\n  }\n  getHref() {\n    const place = this.getPlace();\n    const origin = this.reversed ? place : this.origin;\n    const destination = this.reversed ? this.origin : place;\n    return buildMapsDirectionsURL(origin ? makeWaypoint(origin) : undefined, destination ? makeWaypoint(destination) : undefined);\n  }\n};\n// https://lit.dev/docs/components/shadow-dom/#setting-shadowrootoptions\n/** @ignore */\nPlaceDirectionsButton.shadowRootOptions = {\n  ...PlaceDataConsumer.shadowRootOptions,\n  delegatesFocus: true\n};\n__decorate([property({\n  attribute: 'aria-label',\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", Object)], PlaceDirectionsButton.prototype, \"ariaLabel\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n}), __metadata(\"design:type\", Object)], PlaceDirectionsButton.prototype, \"condensed\", void 0);\n__decorate([property({\n  attribute: false\n}), __metadata(\"design:type\", Object)], PlaceDirectionsButton.prototype, \"origin\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n}), __metadata(\"design:type\", Object)], PlaceDirectionsButton.prototype, \"reversed\", void 0);\n__decorate([property({\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], PlaceDirectionsButton.prototype, \"variant\", void 0);\nPlaceDirectionsButton = __decorate([customElement('gmpx-place-directions-button')], PlaceDirectionsButton);\nexport { PlaceDirectionsButton };","map":{"version":3,"names":["html","customElement","property","makeWaypoint","PlaceDataConsumer","buildMapsDirectionsURL","origin","destination","url","appendEncodedWaypointURLParams","side","waypoint","placeId","query","encodeURIComponent","location","lat","lng","PlaceDirectionsButton","constructor","ariaLabel","condensed","reversed","variant","render","getHref","updated","role","getRequiredFields","placeHasData","place","getPlace","undefined","shadowRootOptions","delegatesFocus","__decorate","attribute","reflect","type","String","Boolean"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/place_building_blocks/place_directions_button/place_directions_button.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../icon_button/icon_button.js';\n\nimport {html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\nimport type {Place} from '../../utils/googlemaps_types.js';\nimport {makeWaypoint, WaypointInfo} from '../../utils/place_utils.js';\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\n\n\n/**\n * Creates a Google Maps URL for directions from origin to destination\n * (https://developers.google.com/maps/documentation/urls#directions-action).\n */\nfunction buildMapsDirectionsURL(\n    origin?: WaypointInfo, destination?: WaypointInfo): string {\n  let url = 'https://www.google.com/maps/dir/?api=1';\n  if (origin) {\n    url = appendEncodedWaypointURLParams(url, 'origin', origin);\n  }\n  if (destination) {\n    url = appendEncodedWaypointURLParams(url, 'destination', destination);\n  }\n  return url;\n}\n\n/**\n * Appends encoded URL parameters to a Google Maps Directions URL based on\n * waypoint information. Always includes a Place ID if it is specified by the\n * waypoint. Describes waypoint by query if available, or \"lat,lng\" otherwise.\n */\nfunction appendEncodedWaypointURLParams(\n    url: string, side: 'origin'|'destination', waypoint: WaypointInfo): string {\n  if (waypoint.placeId) {\n    url += `&${side}_place_id=${waypoint.placeId}`;\n  }\n  if (waypoint.query) {\n    url += `&${side}=${encodeURIComponent(waypoint.query)}`;\n  } else if (waypoint.location) {\n    url += `&${side}=${waypoint.location.lat},${waypoint.location.lng}`;\n  } else if (waypoint.placeId) {\n    // A Place ID can be used as an origin/destination, but it *must* be\n    // accompanied by a query.\n    url += `&${side}=${encodeURIComponent('Selected Place')}`;\n  }\n  return url;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-directions-button': PlaceDirectionsButton;\n  }\n}\n\n/**\n * Component that opens a new tab with directions to this place in Google Maps.\n *\n * @slot - Content to display as the button’s label.\n *\n * @cssproperty [--gmpx-color-primary] - Button text and outline color in the\n * `outlined` variant, or background color in `filled` variant.\n * @cssproperty [--gmpx-color-on-primary] - Button text color in `filled`\n * variant.\n * @cssproperty [--gmpx-font-size-base] - Font size for the button.\n * @cssproperty [--gmpx-font-family-headings] - Font face for the button, except\n * for condensed mode.\n * @cssproperty [--gmpx-font-family-base] - Font face used when the button is in\n * condensed mode.\n */\n@customElement('gmpx-place-directions-button')\nexport class PlaceDirectionsButton extends PlaceDataConsumer {\n  // https://lit.dev/docs/components/shadow-dom/#setting-shadowrootoptions\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...PlaceDataConsumer.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * A description that gets read by assistive devices. In the case of icon-only\n   * buttons, you should always include an ARIA label for optimal accessibility.\n   */\n  @property({attribute: 'aria-label', reflect: true, type: String})\n  override ariaLabel = null;\n\n  /**\n   * Whether to render the button in a condensed layout, where the label appears\n   * below the icon.\n   */\n  @property({reflect: true, type: Boolean}) condensed = false;\n\n  /**\n   * Optionally specify the starting location or Place. Otherwise Google Maps\n   * will ask for or estimate the user’s starting location.\n   */\n  @property({attribute: false})\n  origin?: google.maps.LatLng|google.maps.LatLngLiteral|Place;\n\n  /** Get directions from destination to origin instead. */\n  @property({reflect: true, type: Boolean}) reversed = false;\n\n  /** Specifies the display style of the button. */\n  @property({reflect: true, type: String})\n  variant: 'outlined'|'filled' = 'outlined';\n\n  protected override render() {\n    return html`\n      <gmpx-icon-button\n        .ariaLabel=${this.ariaLabel}\n        .condensed=${this.condensed}\n        .href=${this.getHref()}\n        icon=\"directions\"\n        .variant=${this.variant}\n      >\n        <slot></slot>\n      </gmpx-icon-button>\n    `;\n  }\n\n  protected override updated() {\n    // If the aria-label attribute is set, hide it from the a11y tree. Otherwise\n    // the component and its shadow DOM content show up as duplicate nodes with\n    // the same aria-label.\n    this.role = this.ariaLabel != null ? 'none' : null;\n  }\n\n  /** @ignore */\n  getRequiredFields(): Array<keyof Place> {\n    return ['displayName', 'formattedAddress', 'location'];\n  }\n\n  protected override placeHasData(place: Place): boolean {\n    // A Place requires a Place ID, which is enough to generate a link.\n    return true;\n  }\n\n  private getHref(): string {\n    const place = this.getPlace();\n    const origin = this.reversed ? place : this.origin;\n    const destination = this.reversed ? this.origin : place;\n    return buildMapsDirectionsURL(\n        origin ? makeWaypoint(origin) : undefined,\n        destination ? makeWaypoint(destination) : undefined);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}