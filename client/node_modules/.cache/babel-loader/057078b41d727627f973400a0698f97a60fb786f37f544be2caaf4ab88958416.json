{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport { css, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { cache } from 'lit/directives/cache.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { BaseComponent } from '../base/base_component.js';\nimport { SlotValidationController } from '../base/slot_validation_controller.js';\n/**\n * The split layout component allows you to display custom HTML information in a\n * responsive panel view alongside main content. In a narrow container, such as\n * a mobile viewport, the panel will be shown below the main content.\n *\n * ![](./doc_src/split-layout.png)\n *\n * **To use this component, you'll need to specify `slot=\"main\"` or\n * `slot=\"fixed\"` on its children.** Read more on using slots\n * [here](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots#adding_flexibility_with_slots).\n *\n * @slot main - Main content.\n * @slot fixed - Content to be slotted inside the panel with fixed width/height.\n * This panel is displayed on the side of main content when the component has\n * sufficient width, or below main content otherwise.\n *\n * @cssproperty [--gmpx-fixed-panel-width-row-layout=320px] - Controls the fixed\n * panel width when the component is displayed in row direction. Main content\n * width will adjust automatically to fill remaining space.\n * @cssproperty [--gmpx-fixed-panel-height-column-layout=50%] - Controls the\n * fixed panel height when the component is displayed in column direction. Main\n * content height will adjust automatically to fill remaining space.\n */\nlet SplitLayout = class SplitLayout extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    /**\n     * By default, the fixed panel is rendered below the main content when layout\n     * is in column direction. If this attribute is specified, then the fixed\n     * panel will appear above the main content instead.\n     */\n    this.columnReverse = false;\n    /**\n     * When the component’s width in pixels is less than this amount, it displays\n     * in a mobile-friendly column layout instead.\n     */\n    this.rowLayoutMinWidth = 640;\n    /**\n     * By default, the fixed panel is rendered before the main content when layout\n     * is in row direction (left for LTR and vice versa). If this attribute is\n     * specified, then the fixed panel will appear after the main content instead\n     * (right for LTR and vice versa).\n     */\n    this.rowReverse = false;\n    this.hasRowLayout = true;\n    this.slotValidator = new SlotValidationController(this, this.logger, ['main', 'fixed']);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.resizeObserver = new ResizeObserver(() => void this.updateLayout());\n    this.resizeObserver.observe(this);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.resizeObserver?.disconnect();\n  }\n  willUpdate() {\n    this.updateLayout();\n  }\n  render() {\n    const fixedContainer = html`\n      <div class=\"fixed-container\">\n        <slot name=\"fixed\"></slot>\n      </div>\n    `;\n    const mainContainer = html`\n      <div class=\"main-container\">\n        <slot name=\"main\"></slot>\n      </div>\n    `;\n    return html`\n    <div class=\"layout ${classMap({\n      'column': !this.hasRowLayout,\n      'row': this.hasRowLayout\n    })}\">\n      ${cache(this.hasRowLayout && this.rowReverse || !this.hasRowLayout && !this.columnReverse ? html`${mainContainer}${fixedContainer}` : html`${fixedContainer}${mainContainer}`)}\n    </div>\n    `;\n  }\n  updateLayout() {\n    this.hasRowLayout = this.clientWidth >= this.rowLayoutMinWidth;\n  }\n};\nSplitLayout.styles = css`\n    :host(:not([hidden])) {\n      display: block;\n      height: 100%;\n    }\n\n    .layout {\n      display: flex;\n      height: 100%;\n      width: 100%;\n    }\n\n    .layout.column {\n      flex-direction: column;\n    }\n\n    .layout.column .fixed-container {\n      height: var(--gmpx-fixed-panel-height-column-layout, 50%);\n    }\n\n    .layout.row {\n      flex-direction: row;\n    }\n\n    .layout.row .fixed-container {\n      width: var(--gmpx-fixed-panel-width-row-layout, 320px);\n    }\n\n    .fixed-container {\n      overflow: auto;\n      z-index: 1;\n    }\n\n    .main-container {\n      flex: 1;\n      overflow: auto;\n    }\n  `;\n__decorate([property({\n  attribute: 'column-reverse',\n  reflect: true,\n  type: Boolean\n}), __metadata(\"design:type\", Object)], SplitLayout.prototype, \"columnReverse\", void 0);\n__decorate([property({\n  attribute: 'row-layout-min-width',\n  reflect: true,\n  type: Number\n}), __metadata(\"design:type\", Object)], SplitLayout.prototype, \"rowLayoutMinWidth\", void 0);\n__decorate([property({\n  attribute: 'row-reverse',\n  reflect: true,\n  type: Boolean\n}), __metadata(\"design:type\", Object)], SplitLayout.prototype, \"rowReverse\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], SplitLayout.prototype, \"hasRowLayout\", void 0);\nSplitLayout = __decorate([customElement('gmpx-split-layout')], SplitLayout);\nexport { SplitLayout };","map":{"version":3,"names":["css","html","customElement","property","state","cache","classMap","BaseComponent","SlotValidationController","SplitLayout","constructor","columnReverse","rowLayoutMinWidth","rowReverse","hasRowLayout","slotValidator","logger","connectedCallback","resizeObserver","ResizeObserver","updateLayout","observe","disconnectedCallback","disconnect","willUpdate","render","fixedContainer","mainContainer","clientWidth","styles","__decorate","attribute","reflect","type","Boolean","Number"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/split_layout/split_layout.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {css, CSSResultGroup, html} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport {cache} from 'lit/directives/cache.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {BaseComponent} from '../base/base_component.js';\nimport {SlotValidationController} from '../base/slot_validation_controller.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-split-layout': SplitLayout;\n  }\n}\n\n/**\n * The split layout component allows you to display custom HTML information in a\n * responsive panel view alongside main content. In a narrow container, such as\n * a mobile viewport, the panel will be shown below the main content.\n *\n * ![](./doc_src/split-layout.png)\n *\n * **To use this component, you'll need to specify `slot=\"main\"` or\n * `slot=\"fixed\"` on its children.** Read more on using slots\n * [here](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots#adding_flexibility_with_slots).\n *\n * @slot main - Main content.\n * @slot fixed - Content to be slotted inside the panel with fixed width/height.\n * This panel is displayed on the side of main content when the component has\n * sufficient width, or below main content otherwise.\n *\n * @cssproperty [--gmpx-fixed-panel-width-row-layout=320px] - Controls the fixed\n * panel width when the component is displayed in row direction. Main content\n * width will adjust automatically to fill remaining space.\n * @cssproperty [--gmpx-fixed-panel-height-column-layout=50%] - Controls the\n * fixed panel height when the component is displayed in column direction. Main\n * content height will adjust automatically to fill remaining space.\n */\n@customElement('gmpx-split-layout')\nexport class SplitLayout extends BaseComponent {\n  static override styles: CSSResultGroup = css`\n    :host(:not([hidden])) {\n      display: block;\n      height: 100%;\n    }\n\n    .layout {\n      display: flex;\n      height: 100%;\n      width: 100%;\n    }\n\n    .layout.column {\n      flex-direction: column;\n    }\n\n    .layout.column .fixed-container {\n      height: var(--gmpx-fixed-panel-height-column-layout, 50%);\n    }\n\n    .layout.row {\n      flex-direction: row;\n    }\n\n    .layout.row .fixed-container {\n      width: var(--gmpx-fixed-panel-width-row-layout, 320px);\n    }\n\n    .fixed-container {\n      overflow: auto;\n      z-index: 1;\n    }\n\n    .main-container {\n      flex: 1;\n      overflow: auto;\n    }\n  `;\n\n  /**\n   * By default, the fixed panel is rendered below the main content when layout\n   * is in column direction. If this attribute is specified, then the fixed\n   * panel will appear above the main content instead.\n   */\n  @property({attribute: 'column-reverse', reflect: true, type: Boolean})\n  columnReverse = false;\n\n  /**\n   * When the component’s width in pixels is less than this amount, it displays\n   * in a mobile-friendly column layout instead.\n   */\n  @property({attribute: 'row-layout-min-width', reflect: true, type: Number})\n  rowLayoutMinWidth = 640;\n\n  /**\n   * By default, the fixed panel is rendered before the main content when layout\n   * is in row direction (left for LTR and vice versa). If this attribute is\n   * specified, then the fixed panel will appear after the main content instead\n   * (right for LTR and vice versa).\n   */\n  @property({attribute: 'row-reverse', reflect: true, type: Boolean})\n  rowReverse = false;\n\n  @state() private hasRowLayout = true;\n\n  protected slotValidator =\n      new SlotValidationController(this, this.logger, ['main', 'fixed']);\n\n  private resizeObserver?: ResizeObserver;\n\n  override connectedCallback() {\n    super.connectedCallback();\n    this.resizeObserver = new ResizeObserver(() => void this.updateLayout());\n    this.resizeObserver.observe(this);\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.resizeObserver?.disconnect();\n  }\n\n  protected override willUpdate() {\n    this.updateLayout();\n  }\n\n  protected override render() {\n    const fixedContainer = html`\n      <div class=\"fixed-container\">\n        <slot name=\"fixed\"></slot>\n      </div>\n    `;\n    const mainContainer = html`\n      <div class=\"main-container\">\n        <slot name=\"main\"></slot>\n      </div>\n    `;\n\n    return html`\n    <div class=\"layout ${classMap({\n      'column': !this.hasRowLayout,\n      'row': this.hasRowLayout,\n    })}\">\n      ${\n        cache(\n            (this.hasRowLayout && this.rowReverse) ||\n                    (!this.hasRowLayout && !this.columnReverse) ?\n                html`${mainContainer}${fixedContainer}` :\n                html`${fixedContainer}${mainContainer}`)}\n    </div>\n    `;\n  }\n\n  private updateLayout() {\n    this.hasRowLayout = this.clientWidth >= this.rowLayoutMinWidth;\n  }\n}\n"],"mappings":"AAAA;;;;;;AAMA,SAAQA,GAAG,EAAkBC,IAAI,QAAO,KAAK;AAC7C,SAAQC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAO,mBAAmB;AAChE,SAAQC,KAAK,QAAO,yBAAyB;AAC7C,SAAQC,QAAQ,QAAO,6BAA6B;AAEpD,SAAQC,aAAa,QAAO,2BAA2B;AACvD,SAAQC,wBAAwB,QAAO,uCAAuC;AAQ9E;;;;;;;;;;;;;;;;;;;;;;;AAwBO,IAAMC,WAAW,GAAjB,MAAMA,WAAY,SAAQF,aAAa;EAAvCG,YAAA;;IAwCL;;;;;IAMA,KAAAC,aAAa,GAAG,KAAK;IAErB;;;;IAKA,KAAAC,iBAAiB,GAAG,GAAG;IAEvB;;;;;;IAOA,KAAAC,UAAU,GAAG,KAAK;IAED,KAAAC,YAAY,GAAG,IAAI;IAE1B,KAAAC,aAAa,GACnB,IAAIP,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAACQ,MAAM,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;EAiDxE;EA7CWC,iBAAiBA,CAAA;IACxB,KAAK,CAACA,iBAAiB,EAAE;IACzB,IAAI,CAACC,cAAc,GAAG,IAAIC,cAAc,CAAC,MAAM,KAAK,IAAI,CAACC,YAAY,EAAE,CAAC;IACxE,IAAI,CAACF,cAAc,CAACG,OAAO,CAAC,IAAI,CAAC;EACnC;EAESC,oBAAoBA,CAAA;IAC3B,KAAK,CAACA,oBAAoB,EAAE;IAC5B,IAAI,CAACJ,cAAc,EAAEK,UAAU,EAAE;EACnC;EAEmBC,UAAUA,CAAA;IAC3B,IAAI,CAACJ,YAAY,EAAE;EACrB;EAEmBK,MAAMA,CAAA;IACvB,MAAMC,cAAc,GAAGzB,IAAI;;;;KAI1B;IACD,MAAM0B,aAAa,GAAG1B,IAAI;;;;KAIzB;IAED,OAAOA,IAAI;yBACUK,QAAQ,CAAC;MAC5B,QAAQ,EAAE,CAAC,IAAI,CAACQ,YAAY;MAC5B,KAAK,EAAE,IAAI,CAACA;KACb,CAAC;QAEET,KAAK,CACA,IAAI,CAACS,YAAY,IAAI,IAAI,CAACD,UAAU,IAC5B,CAAC,IAAI,CAACC,YAAY,IAAI,CAAC,IAAI,CAACH,aAAc,GAC/CV,IAAI,GAAG0B,aAAa,GAAGD,cAAc,EAAE,GACvCzB,IAAI,GAAGyB,cAAc,GAAGC,aAAa,EAAE,CAAC;;KAEnD;EACH;EAEQP,YAAYA,CAAA;IAClB,IAAI,CAACN,YAAY,GAAG,IAAI,CAACc,WAAW,IAAI,IAAI,CAAChB,iBAAiB;EAChE;;AAlHgBH,WAAA,CAAAoB,MAAM,GAAmB7B,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqC3C;AAQD8B,UAAA,EADC3B,QAAQ,CAAC;EAAC4B,SAAS,EAAE,gBAAgB;EAAEC,OAAO,EAAE,IAAI;EAAEC,IAAI,EAAEC;AAAO,CAAC,CAAC,E,mFAChD;AAOtBJ,UAAA,EADC3B,QAAQ,CAAC;EAAC4B,SAAS,EAAE,sBAAsB;EAAEC,OAAO,EAAE,IAAI;EAAEC,IAAI,EAAEE;AAAM,CAAC,CAAC,E,uFACnD;AASxBL,UAAA,EADC3B,QAAQ,CAAC;EAAC4B,SAAS,EAAE,aAAa;EAAEC,OAAO,EAAE,IAAI;EAAEC,IAAI,EAAEC;AAAO,CAAC,CAAC,E,gFAChD;AAEFJ,UAAA,EAAhB1B,KAAK,EAAE,E,kFAA6B;AAhE1BK,WAAW,GAAAqB,UAAA,EADvB5B,aAAa,CAAC,mBAAmB,CAAC,C,EACtBO,WAAW,CAoHvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}