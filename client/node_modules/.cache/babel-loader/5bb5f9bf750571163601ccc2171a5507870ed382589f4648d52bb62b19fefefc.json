{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst app = express();\nconst PORT = process.env.PORT || 6000;\n\n// Middleware\napp.use(bodyParser.json());\napp.use(cors()); // Enable CORS for all routes\n\n// Recommendation endpoint\napp.post('/recommend', async (req, res) => {\n  try {\n    // Extract user interests from the request body\n    const {\n      interests\n    } = req.body;\n\n    // Call Symmetric AI API or perform recommendation logic here\n    // For demonstration purposes, let's just return a static list of recommendations\n    const recommendations = ['Paris', 'Tokyo', 'Rome']; // Replace with actual recommendations\n\n    res.json({\n      recommendations\n    });\n  } catch (error) {\n    console.error('Error generating recommendations:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","bodyParser","cors","app","PORT","process","env","use","json","post","req","res","interests","body","recommendations","error","console","status","listen","log"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/src/recommend.jsx"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\n\nconst app = express();\nconst PORT = process.env.PORT || 6000;\n\n// Middleware\napp.use(bodyParser.json());\napp.use(cors()); // Enable CORS for all routes\n\n// Recommendation endpoint\napp.post('/recommend', async (req, res) => {\n  try {\n    // Extract user interests from the request body\n    const { interests } = req.body;\n\n    // Call Symmetric AI API or perform recommendation logic here\n    // For demonstration purposes, let's just return a static list of recommendations\n    const recommendations = ['Paris', 'Tokyo', 'Rome']; // Replace with actual recommendations\n\n    res.json({ recommendations });\n  } catch (error) {\n    console.error('Error generating recommendations:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACAD,GAAG,CAACI,GAAG,CAACN,UAAU,CAACO,IAAI,CAAC,CAAC,CAAC;AAC1BL,GAAG,CAACI,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEjB;AACAC,GAAG,CAACM,IAAI,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACF;IACA,MAAM;MAAEC;IAAU,CAAC,GAAGF,GAAG,CAACG,IAAI;;IAE9B;IACA;IACA,MAAMC,eAAe,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;;IAEpDH,GAAG,CAACH,IAAI,CAAC;MAAEM;IAAgB,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzDJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC;MAAEO,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;;AAEF;AACAZ,GAAG,CAACe,MAAM,CAACd,IAAI,EAAE,MAAM;EACrBY,OAAO,CAACG,GAAG,CAAE,yCAAwCf,IAAK,EAAC,CAAC;AAC9D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}