{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/** Formats a slot name for display in logged messages. */\nfunction formatSlotName(slotName) {\n  return slotName ? `\"${slotName}\"` : 'default';\n}\n/**\n * Controller that checks the host element for incorrectly slotted children.\n *\n * @param supportedSlotNames Names of supported slots under the host element.\n *     The default slot is denoted by an empty string.\n */\nexport class SlotValidationController {\n  constructor(host, logger, supportedSlotNames) {\n    this.host = host;\n    this.logger = logger;\n    this.supportedSlotNames = supportedSlotNames;\n    host.addController(this);\n  }\n  hostConnected() {\n    for (const child of this.host.children) {\n      this.checkChildSlotValidity(child);\n    }\n  }\n  checkChildSlotValidity(child) {\n    const slotName = child.getAttribute('slot') ?? '';\n    if (!this.supportedSlotNames.includes(slotName)) {\n      this.logger.warn(`Detected child element in unsupported ${formatSlotName(slotName)} ` + `slot. This component supports the following slots: ${this.supportedSlotNames.map(formatSlotName).join(', ')}.`, child);\n    }\n  }\n}","map":{"version":3,"names":["formatSlotName","slotName","SlotValidationController","constructor","host","logger","supportedSlotNames","addController","hostConnected","child","children","checkChildSlotValidity","getAttribute","includes","warn","map","join"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/base/slot_validation_controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {LoggingController} from './logging_controller.js';\n\n/** Formats a slot name for display in logged messages. */\nfunction formatSlotName(slotName: string): string {\n  return slotName ? `\"${slotName}\"` : 'default';\n}\n\n/**\n * Controller that checks the host element for incorrectly slotted children.\n *\n * @param supportedSlotNames Names of supported slots under the host element.\n *     The default slot is denoted by an empty string.\n */\nexport class SlotValidationController implements ReactiveController {\n  constructor(\n      private readonly host: ReactiveControllerHost&LitElement,\n      private readonly logger: LoggingController,\n      private readonly supportedSlotNames: string[]) {\n    host.addController(this);\n  }\n\n  hostConnected() {\n    for (const child of this.host.children) {\n      this.checkChildSlotValidity(child);\n    }\n  }\n\n  private checkChildSlotValidity(child: Element) {\n    const slotName = child.getAttribute('slot') ?? '';\n    if (!this.supportedSlotNames.includes(slotName)) {\n      this.logger.warn(\n          `Detected child element in unsupported ${formatSlotName(slotName)} ` +\n              `slot. This component supports the following slots: ${\n                  this.supportedSlotNames.map(formatSlotName).join(', ')}.`,\n          child);\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;AAUA;AACA,SAASA,cAAcA,CAACC,QAAgB;EACtC,OAAOA,QAAQ,GAAG,IAAIA,QAAQ,GAAG,GAAG,SAAS;AAC/C;AAEA;;;;;;AAMA,OAAM,MAAOC,wBAAwB;EACnCC,YACqBC,IAAuC,EACvCC,MAAyB,EACzBC,kBAA4B;IAF5B,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,kBAAkB,GAAlBA,kBAAkB;IACrCF,IAAI,CAACG,aAAa,CAAC,IAAI,CAAC;EAC1B;EAEAC,aAAaA,CAAA;IACX,KAAK,MAAMC,KAAK,IAAI,IAAI,CAACL,IAAI,CAACM,QAAQ,EAAE;MACtC,IAAI,CAACC,sBAAsB,CAACF,KAAK,CAAC;;EAEtC;EAEQE,sBAAsBA,CAACF,KAAc;IAC3C,MAAMR,QAAQ,GAAGQ,KAAK,CAACG,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;IACjD,IAAI,CAAC,IAAI,CAACN,kBAAkB,CAACO,QAAQ,CAACZ,QAAQ,CAAC,EAAE;MAC/C,IAAI,CAACI,MAAM,CAACS,IAAI,CACZ,yCAAyCd,cAAc,CAACC,QAAQ,CAAC,GAAG,GAChE,sDACI,IAAI,CAACK,kBAAkB,CAACS,GAAG,CAACf,cAAc,CAAC,CAACgB,IAAI,CAAC,IAAI,CAAC,GAAG,EACjEP,KAAK,CAAC;;EAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}