{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate, __metadata } from \"tslib\";\nimport { css, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { WebFont, WebFontController } from '../../base/web_font_controller.js';\nimport { makeWaypoint } from '../../utils/place_utils.js';\nimport { PlaceDataConsumer } from '../place_data_consumer.js';\nimport { DirectionsController } from './directions_controller.js';\nfunction getIconNameFromTravelMode(travelMode) {\n  switch (travelMode) {\n    case 'bicycling':\n      return 'directions_bike';\n    case 'transit':\n      return 'directions_subway';\n    case 'walking':\n      return 'directions_walk';\n    default:\n      return 'directions_car';\n  }\n}\n/**\n * Converts data into a format suitable for specifying a place in the\n * `DirectionsRequest`.\n *\n * @return A `google.maps.Place` object that is identified by exactly one of\n *     Place ID, location, or query, with preference in that order.\n */\nfunction makePlaceForDirectionsRequest(data) {\n  if (!data) return null;\n  const {\n    placeId,\n    location,\n    query\n  } = makeWaypoint(data);\n  if (placeId) return {\n    placeId\n  };\n  if (location) return {\n    location\n  };\n  if (query) return {\n    query\n  };\n  return null;\n}\n/**\n * Component that displays as text the distance to this place from an origin,\n * or the duration if a travel mode is also specified.\n *\n * @package Intended for template usage in the Place Overview component only.\n */\nlet PlaceDistanceLabel = class PlaceDistanceLabel extends PlaceDataConsumer {\n  constructor() {\n    super(...arguments);\n    this.fontLoader = new WebFontController(this, [WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n    this.directionsController = new DirectionsController(this);\n    this.isFetchingDirectionsData = false;\n  }\n  willUpdate(changedProperties) {\n    super.willUpdate(changedProperties);\n    // Re-fetch directions data if either origin or travel mode changes.\n    if (changedProperties.has('origin') || changedProperties.has('travelMode')) {\n      this.updateDirectionsData();\n    }\n  }\n  placeChangedCallback(value, oldValue) {\n    // Re-fetch directions data if Place ID of the destination changes.\n    if (value?.id !== oldValue?.id) {\n      this.updateDirectionsData();\n    }\n  }\n  render() {\n    const {\n      distance,\n      duration\n    } = this.directionsData ?? {};\n    if (this.isFetchingDirectionsData || !distance) return html``;\n    if (!(this.travelMode && duration)) {\n      return html`<span>${distance.text}</span>`;\n    }\n    return html`\n      <span class=\"icon material-symbols-outlined\">\n        ${getIconNameFromTravelMode(this.travelMode)}\n      </span>\n      <span>${duration.text}</span>\n    `;\n  }\n  /** @ignore */\n  getRequiredFields() {\n    return []; // Place ID alone is sufficient for a Directions request.\n  }\n  placeHasData() {\n    return this.directionsData != null;\n  }\n  async updateDirectionsData() {\n    if (this.isFetchingDirectionsData) return;\n    const place = this.getPlace();\n    const origin = makePlaceForDirectionsRequest(this.origin);\n    const destination = makePlaceForDirectionsRequest(place);\n    if (origin && destination) {\n      this.isFetchingDirectionsData = true;\n      const result = await this.directionsController.route({\n        origin,\n        destination,\n        travelMode: this.travelMode?.toUpperCase() ?? 'DRIVING'\n      });\n      this.directionsData = result?.routes[0]?.legs[0];\n      // When switching the travel mode between driving and undefined,\n      // this.directionsData is unchanged but we still want an update.\n      this.requestUpdate();\n    } else {\n      this.directionsData = undefined;\n    }\n    this.isFetchingDirectionsData = false;\n  }\n};\nPlaceDistanceLabel.styles = css`\n    .icon {\n      font-size: inherit;\n      line-height: inherit;\n      vertical-align: bottom;\n    }\n  `;\n__decorate([property({\n  attribute: 'travel-mode',\n  reflect: true,\n  type: String\n}), __metadata(\"design:type\", String)], PlaceDistanceLabel.prototype, \"travelMode\", void 0);\n__decorate([property({\n  attribute: false\n}), __metadata(\"design:type\", Object)], PlaceDistanceLabel.prototype, \"origin\", void 0);\n__decorate([state(), __metadata(\"design:type\", Object)], PlaceDistanceLabel.prototype, \"directionsData\", void 0);\nPlaceDistanceLabel = __decorate([customElement('gmpx-place-distance-label-internal')], PlaceDistanceLabel);\nexport { PlaceDistanceLabel };","map":{"version":3,"names":["css","html","customElement","property","state","WebFont","WebFontController","makeWaypoint","PlaceDataConsumer","DirectionsController","getIconNameFromTravelMode","travelMode","makePlaceForDirectionsRequest","data","placeId","location","query","PlaceDistanceLabel","constructor","fontLoader","MATERIAL_SYMBOLS_OUTLINED","directionsController","isFetchingDirectionsData","willUpdate","changedProperties","has","updateDirectionsData","placeChangedCallback","value","oldValue","id","render","distance","duration","directionsData","text","getRequiredFields","placeHasData","place","getPlace","origin","destination","result","route","toUpperCase","routes","legs","requestUpdate","undefined","styles","__decorate","attribute","reflect","type","String"],"sources":["/Users/achiladilshan/Desktop/travelmate/client/node_modules/@googlemaps/extended-component-library/src/place_building_blocks/place_distance_label/place_distance_label.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {css, html, PropertyValues} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\n\nimport {WebFont, WebFontController} from '../../base/web_font_controller.js';\nimport type {LatLng, LatLngLiteral, Place} from '../../utils/googlemaps_types.js';\nimport {makeWaypoint} from '../../utils/place_utils.js';\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\n\nimport {DirectionsController} from './directions_controller.js';\n\n\ntype TravelMode = google.maps.TravelMode;\ntype TravelModeAttribute = Lowercase<TravelMode>;\n\nfunction getIconNameFromTravelMode(travelMode: TravelModeAttribute): string {\n  switch (travelMode) {\n    case 'bicycling':\n      return 'directions_bike';\n    case 'transit':\n      return 'directions_subway';\n    case 'walking':\n      return 'directions_walk';\n    default:\n      return 'directions_car';\n  }\n}\n\n/**\n * Converts data into a format suitable for specifying a place in the\n * `DirectionsRequest`.\n *\n * @return A `google.maps.Place` object that is identified by exactly one of\n *     Place ID, location, or query, with preference in that order.\n */\nfunction makePlaceForDirectionsRequest(data: LatLng|LatLngLiteral|Place|null|\n                                       undefined): google.maps.Place|null {\n  if (!data) return null;\n  const {placeId, location, query} = makeWaypoint(data);\n  if (placeId) return {placeId};\n  if (location) return {location};\n  if (query) return {query};\n  return null;\n}\n\n/**\n * Component that displays as text the distance to this place from an origin,\n * or the duration if a travel mode is also specified.\n *\n * @package Intended for template usage in the Place Overview component only.\n */\n@customElement('gmpx-place-distance-label-internal')\nexport class PlaceDistanceLabel extends PlaceDataConsumer {\n  static override styles = css`\n    .icon {\n      font-size: inherit;\n      line-height: inherit;\n      vertical-align: bottom;\n    }\n  `;\n\n  /**\n   * Travel mode to be used when computing transit time from `origin`.\n   * If undefined (default), this component will render the distance instead.\n   */\n  @property({attribute: 'travel-mode', reflect: true, type: String})\n  travelMode?: TravelModeAttribute;\n\n  /** Starting location or Place. */\n  @property({attribute: false}) origin?: LatLng|LatLngLiteral|Place;\n\n  @state() private directionsData?: google.maps.DirectionsLeg;\n\n  protected readonly fontLoader =\n      new WebFontController(this, [WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n\n  private readonly directionsController = new DirectionsController(this);\n  private isFetchingDirectionsData = false;\n\n  protected override willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n\n    // Re-fetch directions data if either origin or travel mode changes.\n    if (changedProperties.has('origin') ||\n        changedProperties.has('travelMode')) {\n      this.updateDirectionsData();\n    }\n  }\n\n  protected override placeChangedCallback(\n      value?: Place|null, oldValue?: Place|null) {\n    // Re-fetch directions data if Place ID of the destination changes.\n    if (value?.id !== oldValue?.id) {\n      this.updateDirectionsData();\n    }\n  }\n\n  protected override render() {\n    const {distance, duration} = this.directionsData ?? {};\n    if (this.isFetchingDirectionsData || !distance) return html``;\n\n    if (!(this.travelMode && duration)) {\n      return html`<span>${distance.text}</span>`;\n    }\n\n    return html`\n      <span class=\"icon material-symbols-outlined\">\n        ${getIconNameFromTravelMode(this.travelMode)}\n      </span>\n      <span>${duration.text}</span>\n    `;\n  }\n\n  /** @ignore */\n  getRequiredFields(): Array<keyof Place> {\n    return [];  // Place ID alone is sufficient for a Directions request.\n  }\n\n  protected override placeHasData(): boolean {\n    return this.directionsData != null;\n  }\n\n  private async updateDirectionsData() {\n    if (this.isFetchingDirectionsData) return;\n    const place = this.getPlace();\n    const origin = makePlaceForDirectionsRequest(this.origin);\n    const destination = makePlaceForDirectionsRequest(place);\n    if (origin && destination) {\n      this.isFetchingDirectionsData = true;\n      const result = await this.directionsController.route({\n        origin,\n        destination,\n        travelMode: (this.travelMode?.toUpperCase() ?? 'DRIVING') as TravelMode,\n      });\n      this.directionsData = result?.routes[0]?.legs[0];\n      // When switching the travel mode between driving and undefined,\n      // this.directionsData is unchanged but we still want an update.\n      this.requestUpdate();\n    } else {\n      this.directionsData = undefined;\n    }\n    this.isFetchingDirectionsData = false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-distance-label-internal': PlaceDistanceLabel;\n  }\n}\n"],"mappings":"AAAA;;;;;;AAMA,SAAQA,GAAG,EAAEC,IAAI,QAAuB,KAAK;AAC7C,SAAQC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAO,mBAAmB;AAEhE,SAAQC,OAAO,EAAEC,iBAAiB,QAAO,mCAAmC;AAE5E,SAAQC,YAAY,QAAO,4BAA4B;AACvD,SAAQC,iBAAiB,QAAO,2BAA2B;AAE3D,SAAQC,oBAAoB,QAAO,4BAA4B;AAM/D,SAASC,yBAAyBA,CAACC,UAA+B;EAChE,QAAQA,UAAU;IAChB,KAAK,WAAW;MACd,OAAO,iBAAiB;IAC1B,KAAK,SAAS;MACZ,OAAO,mBAAmB;IAC5B,KAAK,SAAS;MACZ,OAAO,iBAAiB;IAC1B;MACE,OAAO,gBAAgB;;AAE7B;AAEA;;;;;;;AAOA,SAASC,6BAA6BA,CAACC,IACS;EAC9C,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAACC,OAAO;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAGT,YAAY,CAACM,IAAI,CAAC;EACrD,IAAIC,OAAO,EAAE,OAAO;IAACA;EAAO,CAAC;EAC7B,IAAIC,QAAQ,EAAE,OAAO;IAACA;EAAQ,CAAC;EAC/B,IAAIC,KAAK,EAAE,OAAO;IAACA;EAAK,CAAC;EACzB,OAAO,IAAI;AACb;AAEA;;;;;;AAOO,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAmB,SAAQT,iBAAiB;EAAlDU,YAAA;;IAqBc,KAAAC,UAAU,GACzB,IAAIb,iBAAiB,CAAC,IAAI,EAAE,CAACD,OAAO,CAACe,yBAAyB,CAAC,CAAC;IAEnD,KAAAC,oBAAoB,GAAG,IAAIZ,oBAAoB,CAAC,IAAI,CAAC;IAC9D,KAAAa,wBAAwB,GAAG,KAAK;EAkE1C;EAhEqBC,UAAUA,CAACC,iBAAiC;IAC7D,KAAK,CAACD,UAAU,CAACC,iBAAiB,CAAC;IAEnC;IACA,IAAIA,iBAAiB,CAACC,GAAG,CAAC,QAAQ,CAAC,IAC/BD,iBAAiB,CAACC,GAAG,CAAC,YAAY,CAAC,EAAE;MACvC,IAAI,CAACC,oBAAoB,EAAE;;EAE/B;EAEmBC,oBAAoBA,CACnCC,KAAkB,EAAEC,QAAqB;IAC3C;IACA,IAAID,KAAK,EAAEE,EAAE,KAAKD,QAAQ,EAAEC,EAAE,EAAE;MAC9B,IAAI,CAACJ,oBAAoB,EAAE;;EAE/B;EAEmBK,MAAMA,CAAA;IACvB,MAAM;MAACC,QAAQ;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACC,cAAc,IAAI,EAAE;IACtD,IAAI,IAAI,CAACZ,wBAAwB,IAAI,CAACU,QAAQ,EAAE,OAAO/B,IAAI,EAAE;IAE7D,IAAI,EAAE,IAAI,CAACU,UAAU,IAAIsB,QAAQ,CAAC,EAAE;MAClC,OAAOhC,IAAI,SAAS+B,QAAQ,CAACG,IAAI,SAAS;;IAG5C,OAAOlC,IAAI;;UAELS,yBAAyB,CAAC,IAAI,CAACC,UAAU,CAAC;;cAEtCsB,QAAQ,CAACE,IAAI;KACtB;EACH;EAEA;EACAC,iBAAiBA,CAAA;IACf,OAAO,EAAE,CAAC,CAAE;EACd;EAEmBC,YAAYA,CAAA;IAC7B,OAAO,IAAI,CAACH,cAAc,IAAI,IAAI;EACpC;EAEQ,MAAMR,oBAAoBA,CAAA;IAChC,IAAI,IAAI,CAACJ,wBAAwB,EAAE;IACnC,MAAMgB,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC7B,MAAMC,MAAM,GAAG5B,6BAA6B,CAAC,IAAI,CAAC4B,MAAM,CAAC;IACzD,MAAMC,WAAW,GAAG7B,6BAA6B,CAAC0B,KAAK,CAAC;IACxD,IAAIE,MAAM,IAAIC,WAAW,EAAE;MACzB,IAAI,CAACnB,wBAAwB,GAAG,IAAI;MACpC,MAAMoB,MAAM,GAAG,MAAM,IAAI,CAACrB,oBAAoB,CAACsB,KAAK,CAAC;QACnDH,MAAM;QACNC,WAAW;QACX9B,UAAU,EAAG,IAAI,CAACA,UAAU,EAAEiC,WAAW,EAAE,IAAI;OAChD,CAAC;MACF,IAAI,CAACV,cAAc,GAAGQ,MAAM,EAAEG,MAAM,CAAC,CAAC,CAAC,EAAEC,IAAI,CAAC,CAAC,CAAC;MAChD;MACA;MACA,IAAI,CAACC,aAAa,EAAE;KACrB,MAAM;MACL,IAAI,CAACb,cAAc,GAAGc,SAAS;;IAEjC,IAAI,CAAC1B,wBAAwB,GAAG,KAAK;EACvC;;AAzFgBL,kBAAA,CAAAgC,MAAM,GAAGjD,GAAG;;;;;;GAM3B;AAODkD,UAAA,EADC/C,QAAQ,CAAC;EAACgD,SAAS,EAAE,aAAa;EAAEC,OAAO,EAAE,IAAI;EAAEC,IAAI,EAAEC;AAAM,CAAC,CAAC,E,uFACjC;AAGHJ,UAAA,EAA7B/C,QAAQ,CAAC;EAACgD,SAAS,EAAE;AAAK,CAAC,CAAC,E,mFAAqC;AAEjDD,UAAA,EAAhB9C,KAAK,EAAE,E,2FAAoD;AAnBjDa,kBAAkB,GAAAiC,UAAA,EAD9BhD,aAAa,CAAC,oCAAoC,CAAC,C,EACvCe,kBAAkB,CA2F9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}